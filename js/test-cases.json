{"6f6023d3": "{\"functionOrClassName\": \"createHelloWorld\", \"tests\": [\"createHelloWorld()()\", \"(() => {const a = createHelloWorld(); return a();})()\", \"(() => {const a = createHelloWorld; return a()();})()\", \"(() => {let f = createHelloWorld(); return f();})()\", \"(() => {let a = createHelloWorld; let b = a(); return b();})()\", \"(() => {const a = createHelloWorld(); const b = a; return b();})()\", \"(() => {const f = createHelloWorld(); return f();})()\", \"(() => {let f = createHelloWorld; return f()();})()\", \"(() => {const a = createHelloWorld(); const b = a(); return b();})()\", \"(() => {let a = createHelloWorld(); let b = a; return b()();})()\", \"(() => {let f = createHelloWorld(); let g = f(); return g();})()\"]}", "206ff3b4": "{\"functionOrClassName\": \"createCounter\", \"tests\": [\"createCounter(5).increment()\", \"createCounter(5).decrement()\", \"createCounter(5).reset()\", \"createCounter(0).increment()\", \"createCounter(0).decrement()\", \"createCounter(0).reset()\", \"createCounter(-5).increment()\", \"createCounter(-5).decrement()\", \"createCounter(-5).reset()\", \"createCounter(100).increment()\", \"createCounter(100).decrement()\", \"createCounter(100).reset()\", \"(() => {const counter = createCounter(5); counter.increment(); counter.decrement(); return counter.reset();})()\", \"(() => {const counter = createCounter(0); counter.increment(); counter.increment(); return counter.reset();})()\", \"(() => {const counter = createCounter(-5); counter.decrement(); counter.decrement(); return counter.reset();})()\", \"(() => {const counter = createCounter(10); for (let i = 0; i < 5; i++) counter.increment(); return counter.reset();})()\", \"(() => {const counter = createCounter(20); for (let i = 0; i < 5; i++) counter.decrement(); return counter.reset();})()\"]}", "85269073": "{\"functionOrClassName\": \"map\", \"tests\": [\"map([1, 2, 3], (x) => x * 2)\", \"map([1, 2, 3], (x, i) => x + i)\", \"map([], (x) => x * 2)\", \"map([1, 2, 3], (x) => x.toString())\", \"map([1, 2, 3], (x) => x % 2 === 0 ? 'even' : 'odd')\", \"map([1, 2, 3, 4, 5], (x) => x * x)\", \"map([1.1, 2.2, 3.3], (x) => Math.floor(x))\", \"map(['a', 'b', 'c'], (x) => x.toUpperCase())\", \"map([true, false, true], (x) => !x)\", \"map([null, undefined, null], (x) => x === null ? 'null' : 'undefined')\", \"map([{a: 1}, {a: 2}], (x) => x.a)\", \"(() => {const arr = [1, 2, 3]; return map(arr, (x) => arr[x - 1] * 2);})()\", \"(() => {const fn = (x) => x * 2; return map([1, 2, 3], fn);})()\"]}", "7a1e9131": "{\"functionOrClassName\": \"filter\", \"tests\": [\"filter([1, 2, 3], (x) => x > 1)\", \"filter([1, 2, 3], (x) => x > 0)\", \"filter([1, 2, 3], (x, i) => i > 0)\", \"filter([1, 2, 3], (x, i) => x > i)\", \"filter([1, 2, 3, 4, 5], (x) => x % 2 === 0)\", \"filter([1, 2, 3, 4, 5], (x) => x % 2 !== 0)\", \"filter([1, 2, 3, 4, 5], (x, i) => i % 2 === 0)\", \"filter([1, 2, 3, 4, 5], (x, i) => x % 2 === 0 && i % 2 === 0)\", \"filter([], (x) => x > 0)\", \"filter([null, undefined, 0, 1, 2], (x) => x)\", \"filter([1, 2, 3], (x) => {let remainder = x%3; return remainder === 0;})\", \"filter([1, 2, 3, 4, 5, 6], (x) => {let remainder = x%3; return remainder === 0;})\"]}", "7a785fb2": "{\"functionOrClassName\": \"reduce\", \"tests\": [\"reduce([1,2,3,4], (a,b) => a + b, 0)\", \"reduce([1,2,3,4], (a,b) => a * b, 1)\", \"reduce([1,2,3,4], (a,b) => a - b, 0)\", \"reduce([], (a,b) => a + b, 0)\", \"reduce([5], (a,b) => 2 * a + b, 2)\", \"reduce([1,2,3,4], (a,b) => Math.max(a,b), -Infinity)\", \"reduce([1,2,3,4], (a,b) => Math.min(a,b), Infinity)\", \"reduce([1,2,3,4,5,6,7,8,9,10], (a,b) => a + b, 100)\", \"reduce([1,2,3,4], (a,b) => a.toString() + b.toString(), \\\"\\\")\", \"reduce([1,2,3,4], (a,b) => a + b, 5)\", \"reduce([1,2,3,4], (a,b) => {if (a > b) {return a;} else {return b;}}, 0)\"]}", "0c2e69cb": "{\"functionOrClassName\": \"timeLimit\", \"tests\": [\"(() => {const limited = timeLimit((t) => new Promise(res => setTimeout(res, t)), 100); return limited(50);})()\", \"(() => {const limited = timeLimit((t) => new Promise(res => setTimeout(res, t)), 100); return limited(150).catch(err => err);})()\", \"(() => {const limited = timeLimit((t) => new Promise(res => setTimeout(res, t)), 100); return limited(100).catch(err => err);})()\", \"(() => {const limited = timeLimit((t) => new Promise(res => setTimeout(res, 0)), 100); return limited(50);})()\", \"(() => {const limited = timeLimit((t) => new Promise((res, rej) => setTimeout(() => rej('Error'), t)), 100); return limited(50).catch(err => err);})()\", \"(() => {const limited = timeLimit((t) => new Promise((res, rej) => setTimeout(() => rej('Error'), t)), 100); return limited(150).catch(err => err);})()\", \"(() => {const limited = timeLimit((t) => {throw 'Error'}, 100); return limited(50).catch(err => err);})()\", \"(() => {const limited = timeLimit((t) => new Promise(res => setTimeout(res, t)), 0); return limited(50).catch(err => err);})()\", \"(() => {const limited = timeLimit((t) => new Promise(res => setTimeout(res, t)), 1000); return limited(50);})()\", \"(() => {const limited = timeLimit(async (t) => {await new Promise(res => setTimeout(res, t)); return t;}, 100); return limited(50);})()\", \"(() => {const limited = timeLimit(async (t) => {await new Promise(res => setTimeout(res, t)); return t;}, 100); return limited(150).catch(err => err);})()\", \"(() => {const limited = timeLimit(async (t) => {await new Promise((res, rej) => setTimeout(() => rej('Error'), t)); return t;}, 100); return limited(50).catch(err => err);})()\", \"(() => {const limited = timeLimit(async (t) => {await new Promise((res, rej) => setTimeout(() => rej('Error'), t)); return t;}, 100); return limited(150).catch(err => err);})()\", \"(() => {const limited = timeLimit((t) => new Promise(res => setTimeout(() => res(t), t)), 100); return limited(50);})()\"]}", "0c49e71d": "{\"functionOrClassName\": \"TimeLimitedCache\", \"tests\": [\"(() => {const cache = new TimeLimitedCache(); return cache.set(1, 1, 1000);})()\", \"(() => {const cache = new TimeLimitedCache(); cache.set(1, 1, 1000); return cache.get(1);})()\", \"(() => {const cache = new TimeLimitedCache(); cache.set(1, 1, 1000); return cache.count();})()\", \"(() => {const cache = new TimeLimitedCache(); cache.set(1, 1, 1000); cache.set(1, 2, 1000); return cache.get(1);})()\", \"(() => {const cache = new TimeLimitedCache(); cache.set(1, 1, 1000); setTimeout(() => { return cache.get(1); }, 2000);})()\", \"(() => {const cache = new TimeLimitedCache(); cache.set(1, 1, 1000); cache.set(2, 2, 2000); return cache.count();})()\", \"(() => {const cache = new TimeLimitedCache(); cache.set(1, 1, 1000); cache.set(2, 2, 2000); cache.set(1, 10, 1000); return cache.get(1);})()\", \"(() => {const cache = new TimeLimitedCache(); cache.set(1, 1, 1000); return cache.get(2);})()\", \"(() => {const cache = new TimeLimitedCache(); cache.set(1, 1, 0); return cache.get(1);})()\", \"(() => {const cache = new TimeLimitedCache(); cache.set(1, 1, 1000); cache.set(2, 2, 2000); cache.set(3, 3, 3000); return cache.count();})()\", \"(() => {const cache = new TimeLimitedCache(); return cache.get(1);})()\", \"(() => {const cache = new TimeLimitedCache(); cache.set(1, 1, 1000); cache.set(1, 1, 1000); return cache.count();})()\", \"(() => {const cache = new TimeLimitedCache(); cache.set(1, 1, 1000); setTimeout(() => { return cache.count(); }, 2000);})()\", \"(() => {const cache = new TimeLimitedCache(); cache.set(1, 1, 1000); cache.set(2, 2, 1000); setTimeout(() => { return cache.count(); }, 2000);})()\"]}", "a7b01e57": "{\"functionOrClassName\": \"debounce\", \"tests\": [\"debounce(() => 1, 100)()\", \"debounce(() => {console.log(2); return 3;}, 200)()\", \"debounce((a, b) => a + b, 100)(1, 2)\", \"debounce(function(a, b) {return this.c + a + b;}, 200).bind({c: 5})(10, 20)\", \"(() => {let f = debounce((a, b) => a + b, 150); f(1, 2); return f(3, 4);})()\", \"(() => {let f = debounce((a, b) => a + b, 50); f(1, 2); return f(3, 4);})()\", \"(() => {let f = debounce((a) => a * 2, 50); return f(5);})()\", \"(() => {let f = debounce((a) => {let ret = 0; for (let i = 0; i < a; ++i) ret += i; return ret;}, 200); return f(5);})()\", \"(() => {let f = debounce((...args) => args.reduce((a, b) => a + b, 0), 100); return f(1, 2, 3, 4, 5);})()\", \"(() => {let f = debounce(async (a, b) => await Promise.resolve(a + b), 100); return f(1, 2);})()\", \"(() => {let f = debounce((a, b) => new Promise((resolve, reject) => {setTimeout(() => {resolve(a + b);}, 200);}), 100); return f(1, 2);})()\", \"(() => {let f = debounce((a, b) => a + b, 0); return f(1, 2);})()\", \"(() => {let f = debounce((a, b) => a + b, -1); return f(1, 2);})()\", \"(() => {let f = debounce((a, b) => a + b, -100); return f(1, 2);})()\", \"(() => {let f = debounce((a, b) => a + b, Infinity); return f(1, 2);})()\", \"(() => {let f = debounce((a, b) => a + b, NaN); return f(1, 2);})()\"]}", "633a215c": "{\"functionOrClassName\": \"promiseAll\", \"tests\": [\"promiseAll([])\", \"promiseAll([async () => 1])\", \"promiseAll([async () => 1, async () => 2, async () => 3])\", \"promiseAll([async () => Promise.resolve(1), async () => Promise.resolve(2)])\", \"promiseAll([async () => Promise.reject('Error')])\", \"promiseAll([async () => 1, async () => Promise.reject('Error'), async () => 3])\", \"promiseAll([async () => {throw new Error('Error')}])\", \"promiseAll([async () => 1, async () => {throw new Error('Error')}, async () => 3])\", \"promiseAll([async () => new Promise(resolve => setTimeout(() => resolve(1), 100)), async () => 2])\", \"promiseAll([async () => new Promise(resolve => setTimeout(() => resolve(1), 100)), async () => new Promise((resolve, reject) => setTimeout(() => reject('Error'), 50))])\", \"promiseAll([async () => Promise.resolve(1), async () => Promise.resolve(2), async () => Promise.resolve(3), async () => Promise.resolve(4), async () => Promise.resolve(5)])\", \"promiseAll([async () => 1, async () => 2, async () => 3, async () => 4, async () => 5, async () => Promise.reject('Error')])\", \"promiseAll([async () => 'a', async () => 'b', async () => 'c'])\", \"promiseAll([async () => { const obj = { key: 'value' }; return obj; }])\"]}", "d210a3f2": "{\"functionOrClassName\": \"EventEmitter\", \"tests\": [\"new EventEmitter()\", \"(() => {const emitter = new EventEmitter(); return emitter.subscribe('event1', () => {});})()\", \"(() => {const emitter = new EventEmitter(); return emitter.emit('event1');})()\", \"(() => {const emitter = new EventEmitter(); emitter.subscribe('event1', () => {}); return emitter.emit('event1');})()\", \"(() => {const emitter = new EventEmitter(); emitter.subscribe('event1', (a, b) => a + b); return emitter.emit('event1', [1, 2]);})()\", \"(() => {const emitter = new EventEmitter(); const sub1 = emitter.subscribe('event1', () => 1); const sub2 = emitter.subscribe('event1', () => 2); return emitter.emit('event1');})()\", \"(() => {const emitter = new EventEmitter(); const sub = emitter.subscribe('event1', () => {}); sub.unsubscribe(); return emitter.emit('event1');})()\", \"(() => {const emitter = new EventEmitter(); const sub1 = emitter.subscribe('event1', () => 1); const sub2 = emitter.subscribe('event1', () => 2); sub1.unsubscribe(); return emitter.emit('event1');})()\", \"(() => {const emitter = new EventEmitter(); emitter.subscribe('event1', () => {}); return emitter.emit('event2');})()\", \"(() => {const emitter = new EventEmitter(); const sub = emitter.subscribe('event1', () => {}); sub.unsubscribe(); sub.unsubscribe(); return emitter.emit('event1');})()\", \"(() => {const emitter = new EventEmitter(); const sub = emitter.subscribe('event1', () => {throw new Error('test error');}); return emitter.emit('event1');})()\", \"(() => {const emitter = new EventEmitter(); emitter.subscribe('event1', (a) => a); emitter.subscribe('event2', (a, b) => a + b); return emitter.emit('event1', [1]);})()\", \"(() => {const emitter = new EventEmitter(); emitter.subscribe('event1', (a) => a); emitter.subscribe('event2', (a, b) => a + b); return emitter.emit('event2', [1, 2]);})()\"]}", "c3dce390": "{\"functionOrClassName\": \"Calculator\", \"tests\": [\"new Calculator(5).add(3).getResult()\", \"new Calculator(10).subtract(2).getResult()\", \"new Calculator(2).multiply(4).getResult()\", \"new Calculator(10).divide(2).getResult()\", \"new Calculator(2).power(3).getResult()\", \"new Calculator(0).add(5).getResult()\", \"new Calculator(100).subtract(50).getResult()\", \"new Calculator(5).multiply(0).getResult()\", \"new Calculator(1).divide(1).getResult()\", \"new Calculator(2).power(0).getResult()\", \"new Calculator(5).add(3).subtract(2).getResult()\", \"new Calculator(2).multiply(3).divide(2).getResult()\", \"new Calculator(2).power(2).add(2).getResult()\", \"new Calculator(10).divide(2).multiply(3).getResult()\", \"(() => { let calc = new Calculator(5); calc.add(2); calc.multiply(3); return calc.getResult(); })()\", \"(() => { let calc = new Calculator(10); calc.subtract(5); calc.divide(2); return calc.getResult(); })()\", \"(() => { let calc = new Calculator(2); calc.power(3); calc.add(1); return calc.getResult(); })()\", \"(() => { let calc = new Calculator(5); return calc.add(2.5).getResult(); })()\", \"(() => { let calc = new Calculator(10); return calc.subtract(-5).getResult(); })()\", \"(() => { let calc = new Calculator(2); return calc.multiply(3.5).getResult(); })()\"]}", "0b640618": "{\"functionOrClassName\": \"mergeKLists\", \"tests\": [\"mergeKLists([])\",\"mergeKLists([arrayToList([1,4,5]),arrayToList([1,3,4]),arrayToList([2,6])])\", \"mergeKLists([arrayToList([1, 2, 3])])\", \"mergeKLists([null])\", \"mergeKLists([arrayToList([])])\", \"mergeKLists([arrayToList([1])])\", \"mergeKLists([arrayToList([1, 2, 3]), arrayToList([4, 5, 6]), arrayToList([7, 8, 9])])\", \"mergeKLists([arrayToList([1, 3, 5]), arrayToList([2, 4, 6]), arrayToList([0, 7, 8])])\", \"mergeKLists([arrayToList([1, 1, 1]), arrayToList([1, 1, 1]), arrayToList([1, 1, 1])])\", \"mergeKLists([arrayToList([-1, 0, 1]), arrayToList([-2, -1, 0]), arrayToList([0, 1, 2])])\", \"mergeKLists([arrayToList([5, 4, 3, 2, 1]), arrayToList([5, 4, 3, 2, 1]), arrayToList([5, 4, 3, 2, 1])])\", \"mergeKLists([arrayToList([1, 2, 3]), null, arrayToList([4, 5, 6])])\", \"mergeKLists([arrayToList([1, 2, 3]), arrayToList([]), arrayToList([4, 5, 6])])\", \"mergeKLists([arrayToList([1]), arrayToList([2]), arrayToList([3]), arrayToList([4]), arrayToList([5]), arrayToList([6]), arrayToList([7]), arrayToList([8]), arrayToList([9]), arrayToList([10])])\"]}", "85279de8": "{\"functionOrClassName\": \"mergeAlternately\", \"tests\": [\"mergeAlternately(\\\"abc\\\", \\\"pqr\\\")\", \"mergeAlternately(\\\"ab\\\", \\\"pqrs\\\")\", \"mergeAlternately(\\\"abcd\\\", \\\"pq\\\")\", \"mergeAlternately(\\\"\\\", \\\"\\\")\", \"mergeAlternately(\\\"a\\\", \\\"\\\")\", \"mergeAlternately(\\\"\\\", \\\"b\\\")\", \"mergeAlternately(\\\"a\\\", \\\"bc\\\")\", \"mergeAlternately(\\\"abc\\\", \\\"b\\\")\", \"mergeAlternately(\\\"12345\\\", \\\"67890\\\")\", \"mergeAlternately(\\\"1\\\", \\\"234567890\\\")\", \"mergeAlternately(\\\"1234567890\\\", \\\"1\\\")\", \"mergeAlternately(\\\"11111\\\", \\\"22222\\\")\", \"mergeAlternately(\\\"123\\\", \\\"456\\\")\", \"mergeAlternately(\\\"11\\\", \\\"2\\\")\", \"mergeAlternately(\\\"1\\\", \\\"22\\\")\"]}", "526b4e6c": "{\"functionOrClassName\": \"gcdOfStrings\", \"tests\": [\"gcdOfStrings(\\\"ABCABC\\\", \\\"ABC\\\")\", \"gcdOfStrings(\\\"ABABAB\\\", \\\"ABAB\\\")\", \"gcdOfStrings(\\\"LEET\\\", \\\"CODE\\\")\", \"gcdOfStrings(\\\"ABCDEF\\\", \\\"ABC\\\")\", \"gcdOfStrings(\\\"TAU\\\", \\\"TAU\\\")\", \"gcdOfStrings(\\\"AAAAAAAAA\\\", \\\"AA\\\")\", \"gcdOfStrings(\\\"ababab\\\", \\\"abab\\\")\", \"gcdOfStrings(\\\"NLNLNLNLNL\\\", \\\"NL\\\")\", \"gcdOfStrings(\\\"OBC\\\", \\\"OBC\\\")\", \"gcdOfStrings(\\\"ABC\\\", \\\"ABCABC\\\")\", \"gcdOfStrings(\\\"A\\\", \\\"B\\\")\", \"gcdOfStrings(\\\"AAA\\\", \\\"AA\\\")\"]}", "a3998d46": "{\"functionOrClassName\": \"reverseWords\", \"tests\": [\"reverseWords(\\\"the sky is blue\\\")\", \"reverseWords(\\\"  hello world  \\\")\", \"reverseWords(\\\"a good   example\\\")\", \"reverseWords(\\\"  Bob    Loves  Alice   \\\")\", \"reverseWords(\\\"the\\\")\", \"reverseWords(\\\"\\\")\", \"reverseWords(\\\"    \\\")\", \"reverseWords(\\\" 1\\\")\", \"reverseWords(\\\"1 \\\")\", \"reverseWords(\\\"This is a long sentence with multiple spaces\\\")\", \"reverseWords(\\\"  leading and trailing spaces  \\\")\", \"reverseWords(\\\"This is a sentence with no extra spaces\\\")\", \"reverseWords(\\\"  This  is a  sentence with  multiple spaces between words  \\\")\", \"reverseWords(\\\"  OneWord  \\\")\", \"reverseWords(\\\"Two Words\\\")\"]}", "60e3615e": "{\"functionOrClassName\": \"productExceptSelf\", \"tests\": [\"productExceptSelf([1,2,3,4])\", \"productExceptSelf([0,0])\", \"productExceptSelf([1,0])\", \"productExceptSelf([0,1])\", \"productExceptSelf([1,1])\", \"productExceptSelf([-1,1])\", \"productExceptSelf([1,-1])\", \"productExceptSelf([-1,-1])\", \"productExceptSelf([1,2,3,4,5])\", \"productExceptSelf([5,4,3,2,1])\", \"productExceptSelf([1,2,0,4,5])\", \"productExceptSelf([1,2,3,0,5])\", \"productExceptSelf([0,2,3,4,5])\", \"productExceptSelf([1,0,0,0,0])\", \"productExceptSelf([0,1,0,0,0])\", \"productExceptSelf([0,0,1,0,0])\", \"productExceptSelf([0,0,0,1,0])\", \"productExceptSelf([0,0,0,0,1])\"]}", "2145ba63": "{\"functionOrClassName\": \"compress\", \"tests\": [\"compress([\\\"a\\\",\\\"a\\\",\\\"b\\\",\\\"b\\\",\\\"c\\\",\\\"c\\\",\\\"c\\\"])\", \"compress([\\\"a\\\"])\", \"compress([\\\"a\\\",\\\"b\\\",\\\"b\\\",\\\"b\\\",\\\"b\\\",\\\"b\\\",\\\"b\\\",\\\"b\\\",\\\"b\\\",\\\"b\\\",\\\"b\\\",\\\"b\\\",\\\"b\\\"])\", \"compress([\\\"a\\\",\\\"a\\\",\\\"a\\\",\\\"b\\\",\\\"b\\\",\\\"a\\\",\\\"a\\\"])\", \"compress([])\", \"compress([\\\"a\\\",\\\"a\\\",\\\"b\\\",\\\"c\\\"])\", \"compress([\\\"a\\\",\\\"b\\\",\\\"c\\\"])\", \"compress([\\\"a\\\",\\\"a\\\",\\\"a\\\",\\\"a\\\",\\\"a\\\",\\\"a\\\",\\\"a\\\",\\\"a\\\",\\\"a\\\",\\\"a\\\",\\\"a\\\",\\\"a\\\"])\", \"compress([\\\"a\\\",\\\"a\\\",\\\"a\\\",\\\"a\\\",\\\"a\\\",\\\"b\\\"])\", \"compress([\\\"a\\\",\\\"a\\\",\\\"a\\\",\\\"a\\\",\\\"a\\\",\\\"a\\\",\\\"a\\\",\\\"a\\\",\\\"a\\\",\\\"a\\\",\\\"a\\\",\\\"a\\\",\\\"b\\\",\\\"b\\\",\\\"b\\\",\\\"b\\\",\\\"b\\\",\\\"b\\\",\\\"b\\\",\\\"b\\\",\\\"b\\\",\\\"b\\\",\\\"b\\\",\\\"b\\\",\\\"c\\\",\\\"c\\\",\\\"c\\\",\\\"c\\\",\\\"c\\\",\\\"c\\\",\\\"c\\\",\\\"c\\\",\\\"c\\\",\\\"c\\\",\\\"c\\\",\\\"c\\\",\\\"c\\\",\\\"c\\\"])\"]}", "9bccfb79": "{\"functionOrClassName\": \"longestOnes\", \"tests\": [\"longestOnes([1,1,1,0,0,0,1,1,1,1,0], 2)\", \"longestOnes([0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], 3)\", \"longestOnes([1,0,0,0,1,1,0,0,1,1], 0)\", \"longestOnes([1,1,1,1,1,1,1,1,1,1], 5)\", \"longestOnes([0,0,0,0,0], 0)\", \"longestOnes([0,0,0,0,0], 2)\", \"longestOnes([], 0)\", \"longestOnes([1], 0)\", \"longestOnes([0], 1)\", \"longestOnes([1,0,1,0,1,0,1], 4)\", \"longestOnes([1,0,1,0,1,0,1,0,1,0,1], 10)\", \"longestOnes([0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0], 5)\"]}", "2a9a0bc8": "{\"functionOrClassName\": \"findDifference\", \"tests\": [\"findDifference([1, 2, 3], [2, 4, 6])\", \"findDifference([1, 2, 3, 3], [2, 3, 4, 6])\", \"findDifference([1, 2, 3], [2, 4, 6, 1, 2, 3])\", \"findDifference([], [])\", \"findDifference([1, 2, 3], [])\", \"findDifference([], [4, 5, 6])\", \"findDifference([1], [1])\", \"findDifference([1, 1, 1, 2, 2, 3], [1, 2, 4, 5, 6])\", \"findDifference([1, 2, 3, 4, 5], [5, 4, 3, 2, 1])\", \"findDifference([1, 2, 3, 4, 5, 5, 5, 5], [5, 4, 3, 2, 1, 1, 1, 1])\"]}", "3a502c87": "{\"functionOrClassName\": \"removeStars\", \"tests\": [\"removeStars(\\\"leet**cod*e\\\")\", \"removeStars(\\\"erase*****\\\")\", \"removeStars(\\\"\\\")\", \"removeStars(\\\"a\\\")\", \"removeStars(\\\"*\\\")\", \"removeStars(\\\"**\\\")\", \"removeStars(\\\"***\\\")\", \"removeStars(\\\"****\\\")\", \"removeStars(\\\"*****\\\")\", \"removeStars(\\\"abcdef\\\")\", \"removeStars(\\\"aabbccddeeff\\\")\", \"removeStars(\\\"a*b*c*d*e*f\\\")\", \"removeStars(\\\"*******\\\")\", \"removeStars(\\\"le*et**cod*e\\\")\", \"removeStars(\\\"erase*****\\\")\"]}", "0629e5f0": "{\"functionOrClassName\": \"predictPartyVictory\", \"tests\": [\"predictPartyVictory(\\\"RD\\\")\", \"predictPartyVictory(\\\"RDD\\\")\", \"predictPartyVictory(\\\"DDRRR\\\")\", \"predictPartyVictory(\\\"RDDR\\\")\", \"predictPartyVictory(\\\"RDRDR\\\")\", \"predictPartyVictory(\\\"RRRDDD\\\")\", \"predictPartyVictory(\\\"DRRDRDR\\\")\", \"predictPartyVictory(\\\"RRRRDDDD\\\")\", \"predictPartyVictorydf28e0d3": "{\"functionOrClassName\": \"deleteMiddle\", \"tests\": [\"deleteMiddle(null)\", \"deleteMiddle(new ListNode(1))\", \"deleteMiddle(new ListNode(1, new ListNode(2)))\", \"deleteMiddle(new ListNode(1, new ListNode(2, new ListNode(3))))\", \"deleteMiddle(new ListNode(1, new ListNode(2, new ListNode(3, new ListNode(4)))))\", \"deleteMiddle(new ListNode(1, new ListNode(2, new ListNode(3, new ListNode(4, new ListNode(5))))))\", \"deleteMiddle(new ListNode(1, new ListNode(2, new ListNode(3, new ListNode(4, new ListNode(5, new ListNode(6)))))))\", \"deleteMiddle(new ListNode(1, new ListNode(2, new ListNode(3, new ListNode(4, new ListNode(5, new ListNode(6, new ListNode(7))))))))\", \"(() => {let a = new ListNode(1); let b = new ListNode(2); let c = new ListNode(3); a.next = b; b.next = c; return deleteMiddle(a);})()\", \"(() => {let a = new ListNode(1); let b = new ListNode(2); let c = new ListNode(3); let d = new ListNode(4); a.next = b; b.next = c; c.next = d; return deleteMiddle(a);})()\"]}", "45aab43a": "{\"functionOrClassName\": \"lowestCommonAncestor\", \"tests\": [\"lowestCommonAncestor(null, null, null)\", \"lowestCommonAncestor(null, {val: 1}, null)\", \"lowestCommonAncestor({val: 1}, {val: 1}, null)\", \"lowestCommonAncestor({val: 1}, null, {val: 1})\", \"lowestCommonAncestor({val: 1, left: {val: 2}, right: {val: 3}}, {val: 1}, {val: 3})\", \"lowestCommonAncestor({val: 1, left: {val: 2}, right: {val: 3}}, {val: 2}, {val: 3})\", \"lowestCommonAncestor({val: 1, left: {val: 2}, right: {val: 3}}, {val: 2}, {val: 2})\", \"lowestCommonAncestor({val: 1, left: {val: 2, left: {val: 4}}, right: {val: 3}}, {val: 2}, {val: 4})\", \"lowestCommonAncestor({val: 1, left: {val: 2, left: {val: 4}}, right: {val: 3}}, {val: 4}, {val: 3})\", \"lowestCommonAncestor({val: 1, left: {val: 2, left: {val: 4}}, right: {val: 3, right: {val: 5}}}, {val: 4}, {val: 5})\", \"lowestCommonAncestor({val: 1, left: {val: 2, left: {val: 4, left: {val: 6}}}, right: {val: 3}}, {val: 6}, {val: 4})\", \"lowestCommonAncestor({val: 1, left: {val: 2}, right: {val: 3}}, {val: 6}, {val: 7})\", \"lowestCommonAncestor({val: 1, left: {val: 2}, right: {val: 3}}, {val: 3}, {val: 2})\"]}", "81a1a875": "{\"functionOrClassName\": \"findCircleNum\", \"tests\": [\"findCircleNum([[1,1,0],[1,1,0],[0,0,1]])\", \"findCircleNum([[1,0,0],[0,1,0],[0,0,1]])\", \"findCircleNum([[1,0,0,1],[0,1,1,0],[0,1,1,1],[1,0,1,1]])\", \"findCircleNum([[1,1,1],[1,1,1],[1,1,1]])\", \"findCircleNum([[1,0,0,0,0,0,0,0,0,1,0,0,0,0,0],[0,1,0,1,0,0,0,0,0,0,0,0,0,1,0],[0,0,1,0,0,0,0,0,0,0,0,0,0,0,0],[0,1,0,1,0,0,0,1,0,0,0,1,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,1,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,1,0,0,0,0,0,0,0,0],[0,0,0,1,0,0,0,1,1,0,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0,0,0],[0,0,0,1,0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0,1,0,0],[0,1,0,0,0,0,0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]])\", \"findCircleNum([[1]])\", \"findCircleNum([[0]])\", \"findCircleNum([[1,0],[0,1]])\", \"findCircleNum([[1,1],[1,1]])\", \"findCircleNum([[1,1,0],[1,1,1],[0,1,1]])\", \"findCircleNum([[1,0,0],[0,1,0],[0,0,1]])\", \"findCircleNum([[1,1,1,1,1],[1,1,0,0,1],[1,0,1,0,1],[1,0,0,1,1],[1,1,1,1,1]])\"]]\n}", "c3d20eb8": "{\"functionOrClassName\": \"findPeakElement\", \"tests\": [\"findPeakElement([1,2,3,1])\", \"findPeakElement([1,2,1,3,5,6,4])\", \"findPeakElement([1])\", \"findPeakElement([1, 2])\", \"findPeakElement([2, 1])\", \"findPeakElement([1, 2, 3])\", \"findPeakElement([3, 2, 1])\", \"findPeakElement([1, 3, 2, 4, 3])\", \"findPeakElement([1,2,3,4,5,4,3,2,1,0])\", \"findPeakElement([0,1,2,3,4,5,4,3,2,1])\", \"findPeakElement([1,2,3,4,5])\", \"findPeakElement([5,4,3,2,1])\"]}", "62eb4728": "{\"functionOrClassName\": \"twoSum\", \"tests\": [\"twoSum([2,7,11,15], 9)\", \"twoSum([3,2,4], 6)\", \"twoSum([3,3], 6)\", \"twoSum([1, 4, 5, 7, 9, 11], 12)\", \"twoSum([1, 4, 5, 7, 9, 11], 22)\", \"twoSum([1, 4, 5, 7, 9, 11], 2)\", \"twoSum([-1, -3, 7, 5], 4)\", \"twoSum([-1, -3, 7, 5], 12)\", \"twoSum([0, 4, 3, 0], 0)\", \"twoSum([2,5,5,11], 10)\", \"twoSum([1, 2, 3, 4, 5], 7)\", \"twoSum([1, 2, 3, 4, 5], 10)\"]}", "2cca0414": "{\"functionOrClassName\": \"isAnagram\", \"tests\": [\"isAnagram(\\\"anagram\\\", \\\"nagaram\\\")\", \"isAnagram(\\\"rat\\\", \\\"car\\\")\", \"isAnagram(\\\"a\\\", \\\"ab\\\")\", \"isAnagram(\\\"ab\\\", \\\"a\\\")\", \"isAnagram(\\\"anagram\\\", \\\"margana\\\")\", \"isAnagram(\\\"listen\\\", \\\"silent\\\")\", \"isAnagram(\\\"triangle\\\", \\\"integral\\\")\", \"isAnagram(\\\"hello\\\", \\\"world\\\")\", \"isAnagram(\\\"aacc\\\", \\\"caca\\\")\", \"isAnagram(\\\"ab\\\", \\\"ba\\\")\", \"isAnagram(\\\"elb\\\", \\\"bel\\\")\", \"isAnagram(\\\"study\\\", \\\"dusty\\\")\", \"isAnagram(\\\"night\\\", \\\"thing\\\")\", \"isAnagram(\\\"inch\\\", \\\"chin\\\")\", \"isAnagram(\\\"act\\\", \\\"cat\\\")\"]}", "780fc909": "{\"functionOrClassName\": \"romanToInt\", \"tests\": [\"romanToInt(\\\"III\\\")\", \"romanToInt(\\\"LVIII\\\")\", \"romanToInt(\\\"MCMXCIV\\\")\", \"romanToInt(\\\"IX\\\")\", \"romanToInt(\\\"IV\\\")\", \"romanToInt(\\\"XL\\\")\", \"romanToInt(\\\"XC\\\")\", \"romanToInt(\\\"CD\\\")\", \"romanToInt(\\\"CM\\\")\", \"romanToInt(\\\"MMMCMXCIX\\\")\", \"romanToInt(\\\"I\\\")\", \"romanToInt(\\\"V\\\")\", \"romanToInt(\\\"X\\\")\", \"romanToInt(\\\"L\\\")\", \"romanToInt(\\\"C\\\")\", \"romanToInt(\\\"D\\\")\", \"romanToInt(\\\"M\\\")\"]}", "f2727c08": "{\"functionOrClassName\": \"isPalindrome\", \"tests\": [\"isPalindrome(121)\", \"isPalindrome(-121)\", \"isPalindrome(10)\", \"isPalindrome(12321)\", \"isPalindrome(123321)\", \"isPalindrome(1221)\", \"isPalindrome(0)\", \"isPalindrome(1)\", \"isPalindrome(9999)\", \"isPalindrome(100001)\", \"isPalindrome(1000001)\", \"isPalindrome(2147483647)\", \"isPalindrome(2147447412)\", \"isPalindrome(1234567899)\"]}", "1708bc47": "{\"functionOrClassName\": \"fizzBuzz\", \"tests\": [\"fizzBuzz(1)\", \"fizzBuzz(2)\", \"fizzBuzz(3)\", \"fizzBuzz(5)\", \"fizzBuzz(15)\", \"fizzBuzz(0)\", \"fizzBuzz(100)\", \"fizzBuzz(30)\", \"fizzBuzz(21)\", \"fizzBuzz(50)\", \"fizzBuzz(99)\", \"fizzBuzz(1000)\", \"fizzBuzz(3000)\", \"fizzBuzz(5000)\", \"fizzBuzz(15000)\", \"fizzBuzz(1)\", \"fizzBuzz(4)\", \"fizzBuzz(7)\", \"fizzBuzz(11)\", \"fizzBuzz(13)\"]}", "e8597624": "{\"functionOrClassName\": \"majorityElement\", \"tests\": [\"majorityElement([3,2,3])\", \"majorityElement([2,2,1,1,1,2,2])\", \"majorityElement([1])\", \"majorityElement([1, 2])\", \"majorityElement([1, 1, 2])\", \"majorityElement([1, 2, 2])\", \"majorityElement([1, 1, 2, 2, 3])\", \"majorityElement([3, 3, 4, 2, 4, 4, 2, 4, 4])\", \"majorityElement([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10, 10])\", \"majorityElement([2, 2, 2, 2, 2, 1, 3, 4, 5, 6, 7, 8, 9, 10])\", \"majorityElement([1, 2, 3, 4, 5, 1, 1, 1, 1, 1])\"]}", "a8274ded": "{\"functionOrClassName\": \"firstUniqChar\", \"tests\": [\"firstUniqChar(\\\"leetcode\\\")\", \"firstUniqChar(\\\"loveleetcode\\\")\", \"firstUniqChar(\\\"aabb\\\")\", \"firstUniqChar(\\\"dddccdbba\\\")\", \"firstUniqChar(\\\"z\\\")\", \"firstUniqChar(\\\"aadadaad\\\")\", \"firstUniqChar(\\\"abcabcbb\\\")\", \"firstUniqChar(\\\"\\\")\", \"firstUniqChar(\\\"cc\\\")\", \"firstUniqChar(\\\"ovo\\\")\", \"firstUniqChar(\\\"blahblah\\\")\"]}", "3eb81366": "{\"functionOrClassName\": \"binarySearch\", \"tests\": [\"binarySearch([1, 2, 3, 4, 5], 3)\", \"binarySearch([1, 2, 3, 4, 5], 6)\", \"binarySearch([1, 2, 3, 4, 5], 1)\", \"binarySearch([1, 2, 3, 4, 5], 5)\", \"binarySearch([1, 2, 3, 4, 5], 2)\", \"binarySearch([2, 5], 2)\", \"binarySearch([2, 5], 5)\", \"binarySearch([2, 5], 3)\", \"binarySearch([2, 5], 1)\", \"binarySearch([2, 5], 6)\", \"binarySearch([], 1)\", \"binarySearch([1], 1)\", \"binarySearch([1, 5], 5)\", \"binarySearch([1, 5], 1)\", \"binarySearch([1, 3, 5, 7, 9, 11], 7)\", \"binarySearch([1, 3, 5, 7, 9, 11], 12)\", \"binarySearch([1, 3, 5, 7, 9, 11], 0)\", \"binarySearch([1, 5, 6, 8, 10], 10)\", \"binarySearch([1, 5, 6, 8, 10], 1)\"]}", "57c6f9a0": "{\"functionOrClassName\": \"moveZeroes\", \"tests\": [\"moveZeroes([0,1,0,3,12])\", \"moveZeroes([0])\", \"moveZeroes([1])\", \"moveZeroes([1, 0])\", \"moveZeroes([0, 1])\", \"moveZeroes([0, 0, 0])\", \"moveZeroes([1, 1, 1])\", \"moveZeroes([0, 1, 0, 2, 0, 0, 3, 4, 0, 5])\", \"moveZeroes([1, 2, 3, 4, 5, 0, 0, 0, 0, 0])\", \"moveZeroes([0, 0, 0, 0, 0, 1, 2, 3, 4, 5])\", \"moveZeroes([-1, 0, 1])\", \"moveZeroes([-1, 0, -1, 0, 1])\"]}", "6580d05e": "{\"functionOrClassName\": \"isPalindrome\", \"tests\": [\"isPalindrome(\\\"A man, a plan, a canal: Panama\\\")\", \"isPalindrome(\\\"race a car\\\")\", \"isPalindrome(\\\" \\\")\", \"isPalindrome(\\\".,\\\")\", \"isPalindrome(\\\"0P\\\")\", \"isPalindrome(\\\"a\\\")\", \"isPalindrome(\\\"\\\")\", \"isPalindrome(\\\"ab\\\")\", \"isPalindrome(\\\"aba\\\")\", \"isPalindrome(\\\"aa\\\")\", \"isPalindrome(\\\"ab ba\\\")\", \"isPalindrome(\\\"1ab1\\\")\", \"isPalindrome(\\\"1221\\\")\", \"isPalindrome(\\\"1a2b2a1\\\")\"]}", "11e93294": "{\"functionOrClassName\": \"isPowerOfThree\", \"tests\": [\"isPowerOfThree(0)\", \"isPowerOfThree(1)\", \"isPowerOfThree(3)\", \"isPowerOfThree(9)\", \"isPowerOfThree(27)\", \"isPowerOfThree(81)\", \"isPowerOfThree(243)\", \"isPowerOfThree(5)\", \"isPowerOfThree(10)\", \"isPowerOfThree(45)\", \"isPowerOfThree(15)\", \"isPowerOfThree(19683)\", \"isPowerOfThree(59049)\", \"isPowerOfThree(177147)\", \"isPowerOfThree(531441)\", \"isPowerOfThree(-1)\", \"isPowerOfThree(-3)\", \"isPowerOfThree(-27)\", \"isPowerOfThree(19684)\", \"isPowerOfThree(59050)\", \"isPowerOfThree(177148)\"]}", "d236a9b6": "{\"functionOrClassName\": \"findDisappearedNumbers\", \"tests\": [\"findDisappearedNumbers([4,3,2,7,8,2,3,1])\", \"findDisappearedNumbers([1,1])\", \"findDisappearedNumbers([1,2,3,4,5,6,7,8])\", \"findDisappearedNumbers([1])\", \"findDisappearedNumbers([])\", \"findDisappearedNumbers([1,2,2,2,2,2,2,2])\", \"findDisappearedNumbers([1,2,2,4,5,6,7,8])\", \"findDisappearedNumbers([1,1,1,1,1,1,1,1])\", \"findDisappearedNumbers([2,2,3,3,4,4,5,5])\", \"findDisappearedNumbers([1,2,3,4,5,6,7,7])\"]}", "14101931": "{\"functionOrClassName\": \"minCostClimbingStairs\", \"tests\": [\"minCostClimbingStairs([10,15,20])\", \"minCostClimbingStairs([1,100,1,1,1,100,1,1,100,1])\", \"minCostClimbingStairs([0,0,0,0])\", \"minCostClimbingStairs([1,2,3,4,5,6,7,8,9,10])\", \"minCostClimbingStairs([1,1,1,1,1,1,1,1,1,1])\", \"minCostClimbingStairs([1,2])\", \"minCostClimbingStairs([0,1,2,3,4,5,0,1,2,3,4,5,0,1,2,3,4,5,0,1,2,3,4,5,0,1,2,3,4,5,0,1,2,3,4,5,0,1,2,3,4,5,0,1,2,3,4,5,0,1,2,3,4,5,0,1,2,3,4,5])\", \"minCostClimbingStairs([5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5", "6f38f00a": "{\"functionOrClassName\": \"addBinary\", \"tests\": [\"addBinary(\\\"11\\\", \\\"1\\\")\", \"addBinary(\\\"1010\\\", \\\"1011\\\")\", \"addBinary(\\\"1\\\", \\\"0\\\")\", \"addBinary(\\\"0\\\", \\\"0\\\")\", \"addBinary(\\\"111\\\", \\\"111\\\")\", \"addBinary(\\\"100\\\", \\\"110010\\\")\", \"addBinary(\\\"11\\\", \\\"100\\\")\", \"addBinary(\\\"101\\\", \\\"1\\\")\", \"addBinary(\\\"1\\\", \\\"1111\\\")\", \"addBinary(\\\"1111\\\", \\\"1111\\\")\", \"addBinary(\\\"0\\\", \\\"1\\\")\", \"addBinary(\\\"1\\\", \\\"1\\\")\"]}", "5a79682a": "{\"functionOrClassName\": \"isHappy\", \"tests\": [\"isHappy(1)\", \"isHappy(2)\", \"isHappy(7)\", \"isHappy(10)\", \"isHappy(13)\", \"isHappy(19)\", \"isHappy(23)\", \"isHappy(28)\", \"isHappy(31)\", \"isHappy(32)\", \"isHappy(100)\", \"isHappy(999)\", \"isHappy(2023)\", \"isHappy(123456789)\", \"isHappy(987654321)\", \"isHappy(Number.MAX_SAFE_INTEGER)\", \"isHappy(1111111)\", \"isHappy(7777777)\", \"isHappy(123123123)\", \"isHappy(999999999)\"]}", "c0774c5f": "{\"functionOrClassName\": \"maxDepth\", \"tests\": [\"maxDepth(null)\", \"maxDepth(new TreeNode(1))\", \"maxDepth(new TreeNode(1, new TreeNode(2), null))\", \"maxDepth(new TreeNode(1, null, new TreeNode(2)))\", \"maxDepth(new TreeNode(1, new TreeNode(2), new TreeNode(3)))\", \"maxDepth(new TreeNode(1, new TreeNode(2, new TreeNode(4), null), new TreeNode(3)))\", \"maxDepth(new TreeNode(1, new TreeNode(2, null, new TreeNode(4)), new TreeNode(3)))\", \"maxDepth(new TreeNode(1, new TreeNode(2, new TreeNode(4), new TreeNode(5)), new TreeNode(3)))\", \"maxDepth(new TreeNode(1, new TreeNode(2), new TreeNode(3, new TreeNode(4), new TreeNode(5))))\", \"maxDepth(new TreeNode(1, new TreeNode(2, new TreeNode(4, new TreeNode(5)), new TreeNode(6)), new TreeNode(3, new TreeNode(7), new TreeNode(8))))\", \"maxDepth(new TreeNode(3, new TreeNode(9), new TreeNode(20, new TreeNode(15), new TreeNode(7))))\", \"maxDepth(new TreeNode(1, new TreeNode(2, new TreeNode(3, new TreeNode(4, new TreeNode(5)))))\", \"maxDepth(new TreeNode(0, new TreeNode(-1), new TreeNode(1)))\"]}", "f349db66": "{\"functionOrClassName\": \"getIntersectionNode\", \"tests\": [\"(() => {const listA = {val: 4, next: {val: 1, next: {val: 8, next: {val: 4, next: {val: 5, next: null}}}}}; const listB = {val: 5, next: {val: 6, next: {val: 1, next: {val: 8, next: {val: 4, next: {val: 5, next: null}}}}}}; return getIntersectionNode(listA, listB);})()\", \"(() => {const listA = {val: 1, next: {val: 9, next: {val: 1, next: {val: 2, next: {val: 4, next: null}}}}}; const listB = {val: 3, next: {val: 2, next: {val: 4, next: null}}}; return getIntersectionNode(listA, listB);})()\", \"(() => {const listA = {val: 2, next: {val: 6, next: {val: 4, next: null}}}; const listB = {val: 1, next: {val: 5, next: null}}; return getIntersectionNode(listA, listB);})()\", \"getIntersectionNode(null, null)\", \"(() => {const listA = {val: 1, next: null}; return getIntersectionNode(listA, listA);})()\", \"(() => {const listA = {val: 1, next: {val: 2, next: null}}; const listB = listA.next; return getIntersectionNode(listA, listB);})()\", \"(() => {const listA = {val: 1, next: {val: 2, next: {val: 3, next: null}}}; const listB = {val: 1, next: {val: 2, next: {val: 3, next: null}}}; return getIntersectionNode(listA, listB);})()\", \"(() => {const listA = {val: 1, next: {val: 3, next: {val: 5, next: {val: 7, next: {val: 9, next: {val: 11, next: null}}}}}}; const listB = {val: 2, next: {val: 4, next: {val: 6, next: {val: 8, next: {val: 10, next: null}}}}} ; return getIntersectionNode(listA, listB);})()\", \"(() => {const listA = {val: 1, next: null}; const listB = {val: 2, next: null}; return getIntersectionNode(listA, listB);})()\", \"(() => { return getIntersectionNode(null, {val: 1, next: null});})()\", \"(() => {const listA = {val: 1, next: {val: 2, next: {val: 3, next: {val: 4, next: {val: 5, next: null}}}}}; const listB = {val: 6, next: {val: 7, next: listA.next.next}}; return getIntersectionNode(listA, listB);})()\"]}", "1990e7c9": "{\"functionOrClassName\": \"minDistance\", \"tests\": [\"minDistance(\\\"horse\\\", \\\"ros\\\")\", \"minDistance(\\\"intention\\\", \\\"execution\\\")\", \"minDistance(\\\"a\\\", \\\"b\\\")\", \"minDistance(\\\"ab\\\", \\\"bc\\\")\", \"minDistance(\\\"abc\\\", \\\"adc\\\")\", \"minDistance(\\\"sea\\\", \\\"eat\\\")\", \"minDistance(\\\"leetcode\\\", \\\"etco\\\")\", \"minDistance(\\\"\\\", \\\"\\\")\", \"minDistance(\\\"a\\\", \\\"\\\")\", \"minDistance(\\\"\\\", \\\"a\\\")\", \"minDistance(\\\"park\\\", \\\"spake\\\")\", \"minDistance(\\\"mart\\\", \\\"karma\\\")\", \"minDistance(\\\"dinitrophenylhydrazine\\\", \\\"benzalphenylhydrazone\\\")\"]}", "bc2ae0f8": "{\"functionOrClassName\": \"longestConsecutive\", \"tests\": [\"longestConsecutive([100,4,200,1,3,2])\", \"longestConsecutive([0,3,7,2,5,8,4,6,0,1])\", \"longestConsecutive([1,2,3,4,5,6,7,8,9,10])\", \"longestConsecutive([])\", \"longestConsecutive([1])\", \"longestConsecutive([1,3,5,7,9])\", \"longestConsecutive([1,1,1,1,1])\", \"longestConsecutive([-1,0,1])\", \"longestConsecutive([9,1,4,7,3,-1,0,5,8,-1,6])\", \"longestConsecutive([1,2,0,1])\", \"longestConsecutive([0])\", \"longestConsecutive([1,5,2,4,3])\", \"longestConsecutive([10,9,8,7,6,5,4,3,2,1,0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10])\", \"longestConsecutive([100, 200, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50])\"]}", "a72d989a": "{\"functionOrClassName\": \"shortestPalindrome\", \"tests\": [\"shortestPalindrome(\\\"aacecaaa\\\")\", \"shortestPalindrome(\\\"abcd\\\")\", \"shortestPalindrome(\\\"aba\\\")\", \"shortestPalindrome(\\\"a\\\")\", \"shortestPalindrome(\\\"\\\")\", \"shortestPalindrome(\\\"racecar\\\")\", \"shortestPalindrome(\\\"abacaba\\\")\", \"shortestPalindrome(\\\"madam\\\")\", \"shortestPalindrome(\\\"level\\\")\", \"shortestPalindrome(\\\"deified\\\")\", \"shortestPalindrome(\\\"rotor\\\")\", \"shortestPalindrome(\\\"aabba\\\")\", \"shortestPalindrome(\\\"aaaaaaaaaaaaaaaaaaaaaaaa\\\")\", \"shortestPalindrome(\\\"aaba\\\")\", \"shortestPalindrome(\\\"abb\\\")\"]}", "f6d3f9c8": "{\"functionOrClassName\": \"findLadders\",\n  \"tests\": [\n    \"findLadders(\\\"hit\\\", \\\"cog\\\", [\\\"hot\\\",\\\"dot\\\",\\\"dog\\\",\\\"lot\\\",\\\"log\\\",\\\"cog\\\"])\",\n    \"findLadders(\\\"hit\\\", \\\"cog\\\", [\\\"hot\\\",\\\"dot\\\",\\\"dog\\\",\\\"lot\\\",\\\"log\\\"])\",\n    \"findLadders(\\\"hit\\\", \\\"cog\\\", [])\",\n    \"findLadders(\\\"red\\\", \\\"tax\\\", [\\\"ted\\\",\\\"tex\\\",\\\"red\\\",\\\"tax\\\",\\\"tad\\\",\\\"den\\\",\\\"rex\\\",\\\"pee\\\"])\",\n    \"findLadders(\\\"red\\\", \\\"tax\\\", [\\\"ted\\\",\\\"tex\\\",\\\"red\\\",\\\"tad\\\",\\\"den\\\",\\\"rex\\\",\\\"pee\\\"])\",\n    \"findLadders(\\\"a\\\", \\\"c\\\", [\\\"a\\\", \\\"b\\\", \\\"c\\\"])\",\n    \"findLadders(\\\"hot\\\", \\\"dog\\\", [\\\"hot\\\", \\\"dog\\\"])\",\n    \"findLadders(\\\"leet\\\", \\\"code\\\", [\\\"lest\\\",\\\"leet\\\",\\\"lose\\\",\\\"code\\\",\\\"lode\\\",\\\"robe\\\",\\\"lost\\\"])\",\n    \"findLadders(\\\"talk\\\", \\\"tail\\\", [\\\"talk\\\",\\\"tons\\\",\\\"fall\\\",\\\"tail\\\",\\\"gale\\\",\\\"hall\\\",\\\"neal\\\",\\\"tale\\\",\\\"teal\\\"])\",\n    \"findLadders(\\\"magic\\\", \\\"pearl\\\", [\\\"magic\\\",\\\"manic\\\",\\\"mania\\\",\\\"maniaq\\\",\\\"maniah\\\",\\\"maniai\\\",\\\"manial\\\",\\\"manip\\\",\\\"manis\\\",\\\"manit\\\",\\\"maniu\\\",\\\"maniv\\\",\\\"maniw\\\",\\\"maniy\\\",\\\"maniz\\\",\\\"manja\\\",\\\"manjb\\\",\\\"manjc\\\",\\\"manjd\\\",\\\"manje\\\",\\\"manjf\\\",\\\"manjg\\\",\\\"manjh\\\",\\\"manji\\\",\\\"manjj\\\",\\\"manjk\\\",\\\"manjl\\\",\\\"manjm\\\",\\\"manjn\\\",\\\"manjo\\\",\\\"manjp\\\",\\\"manjq\\\",\\\"manjr\\\",\\\"manjs\\\",\\\"manjt\\\",\\\"manju\\\",\\\"manjv\\\",\\\"manjw\\\",\\\"manjx\\\",\\\"manjy\\\",\\\"manjz\\\",\\\"manka\\\",\\\"mankb\\\",\\\"mankc\\\",\\\"mankd\\\",\\\"manke\\\",\\\"mankf\\\",\\\"mankg\\\",\\\"mankh\\\",\\\"manki\\\",\\\"mankj\\\",\\\"mankk\\\",\\\"mankl\\\",\\\"mankm\\\",\\\"mankn\\\",\\\"manko\\\",\\\"mankp\\\",\\\"mankq\\\",\\\"mankr\\\",\\\"manks\\\",\\\"mankt\\\",\\\"manku\\\",\\\"mankv\\\",\\\"mankw\\\",\\\"mankx\\\",\\\"manky\\\",\\\"mankz\\\",\\\"manla\\\",\\\"manlb\\\",\\\"manlc\\\",\\\"manld\\\",\\\"manle\\\",\\\"manlf\\\",\\\"manlg\\\",\\\"manlh\\\",\\\"manli\\\",\\\"manlj\\\",\\\"manlk\\\",\\\"manll\\\",\\\"manlm\\\",\\\"manln\\\",\\\"manlo\\\",\\\"manlp\\\",\\\"manlq\\\",\\\"manlr\\\",\\\"manls\\\",\\\"manlt\\\",\\\"manlu\\\",\\\"manlv\\\",\\\"manlw\\\",\\\"manlx\\\",\\\"manly\\\",\\\"manlz\\\",\\\"manma\\\",\\\"manmb\\\",\\\"pearl\\\"])\",\n    \"findLadders(\\\"cet\\\", \\\"ism\\\", [\\\"kid\\\",\\\"tag\\\",\\\"pup\\\",\\\"ail\\\",\\\"tun\\\",\\\"tap\\\",\\\"car\\\",\\\"hat\\\",\\\"pan\\\",\\\"map\\\",\\\"sad\\\",\\\"cab\\\",\\\"ace\\\",\\\"bar\\\",\\\"apt\\\",\\\"bag\\\",\\\"bit\\\",\\\"pie\\\",\\\"bad\\\",\\\"sit\\\",\\\"mad\\\",\\\"pit\\\",\\\"rad\\\",\\\"cat\\\",\\\"pat\\\",\\\"tap\\\",\\\"bat\\\",\\\"tan\\\",\\\"bam\\\",\\\"can\\\",\\\"van\\\",\\\"ram\\\",\\\"pav\\\",\\\"bip\\\",\\\"jib\\\",\\\"bil\\\",\\\"dip\\\",\\\"yap\\\",\\\"sib\\\",\\\"piz\\\",\\\"bam\\\",\\\"zep\\\",\\\"ray\\\",\\\"zip\\\",\\\"zap\\\",\\\"mac\\\",\\\"cap\\\",\\\"sap\\\",\\\"gap\\\",\\\"fab\\\",\\\"hip\\\",\\\"has\\\",\\\"cat\\\",\\\"tad\\\",\\\"arc\\\",\\\"has\\\",\\\"top\\\",\\\"sip\\\",\\\"bit\\\",\\\"bag\\\",\\\"gas\\\",\\\"yip\\\",\\\"tip\\\",\\\"toe\\\",\\\"tap\\\",\\\"tin\\\",\\\"tip\\\",\\\"top\\\",\\\"sip\\\",\\\"fox\\\",\\\"fin\\\",\\\"fit\\\",\\\"hip\\\",\\\"hop\\\",\\\"gap\\\",\\\"jay\\\",\\\"pat\\\",\\\"roy\\\",\\\"ban\\\",\\\"jay\\\",\\\"zap\\\",\\\"cap\\\",\\\"fat\\\",\\\"tap\\\",\\\"cat\\\",\\\"dap\\\",\\\"cap\\\",\\\"bar\\\",\\\"bop\\\",\\\"top\\\",\\\"tar\\\",\\\"cap\\\",\\\"zap\\\",\\\"pap\\\",\\\"rap\\\",\\\"lap\\\",\\\"tat\\\",\\\"pat\\\",\\\"gap\\\",\\\"lab\\\",\\\"lap\\\",\\\"tag\\\",\\\"tap\\\",\\\"bop\\\",\\\"tar\\\",\\\"rad\\\",\\\"tao\\\",\\\"tad\\\",\\\"tin\\\",\\\"pap\\\",\\\"pit\\\",\\\"tap\\\",\\\"tad\\\",\\\"tap\\\",\\\"dad\\\",\\\"tap\\\",\\\"dot\\\",\\\"dab\\\",\\\"dap\\\",\\\"bit\\\",\\\"bar\\\",\\\"tap\\\",\\\"tap\\\",\\\"yap\\\",\\\"car\\\",\\\"nap\\\",\\\"tap\\\",\\\"tar\\\",\\\"tam\\\",\\\"tep\\\",\\\"taw\\\",\\\"pep\\\"])\"\n  ]\n}", "e1e2504e": "{\"functionOrClassName\": \"isMatch\", \"tests\": [\"isMatch(\\\"aa\\\", \\\"a\\\")\", \"isMatch(\\\"aa\\\", \\\"*\\\")\", \"isMatch(\\\"cb\\\", \\\"?a\\\")\", \"isMatch(\\\"adceb\\\", \\\"*a*b\\\")\", \"isMatch(\\\"acdcb\\\", \\\"a*c?b\\\")\", \"isMatch(\\\"aa\\\", \\\"aa\\\")\", \"isMatch(\\\"aaa\\\", \\\"aa\\\")\", \"isMatch(\\\"aa\\\", \\\"a*\\\")\", \"isMatch(\\\"aa\\\", \\\"?*\\\")\", \"isMatch(\\\"ab\\\", \\\"?*\\\")\", \"isMatch(\\\"aab\\\", \\\"c*a*b\\\")\", \"isMatch(\\\"mississippi\\\", \\\"m??*ss*?i*pi\\\")\"]}", "962fbe38": "{\"functionOrClassName\": \"isMatch\", \"tests\": [\"isMatch(\\\"aa\\\", \\\"a\\\")\", \"isMatch(\\\"aa\\\", \\\"a*\\\")\", \"isMatch(\\\"ab\\\", \\\".*\\\")\", \"isMatch(\\\"aab\\\", \\\"c*a*b\\\")\", \"isMatch(\\\"mississippi\\\", \\\"mis*is*p*.\\\")\", \"isMatch(\\\"ab\\\", \\\"a.*\\\")\", \"isMatch(\\\"aaa\\\", \\\"a*a\\\")\", \"isMatch(\\\"aaa\\\", \\\"ab*a*c*a\\\")\", \"isMatch(\\\"a\\\", \\\"ab*\\\")\", \"isMatch(\\\"a\\\", \\\".\\\")\", \"isMatch(\\\"bbbba\\\", \\\".*a*a\\\")\", \"isMatch(\\\"ab\\\", \\\".*c\\\")\", \"isMatch(\\\"aaaaaaaaaaaaab\\\", \\\"a*a*a*a*a*a*a*a*a*a*c\\\")\"]}", "f15a2837": "{\"functionOrClassName\": \"maxCoins\", \"tests\": [\"maxCoins([3,1,5,8])\", \"maxCoins([1,5])\", \"maxCoins([1])\", \"maxCoins([])\", \"maxCoins([7,9,8,0,7,1,3,5,5,2,3,3])\", \"maxCoins([8,2,6,8,9,8,1,4,1,5,3,0,7,7,0,4,2,2])\", \"maxCoins([9,76])\", \"maxCoins([1,3,2,4,5])\", \"maxCoins([1,10,1,1,10])\", \"maxCoins([5,4,3,2,1])\"]}", "5c1e4834": "{\"functionOrClassName\": \"solveSudoku\", \"tests\": [\"(() => {let boardsolveSudoku(board); return JSON.stringify(board);})()\", \"(() => {let boardsolveSudoku(board); return JSON.stringify(board);})()\", \"(() => {let boardsolveSudoku(board); return JSON.stringify(board);})()\", \"(() => { let boardsolveSudoku(board); return JSON.stringify(board);})()\", \"(() => {let board = [[\\\"5\\\",\\\"3\\\",\\\".\\\",\\\".\\\",\\\"7\\\",\\\".\\\",\\\".\\\",\\\".\\\",\\\".\\\"],[\\\"6\\\",\\\".\\\",\\\".\\\",\\\"1\\\",\\\"9\\\",\\\"5\\\",\\\".\\\",\\\".\\\",\\\".\\\"],[\\\".\\\",\\\"9\\\",\\\"8\\\",\\\".\\\",\\\".\\\",\\\".\\\",\\\".\\\",\\\"6\\\",\\\".\\\"],[\\\"8\\\",\\\".\\\",\\\".\\\",\\\".\\\",\\\"6\\\",\\\".\\\",\\\".\\\",\\\".\\\",\\\"3\\\"],[\\\"4\\\",\\\".\\\",\\"}