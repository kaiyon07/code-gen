Problem Number,Name,Description,Examples,Solution,Constraints,Difficulty,Link,Function Header,Linter Outputs
1,Create Hello World Function,"Write a function createHelloWorld. It should return a new function that always returns ""Hello World"".
","Example 1:

Input: args = []
Output: ""Hello World""
Explanation:
const f = createHelloWorld();
f(); // ""Hello World""

The function returned by createHelloWorld should always return ""Hello World"".
Example 2:

Input: args = [{},null,42]
Output: ""Hello World""
Explanation:
const f = createHelloWorld();
f({}, null, 42); // ""Hello World""

Any arguments could be passed to the function but it should still always return ""Hello World"".","var createHelloWorld = function() { 
    return function() {
        return ""Hello World"";
    }
}",0 <= args.length <= 10,Easy,https://leetcode.com/problems/create-hello-world-function/description/?envType=study-plan-v2&envId=30-days-of-javascript,"/**
 * @return {Function}
 */
var createHelloWorld = function() {
    
    return function(...args) {
        
    }
};

/**
 * const f = createHelloWorld();
 * f(); // ""Hello World""
 */","ESLint Output:

[{'ruleId': 'no-var', 'severity': 2, 'message': 'Unexpected var, use let or const instead.', 'line': 1, 'column': 1, 'nodeType': 'VariableDeclaration', 'messageId': 'unexpectedVar', 'endLine': 5, 'endColumn': 2, 'fix': {'range': [0, 3], 'text': 'let'}}, {'ruleId': 'no-unused-vars', 'severity': 2, 'message': ""'createHelloWorld' is assigned a value but never used."", 'line': 1, 'column': 5, 'nodeType': 'Identifier', 'messageId': 'unusedVar', 'endLine': 1, 'endColumn': 21}, {'ruleId': 'func-names', 'severity': 2, 'message': 'Unexpected unnamed function.', 'line': 1, 'column': 24, 'nodeType': 'FunctionExpression', 'messageId': 'unnamed', 'endLine': 1, 'endColumn': 32}, {'ruleId': 'func-names', 'severity': 2, 'message': 'Unexpected unnamed function.', 'line': 2, 'column': 12, 'nodeType': 'FunctionExpression', 'messageId': 'unnamed', 'endLine': 2, 'endColumn': 20}]


Google Closure Compiler Output:

[{'level': 'warning', 'description': 'Missing semicolon', 'key': 'JSC_MISSING_SEMICOLON', 'source': '/tmp/tmp2azqb5qh', 'line': 1, 'column': 0, 'length': 98, 'context': 'var createHelloWorld = function() { \n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Using `var` (prefer `const` or `let`).', 'key': 'JSC_VAR', 'source': '/tmp/tmp2azqb5qh', 'line': 1, 'column': 0, 'length': 98, 'context': 'var createHelloWorld = function() { \n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Function must have JSDoc.', 'key': 'JSC_MISSING_JSDOC', 'source': '/tmp/tmp2azqb5qh', 'line': 1, 'column': 23, 'length': 75, 'context': 'var createHelloWorld = function() { \n                       ^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Missing semicolon', 'key': 'JSC_MISSING_SEMICOLON', 'source': '/tmp/tmp2azqb5qh', 'line': 2, 'column': 4, 'length': 55, 'context': '    return function() {\n    ^^^^^^^^^^^^^^^^^^^'}, {'level': 'info', 'description': '0 error(s), 4 warning(s), 100.0% typed'}]"
2,Counter 2,"Write a function createCounter. It should accept an initial integer init. It should return an object with three functions.

The three functions are:

increment() increases the current value by 1 and then returns it.
decrement() reduces the current value by 1 and then returns it.
reset() sets the current value to init and then returns it.
 ","Example 1:

Input: init = 5, calls = [""increment"",""reset"",""decrement""]
Output: [6,5,4]
Explanation:
const counter = createCounter(5);
counter.increment(); // 6
counter.reset(); // 5
counter.decrement(); // 4
Example 2:

Input: init = 0, calls = [""increment"",""increment"",""decrement"",""reset"",""reset""]
Output: [1,2,1,0,0]
Explanation:
const counter = createCounter(0);
counter.increment(); // 1
counter.increment(); // 2
counter.decrement(); // 1
counter.reset(); // 0
counter.reset(); // 0","var createCounter = function(init) {
  let presentCount = init;

  function increment() {
    return ++presentCount;
  }

  function decrement() {
      return --presentCount;
  }

  function reset() {
      return (presentCount = init);
  }

  return { increment, decrement, reset };
};","-1000 <= init <= 1000
0 <= calls.length <= 1000
calls[i] is one of ""increment"", ""decrement"" and ""reset""",Easy,https://leetcode.com/problems/counter-ii/description/?envType=study-plan-v2&envId=30-days-of-javascript,"/**
 * @param {integer} init
 * @return { increment: Function, decrement: Function, reset: Function }
 */
var createCounter = function(init) {
    
};","ESLint Output:

[{'ruleId': 'no-var', 'severity': 2, 'message': 'Unexpected var, use let or const instead.', 'line': 1, 'column': 1, 'nodeType': 'VariableDeclaration', 'messageId': 'unexpectedVar', 'endLine': 17, 'endColumn': 3, 'fix': {'range': [0, 3], 'text': 'let'}}, {'ruleId': 'no-unused-vars', 'severity': 2, 'message': ""'createCounter' is assigned a value but never used."", 'line': 1, 'column': 5, 'nodeType': 'Identifier', 'messageId': 'unusedVar', 'endLine': 1, 'endColumn': 18}, {'ruleId': 'func-names', 'severity': 2, 'message': 'Unexpected unnamed function.', 'line': 1, 'column': 21, 'nodeType': 'FunctionExpression', 'messageId': 'unnamed', 'endLine': 1, 'endColumn': 29}, {'ruleId': 'func-style', 'severity': 2, 'message': 'Expected a function expression.', 'line': 4, 'column': 3, 'nodeType': 'FunctionDeclaration', 'messageId': 'expression', 'endLine': 6, 'endColumn': 4}, {'ruleId': 'no-plusplus', 'severity': 2, 'message': ""Unary operator '++' used."", 'line': 5, 'column': 12, 'nodeType': 'UpdateExpression', 'messageId': 'unexpectedUnaryOp', 'endLine': 5, 'endColumn': 26}, {'ruleId': 'func-style', 'severity': 2, 'message': 'Expected a function expression.', 'line': 8, 'column': 3, 'nodeType': 'FunctionDeclaration', 'messageId': 'expression', 'endLine': 10, 'endColumn': 4}, {'ruleId': 'no-plusplus', 'severity': 2, 'message': ""Unary operator '--' used."", 'line': 9, 'column': 14, 'nodeType': 'UpdateExpression', 'messageId': 'unexpectedUnaryOp', 'endLine': 9, 'endColumn': 28}, {'ruleId': 'func-style', 'severity': 2, 'message': 'Expected a function expression.', 'line': 12, 'column': 3, 'nodeType': 'FunctionDeclaration', 'messageId': 'expression', 'endLine': 14, 'endColumn': 4}, {'ruleId': 'sort-keys', 'severity': 2, 'message': ""Expected object keys to be in ascending order. 'decrement' should be before 'increment'."", 'line': 16, 'column': 23, 'nodeType': 'Property', 'messageId': 'sortKeys', 'endLine': 16, 'endColumn': 32}]


Google Closure Compiler Output:

[{'level': 'warning', 'description': 'Using `var` (prefer `const` or `let`).', 'key': 'JSC_VAR', 'source': '/tmp/tmp9wj6xlxy', 'line': 1, 'column': 0, 'length': 287, 'context': 'var createCounter = function(init) {\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Function must have JSDoc.', 'key': 'JSC_MISSING_JSDOC', 'source': '/tmp/tmp9wj6xlxy', 'line': 1, 'column': 20, 'length': 266, 'context': 'var createCounter = function(init) {\n                    ^^^^^^^^^^^^^^^^'}, {'level': 'info', 'description': '0 error(s), 2 warning(s), 66.6% typed'}]"
3,Apply Transform Over Each Element in Array,"Given an integer array arr and a mapping function fn, return a new array with a transformation applied to each element.

The returned array should be created such that returnedArray[i] = fn(arr[i], i).

Please solve it without the built-in Array.map method.","Example 1:

Input: arr = [1,2,3], fn = function plusone(n) { return n + 1; }
Output: [2,3,4]
Explanation:
const newArray = map(arr, plusone); // [2,3,4]
The function increases each value in the array by one. 
Example 2:

Input: arr = [1,2,3], fn = function plusI(n, i) { return n + i; }
Output: [1,3,5]
Explanation: The function increases each value by the index it resides in.
Example 3:

Input: arr = [10,20,30], fn = function constant() { return 42; }
Output: [42,42,42]
Explanation: The function always returns 42.","var map = function(arr, fn) {
    const transformedArr = [];
    arr.forEach((element, index) => {
      transformedArr[index] = fn(element, index);
    });
    return transformedArr;
  };","0 <= arr.length <= 1000
-10^9 <= arr[i] <= 10^9
fn returns a number",Easy,https://leetcode.com/problems/apply-transform-over-each-element-in-array/description/?envType=study-plan-v2&envId=30-days-of-javascript,"/**
 * @param {number[]} arr
 * @param {Function} fn
 * @return {number[]}
 */
var map = function(arr, fn) {
    
};","ESLint Output:

[{'ruleId': 'no-var', 'severity': 2, 'message': 'Unexpected var, use let or const instead.', 'line': 1, 'column': 1, 'nodeType': 'VariableDeclaration', 'messageId': 'unexpectedVar', 'endLine': 7, 'endColumn': 5, 'fix': {'range': [0, 3], 'text': 'let'}}, {'ruleId': 'no-unused-vars', 'severity': 2, 'message': ""'map' is assigned a value but never used."", 'line': 1, 'column': 5, 'nodeType': 'Identifier', 'messageId': 'unusedVar', 'endLine': 1, 'endColumn': 8}, {'ruleId': 'func-names', 'severity': 2, 'message': 'Unexpected unnamed function.', 'line': 1, 'column': 11, 'nodeType': 'FunctionExpression', 'messageId': 'unnamed', 'endLine': 1, 'endColumn': 19}]


Google Closure Compiler Output:

[{'level': 'warning', 'description': 'Using `var` (prefer `const` or `let`).', 'key': 'JSC_VAR', 'source': '/tmp/tmp40hmpnel', 'line': 1, 'column': 0, 'length': 194, 'context': 'var map = function(arr, fn) {\r\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Function must have JSDoc.', 'key': 'JSC_MISSING_JSDOC', 'source': '/tmp/tmp40hmpnel', 'line': 1, 'column': 10, 'length': 183, 'context': 'var map = function(arr, fn) {\r\n          ^^^^^^^^^^^^^^^^^^^^'}, {'level': 'info', 'description': '0 error(s), 2 warning(s), 41.6% typed'}]"
4,Filter Elements from Array,"Given an integer array arr and a filtering function fn, return a filtered array filteredArr.

The fn function takes one or two arguments:

arr[i] - number from the arr
i - index of arr[i]
filteredArr should only contain the elements from the arr for which the expression fn(arr[i], i) evaluates to a truthy value. A truthy value is a value where Boolean(value) returns true.

Please solve it without the built-in Array.filter method.","Example 1:

Input: arr = [0,10,20,30], fn = function greaterThan10(n) { return n > 10; }
Output: [20,30]
Explanation:
const newArray = filter(arr, fn); // [20, 30]
The function filters out values that are not greater than 10
Example 2:

Input: arr = [1,2,3], fn = function firstIndex(n, i) { return i === 0; }
Output: [1]
Explanation:
fn can also accept the index of each element
In this case, the function removes elements not at index 0
Example 3:

Input: arr = [-2,-1,0,1,2], fn = function plusOne(n) { return n + 1 }
Output: [-2,0,1,2]
Explanation:
Falsey values such as 0 should be filtered out","var filter = function(arr, fn) {
  const result = [];
  for (let i = 0; i < arr.length; i++) {
    if (fn(arr[i], i)) {
      result.push(arr[i]);
    }
  }
  return result;
};","0 <= arr.length <= 1000
-10^9 <= arr[i] <= 10^9",Easy,https://leetcode.com/problems/filter-elements-from-array/description/?envType=study-plan-v2&envId=30-days-of-javascript,"/**
 * @param {number[]} arr
 * @param {Function} fn
 * @return {number[]}
 */
var filter = function(arr, fn) {
    
};","ESLint Output:

[{'ruleId': 'no-var', 'severity': 2, 'message': 'Unexpected var, use let or const instead.', 'line': 1, 'column': 1, 'nodeType': 'VariableDeclaration', 'messageId': 'unexpectedVar', 'endLine': 9, 'endColumn': 3, 'fix': {'range': [0, 3], 'text': 'let'}}, {'ruleId': 'no-unused-vars', 'severity': 2, 'message': ""'filter' is assigned a value but never used."", 'line': 1, 'column': 5, 'nodeType': 'Identifier', 'messageId': 'unusedVar', 'endLine': 1, 'endColumn': 11}, {'ruleId': 'func-names', 'severity': 2, 'message': 'Unexpected unnamed function.', 'line': 1, 'column': 14, 'nodeType': 'FunctionExpression', 'messageId': 'unnamed', 'endLine': 1, 'endColumn': 22}, {'ruleId': 'id-length', 'severity': 2, 'message': ""Identifier name 'i' is too short (< 2)."", 'line': 3, 'column': 12, 'nodeType': 'Identifier', 'messageId': 'tooShort', 'endLine': 3, 'endColumn': 13}, {'ruleId': 'no-plusplus', 'severity': 2, 'message': ""Unary operator '++' used."", 'line': 3, 'column': 35, 'nodeType': 'UpdateExpression', 'messageId': 'unexpectedUnaryOp', 'endLine': 3, 'endColumn': 38}]


Google Closure Compiler Output:

[{'level': 'warning', 'description': 'Using `var` (prefer `const` or `let`).', 'key': 'JSC_VAR', 'source': '/tmp/tmpfsvajwxw', 'line': 1, 'column': 0, 'length': 176, 'context': 'var filter = function(arr, fn) {\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Function must have JSDoc.', 'key': 'JSC_MISSING_JSDOC', 'source': '/tmp/tmpfsvajwxw', 'line': 1, 'column': 13, 'length': 162, 'context': 'var filter = function(arr, fn) {\n             ^^^^^^^^^^^^^^^^^^^'}, {'level': 'info', 'description': '0 error(s), 2 warning(s), 68.4% typed'}]"
5,Array Reduce Transformation,"Given an integer array nums, a reducer function fn, and an initial value init, return the final result obtained by executing the fn function on each element of the array, sequentially, passing in the return value from the calculation on the preceding element.

This result is achieved through the following operations: val = fn(init, nums[0]), val = fn(val, nums[1]), val = fn(val, nums[2]), ... until every element in the array has been processed. The ultimate value of val is then returned.

If the length of the array is 0, the function should return init.

Please solve it without using the built-in Array.reduce method.

","Example 1:

Input: 
nums = [1,2,3,4]
fn = function sum(accum, curr) { return accum + curr; }
init = 0
Output: 10
Explanation:
initially, the value is init=0.
(0) + nums[0] = 1
(1) + nums[1] = 3
(3) + nums[2] = 6
(6) + nums[3] = 10
The final answer is 10.
Example 2:

Input: 
nums = [1,2,3,4]
fn = function sum(accum, curr) { return accum + curr * curr; }
init = 100
Output: 130
Explanation:
initially, the value is init=100.
(100) + nums[0] * nums[0] = 101
(101) + nums[1] * nums[1] = 105
(105) + nums[2] * nums[2] = 114
(114) + nums[3] * nums[3] = 130
The final answer is 130.
Example 3:

Input: 
nums = []
fn = function sum(accum, curr) { return 0; }
init = 25
Output: 25
Explanation: For empty arrays, the answer is always init.","/**
 * @param {number[]} nums
 * @param {Function} fn
 * @param {number} init
 * @return {number}
 */
var reduce = function(nums, fn, init) {
  let val = init;
  for (let i = 0; i < nums.length; i++) {
    val = fn(val, nums[i]);
  }
  return val;
};","0 <= nums.length <= 1000
0 <= nums[i] <= 1000
0 <= init <= 1000",Easy,https://leetcode.com/problems/array-reduce-transformation/description/?envType=study-plan-v2&envId=30-days-of-javascript,"/**
 * @param {number[]} nums
 * @param {Function} fn
 * @param {number} init
 * @return {number}
 */
var reduce = function(nums, fn, init) {
    
};","ESLint Output:

[{'ruleId': 'no-var', 'severity': 2, 'message': 'Unexpected var, use let or const instead.', 'line': 7, 'column': 1, 'nodeType': 'VariableDeclaration', 'messageId': 'unexpectedVar', 'endLine': 13, 'endColumn': 3, 'fix': {'range': [102, 105], 'text': 'let'}}, {'ruleId': 'no-unused-vars', 'severity': 2, 'message': ""'reduce' is assigned a value but never used."", 'line': 7, 'column': 5, 'nodeType': 'Identifier', 'messageId': 'unusedVar', 'endLine': 7, 'endColumn': 11}, {'ruleId': 'func-names', 'severity': 2, 'message': 'Unexpected unnamed function.', 'line': 7, 'column': 14, 'nodeType': 'FunctionExpression', 'messageId': 'unnamed', 'endLine': 7, 'endColumn': 22}, {'ruleId': 'id-length', 'severity': 2, 'message': ""Identifier name 'i' is too short (< 2)."", 'line': 9, 'column': 12, 'nodeType': 'Identifier', 'messageId': 'tooShort', 'endLine': 9, 'endColumn': 13}, {'ruleId': 'no-plusplus', 'severity': 2, 'message': ""Unary operator '++' used."", 'line': 9, 'column': 36, 'nodeType': 'UpdateExpression', 'messageId': 'unexpectedUnaryOp', 'endLine': 9, 'endColumn': 39}]


Google Closure Compiler Output:

[{'level': 'warning', 'description': 'Bad type annotation. expected closing } See https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler for more information.', 'key': 'JSC_TYPE_PARSE_ERROR', 'source': '/tmp/tmp4_yv0_k0', 'line': 2, 'column': 17, 'context': ' * @param {number[]} nums\n                 ^'}, {'level': 'warning', 'description': 'Bad type annotation. expecting a variable name in a @param tag. See https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler for more information.', 'key': 'JSC_TYPE_PARSE_ERROR', 'source': '/tmp/tmp4_yv0_k0', 'line': 2, 'column': 17, 'context': ' * @param {number[]} nums\n                 ^'}, {'level': 'warning', 'description': 'Function is a reference type with no nullability modifier, which is disallowed by the style guide.\nPlease add a ! to make it explicitly non-nullable, or a ? to make it explicitly nullable.', 'key': 'JSC_MISSING_NULLABILITY_MODIFIER_JSDOC', 'source': '/tmp/tmp4_yv0_k0', 'line': 3, 'column': 11, 'length': 8, 'context': ' * @param {Function} fn\n           ^^^^^^^^'}, {'level': 'warning', 'description': 'Using `var` (prefer `const` or `let`).', 'key': 'JSC_VAR', 'source': '/tmp/tmp4_yv0_k0', 'line': 7, 'column': 0, 'length': 148, 'context': 'var reduce = function(nums, fn, init) {\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Wrong number of @param annotations', 'key': 'JSC_WRONG_NUMBER_OF_PARAMS', 'source': '/tmp/tmp4_yv0_k0', 'line': 7, 'column': 21, 'length': 16, 'context': 'var reduce = function(nums, fn, init) {\n                     ^^^^^^^^^^^^^^^^'}, {'level': 'info', 'description': '0 error(s), 5 warning(s), 56.2% typed'}]"
6,Promise Time Limit,"Given an asynchronous function fn and a time t in milliseconds, return a new time limited version of the input function. fn takes arguments provided to the time limited function.

The time limited function should follow these rules:

If the fn completes within the time limit of t milliseconds, the time limited function should resolve with the result.
If the execution of the fn exceeds the time limit, the time limited function should reject with the string ""Time Limit Exceeded"".","Example 1:

Input: 
fn = async (n) => { 
  await new Promise(res => setTimeout(res, 100)); 
  return n * n; 
}
inputs = [5]
t = 50
Output: {""rejected"":""Time Limit Exceeded"",""time"":50}
Explanation:
const limited = timeLimit(fn, t)
const start = performance.now()
let result;
try {
   const res = await limited(...inputs)
   result = {""resolved"": res, ""time"": Math.floor(performance.now() - start)};
} catch (err) {
   result = {""rejected"": err, ""time"": Math.floor(performance.now() - start)};
}
console.log(result) // Output

The provided function is set to resolve after 100ms. However, the time limit is set to 50ms. It rejects at t=50ms because the time limit was reached.
Example 2:

Input: 
fn = async (n) => { 
  await new Promise(res => setTimeout(res, 100)); 
  return n * n; 
}
inputs = [5]
t = 150
Output: {""resolved"":25,""time"":100}
Explanation:
The function resolved 5 * 5 = 25 at t=100ms. The time limit is never reached.
Example 3:

Input: 
fn = async (a, b) => { 
  await new Promise(res => setTimeout(res, 120)); 
  return a + b; 
}
inputs = [5,10]
t = 150
Output: {""resolved"":15,""time"":120}
Explanation:
​​​​The function resolved 5 + 10 = 15 at t=120ms. The time limit is never reached.
Example 4:

Input: 
fn = async () => { 
  throw ""Error"";
}
inputs = []
t = 1000
Output: {""rejected"":""Error"",""time"":0}
Explanation:
The function immediately throws an error.","/**
 * @param {Function} fn
 * @param {number} t
 * @return {Function}
 */
var timeLimit = function(fn, t) {
  return async function(...args) {
    return new Promise((delayresolve, reject) => {
      const timeoutId = setTimeout(() => {
        clearTimeout(timeoutId);
        reject(""Time Limit Exceeded"");
      }, t);

      fn(...args)
        .then((result) => {
          clearTimeout(timeoutId);
          delayresolve(result);
        })
        .catch((error) => {
          clearTimeout(timeoutId);
          reject(error);
        });
    });
  };
};

/**
 * const limited = timeLimit((t) => new Promise(res => setTimeout(res, t)), 100);
 * limited(150).catch(console.log) // ""Time Limit Exceeded"" at t=100ms
 */","0 <= inputs.length <= 10
0 <= t <= 1000
fn returns a promise",Medium,https://leetcode.com/problems/promise-time-limit/description/?envType=study-plan-v2&envId=30-days-of-javascript,"/**
 * @param {Function} fn
 * @param {number} t
 * @return {Function}
 */
var timeLimit = function(fn, t) {
    
    return async function(...args) {
        
    }
};","ESLint Output:

[{'ruleId': 'no-var', 'severity': 2, 'message': 'Unexpected var, use let or const instead.', 'line': 6, 'column': 1, 'nodeType': 'VariableDeclaration', 'messageId': 'unexpectedVar', 'endLine': 25, 'endColumn': 3, 'fix': {'range': [75, 78], 'text': 'let'}}, {'ruleId': 'no-unused-vars', 'severity': 2, 'message': ""'timeLimit' is assigned a value but never used."", 'line': 6, 'column': 5, 'nodeType': 'Identifier', 'messageId': 'unusedVar', 'endLine': 6, 'endColumn': 14}, {'ruleId': 'func-names', 'severity': 2, 'message': 'Unexpected unnamed function.', 'line': 6, 'column': 17, 'nodeType': 'FunctionExpression', 'messageId': 'unnamed', 'endLine': 6, 'endColumn': 25}, {'ruleId': 'id-length', 'severity': 2, 'message': ""Identifier name 't' is too short (< 2)."", 'line': 6, 'column': 30, 'nodeType': 'Identifier', 'messageId': 'tooShort', 'endLine': 6, 'endColumn': 31}, {'ruleId': 'func-names', 'severity': 2, 'message': 'Unexpected unnamed async function.', 'line': 7, 'column': 10, 'nodeType': 'FunctionExpression', 'messageId': 'unnamed', 'endLine': 7, 'endColumn': 24}, {'ruleId': 'require-await', 'severity': 2, 'message': ""Async function has no 'await' expression."", 'line': 7, 'column': 10, 'nodeType': 'FunctionExpression', 'messageId': 'missingAwait', 'endLine': 7, 'endColumn': 24, 'suggestions': [{'messageId': 'removeAsync', 'fix': {'range': [118, 124], 'text': ''}, 'desc': ""Remove 'async'.""}]}, {'ruleId': 'no-undef', 'severity': 2, 'message': ""'setTimeout' is not defined."", 'line': 9, 'column': 25, 'nodeType': 'Identifier', 'messageId': 'undef', 'endLine': 9, 'endColumn': 35}, {'ruleId': 'no-undef', 'severity': 2, 'message': ""'clearTimeout' is not defined."", 'line': 10, 'column': 9, 'nodeType': 'Identifier', 'messageId': 'undef', 'endLine': 10, 'endColumn': 21}, {'ruleId': 'prefer-promise-reject-errors', 'severity': 2, 'message': 'Expected the Promise rejection reason to be an Error.', 'line': 11, 'column': 9, 'nodeType': 'CallExpression', 'messageId': 'rejectAnError', 'endLine': 11, 'endColumn': 38}, {'ruleId': 'no-undef', 'severity': 2, 'message': ""'clearTimeout' is not defined."", 'line': 16, 'column': 11, 'nodeType': 'Identifier', 'messageId': 'undef', 'endLine': 16, 'endColumn': 23}, {'ruleId': 'no-undef', 'severity': 2, 'message': ""'clearTimeout' is not defined."", 'line': 20, 'column': 11, 'nodeType': 'Identifier', 'messageId': 'undef', 'endLine': 20, 'endColumn': 23}, {'ruleId': 'capitalized-comments', 'severity': 2, 'message': 'Comments should not begin with a lowercase character.', 'line': 27, 'column': 1, 'nodeType': None, 'messageId': 'unexpectedLowercaseComment', 'endLine': 30, 'endColumn': 4, 'fix': {'range': [572, 573], 'text': 'C'}}]


Google Closure Compiler Output:

[{'level': 'warning', 'description': 'Function is a reference type with no nullability modifier, which is disallowed by the style guide.\nPlease add a ! to make it explicitly non-nullable, or a ? to make it explicitly nullable.', 'key': 'JSC_MISSING_NULLABILITY_MODIFIER_JSDOC', 'source': '/tmp/tmp8fv0q_x2', 'line': 2, 'column': 11, 'length': 8, 'context': ' * @param {Function} fn\n           ^^^^^^^^'}, {'level': 'warning', 'description': 'Function is a reference type with no nullability modifier, which is disallowed by the style guide.\nPlease add a ! to make it explicitly non-nullable, or a ? to make it explicitly nullable.', 'key': 'JSC_MISSING_NULLABILITY_MODIFIER_JSDOC', 'source': '/tmp/tmp8fv0q_x2', 'line': 4, 'column': 12, 'length': 8, 'context': ' * @return {Function}\n            ^^^^^^^^'}, {'level': 'warning', 'description': 'Using `var` (prefer `const` or `let`).', 'key': 'JSC_VAR', 'source': '/tmp/tmp8fv0q_x2', 'line': 6, 'column': 0, 'length': 488, 'context': 'var timeLimit = function(fn, t) {\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'info', 'description': '0 error(s), 3 warning(s), 80.0% typed'}]"
7,Cache With Time Limit,"Write a class that allows getting and setting key-value pairs, however a time until expiration is associated with each key.

The class has three public methods:

set(key, value, duration): accepts an integer key, an integer value, and a duration in milliseconds. Once the duration has elapsed, the key should be inaccessible. The method should return true if the same un-expired key already exists and false otherwise. Both the value and duration should be overwritten if the key already exists.

get(key): if an un-expired key exists, it should return the associated value. Otherwise it should return -1.

count(): returns the count of un-expired keys.","Example 1:

Input: 
actions = [""TimeLimitedCache"", ""set"", ""get"", ""count"", ""get""]
values = [[], [1, 42, 100], [1], [], [1]]
timeDelays = [0, 0, 50, 50, 150]
Output: [null, false, 42, 1, -1]
Explanation:
At t=0, the cache is constructed.
At t=0, a key-value pair (1: 42) is added with a time limit of 100ms. The value doesn't exist so false is returned.
At t=50, key=1 is requested and the value of 42 is returned.
At t=50, count() is called and there is one active key in the cache.
At t=100, key=1 expires.
At t=150, get(1) is called but -1 is returned because the cache is empty.
Example 2:

Input: 
actions = [""TimeLimitedCache"", ""set"", ""set"", ""get"", ""get"", ""get"", ""count""]
values = [[], [1, 42, 50], [1, 50, 100], [1], [1], [1], []]
timeDelays = [0, 0, 40, 50, 120, 200, 250]
Output: [null, false, true, 50, 50, -1, 0]
Explanation:
At t=0, the cache is constructed.
At t=0, a key-value pair (1: 42) is added with a time limit of 50ms. The value doesn't exist so false is returned.
At t=40, a key-value pair (1: 50) is added with a time limit of 100ms. A non-expired value already existed so true is returned and the old value was overwritten.
At t=50, get(1) is called which returned 50.
At t=120, get(1) is called which returned 50.
At t=140, key=1 expires.
At t=200, get(1) is called but the cache is empty so -1 is returned.
At t=250, count() returns 0 because the cache is empty.","const TimeLimitedCache = function() {
    this.cache = new Map();  // Using Map so we don't need a size variable
};

TimeLimitedCache.prototype.set = function(key, value, duration) {
    let found = this.cache.has(key);
    if (found) clearTimeout(this.cache.get(key).ref);  // Cancel previous timeout
    this.cache.set(key, {
        value,  // Equivalent to `value: value`
        ref: setTimeout(() => this.cache.delete(key), duration)
    });
    return found;
};

TimeLimitedCache.prototype.get = function(key) {
    return this.cache.has(key) ? this.cache.get(key).value : -1;
};

TimeLimitedCache.prototype.count = function() {
    return this.cache.size;
};","0 <= key, value <= 10^9
0 <= duration <= 1000
1 <= actions.length <= 100
actions.length === values.length
actions.length === timeDelays.length
0 <= timeDelays[i] <= 1450
actions[i] is one of ""TimeLimitedCache"", ""set"", ""get"" and ""count""
First action is always ""TimeLimitedCache"" and must be executed immediately, with a 0-millisecond delay",Medium,https://leetcode.com/problems/cache-with-time-limit/description/?envType=study-plan-v2&envId=30-days-of-javascript,"var TimeLimitedCache = function() {
    
};

/** 
 * @param {number} key
 * @param {number} value
 * @param {number} duration time until expiration in ms
 * @return {boolean} if un-expired key already existed
 */
TimeLimitedCache.prototype.set = function(key, value, duration) {
    
};

/** 
 * @param {number} key
 * @return {number} value associated with key
 */
TimeLimitedCache.prototype.get = function(key) {
    
};

/** 
 * @return {number} count of non-expired keys
 */
TimeLimitedCache.prototype.count = function() {
    
};","ESLint Output:

[{'ruleId': 'func-names', 'severity': 2, 'message': 'Unexpected unnamed function.', 'line': 1, 'column': 26, 'nodeType': 'FunctionExpression', 'messageId': 'unnamed', 'endLine': 1, 'endColumn': 34}, {'ruleId': 'no-inline-comments', 'severity': 2, 'message': 'Unexpected comment inline with code.', 'line': 2, 'column': 30, 'nodeType': 'Line', 'messageId': 'unexpectedInlineComment', 'endLine': 2, 'endColumn': 75}, {'ruleId': 'func-names', 'severity': 2, 'message': 'Unexpected unnamed function.', 'line': 5, 'column': 34, 'nodeType': 'FunctionExpression', 'messageId': 'unnamed', 'endLine': 5, 'endColumn': 42}, {'ruleId': 'prefer-const', 'severity': 2, 'message': ""'found' is never reassigned. Use 'const' instead."", 'line': 6, 'column': 9, 'nodeType': 'Identifier', 'messageId': 'useConst', 'endLine': 6, 'endColumn': 14, 'fix': {'range': [187, 219], 'text': 'const found = this.cache.has(key);'}}, {'ruleId': 'curly', 'severity': 2, 'message': ""Expected { after 'if' condition."", 'line': 7, 'column': 16, 'nodeType': 'IfStatement', 'messageId': 'missingCurlyAfterCondition', 'endLine': 7, 'endColumn': 54, 'fix': {'range': [235, 273], 'text': '{clearTimeout(this.cache.get(key).ref);}'}}, {'ruleId': 'no-undef', 'severity': 2, 'message': ""'clearTimeout' is not defined."", 'line': 7, 'column': 16, 'nodeType': 'Identifier', 'messageId': 'undef', 'endLine': 7, 'endColumn': 28}, {'ruleId': 'no-inline-comments', 'severity': 2, 'message': 'Unexpected comment inline with code.', 'line': 7, 'column': 56, 'nodeType': 'Line', 'messageId': 'unexpectedInlineComment', 'endLine': 7, 'endColumn': 82}, {'ruleId': 'no-inline-comments', 'severity': 2, 'message': 'Unexpected comment inline with code.', 'line': 9, 'column': 17, 'nodeType': 'Line', 'messageId': 'unexpectedInlineComment', 'endLine': 9, 'endColumn': 48}, {'ruleId': 'sort-keys', 'severity': 2, 'message': ""Expected object keys to be in ascending order. 'ref' should be before 'value'."", 'line': 10, 'column': 9, 'nodeType': 'Property', 'messageId': 'sortKeys', 'endLine': 10, 'endColumn': 12}, {'ruleId': 'no-undef', 'severity': 2, 'message': ""'setTimeout' is not defined."", 'line': 10, 'column': 14, 'nodeType': 'Identifier', 'messageId': 'undef', 'endLine': 10, 'endColumn': 24}, {'ruleId': 'func-names', 'severity': 2, 'message': 'Unexpected unnamed function.', 'line': 15, 'column': 34, 'nodeType': 'FunctionExpression', 'messageId': 'unnamed', 'endLine': 15, 'endColumn': 42}, {'ruleId': 'no-ternary', 'severity': 2, 'message': 'Ternary operator used.', 'line': 16, 'column': 12, 'nodeType': 'ConditionalExpression', 'messageId': 'noTernaryOperator', 'endLine': 16, 'endColumn': 64}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: -1.', 'line': 16, 'column': 62, 'nodeType': 'UnaryExpression', 'messageId': 'noMagic', 'endLine': 16, 'endColumn': 64}, {'ruleId': 'func-names', 'severity': 2, 'message': 'Unexpected unnamed function.', 'line': 19, 'column': 36, 'nodeType': 'FunctionExpression', 'messageId': 'unnamed', 'endLine': 19, 'endColumn': 44}]


Google Closure Compiler Output:

[{'level': 'warning', 'description': 'Function must have JSDoc.', 'key': 'JSC_MISSING_JSDOC', 'source': '/tmp/tmppeicec7j', 'line': 1, 'column': 25, 'length': 89, 'context': 'const TimeLimitedCache = function() {\n                         ^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'dangerous use of the global this object', 'key': 'JSC_USED_GLOBAL_THIS', 'source': '/tmp/tmppeicec7j', 'line': 2, 'column': 4, 'length': 4, 'context': ""    this.cache = new Map();  // Using Map so we don't need a size variable\n    ^^^^""}, {'level': 'warning', 'description': 'Function must have JSDoc.', 'key': 'JSC_MISSING_JSDOC', 'source': '/tmp/tmppeicec7j', 'line': 5, 'column': 33, 'length': 317, 'context': 'TimeLimitedCache.prototype.set = function(key, value, duration) {\n                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Function must have JSDoc.', 'key': 'JSC_MISSING_JSDOC', 'source': '/tmp/tmppeicec7j', 'line': 15, 'column': 33, 'length': 82, 'context': 'TimeLimitedCache.prototype.get = function(key) {\n                                 ^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Function must have JSDoc.', 'key': 'JSC_MISSING_JSDOC', 'source': '/tmp/tmppeicec7j', 'line': 19, 'column': 35, 'length': 42, 'context': 'TimeLimitedCache.prototype.count = function() {\n                                   ^^^^^^^^^^^^'}, {'level': 'info', 'description': '0 error(s), 5 warning(s), 32.2% typed'}]"
8,Debounce,"Given a function fn and a time in milliseconds t, return a debounced version of that function.

A debounced function is a function whose execution is delayed by t milliseconds and whose execution is cancelled if it is called again within that window of time. The debounced function should also receive the passed parameters.

For example, let's say t = 50ms, and the function was called at 30ms, 60ms, and 100ms.

The first 2 function calls would be cancelled, and the 3rd function call would be executed at 150ms.

If instead t = 35ms, The 1st call would be cancelled, the 2nd would be executed at 95ms, and the 3rd would be executed at 135ms.

The above diagram shows how debounce will transform events. Each rectangle represents 100ms and the debounce time is 400ms. Each color represents a different set of inputs.

Please solve it without using lodash's _.debounce() function.
","Example 1:

Input: 
t = 50
calls = [
  {""t"": 50, inputs: [1]},
  {""t"": 75, inputs: [2]}
]
Output: [{""t"": 125, inputs: [2]}]
Explanation:
let start = Date.now();
function log(...inputs) { 
  console.log([Date.now() - start, inputs ])
}
const dlog = debounce(log, 50);
setTimeout(() => dlog(1), 50);
setTimeout(() => dlog(2), 75);

The 1st call is cancelled by the 2nd call because the 2nd call occurred before 100ms
The 2nd call is delayed by 50ms and executed at 125ms. The inputs were (2).
Example 2:

Input: 
t = 20
calls = [
  {""t"": 50, inputs: [1]},
  {""t"": 100, inputs: [2]}
]
Output: [{""t"": 70, inputs: [1]}, {""t"": 120, inputs: [2]}]
Explanation:
The 1st call is delayed until 70ms. The inputs were (1).
The 2nd call is delayed until 120ms. The inputs were (2).
Example 3:

Input: 
t = 150
calls = [
  {""t"": 50, inputs: [1, 2]},
  {""t"": 300, inputs: [3, 4]},
  {""t"": 300, inputs: [5, 6]}
]
Output: [{""t"": 200, inputs: [1,2]}, {""t"": 450, inputs: [5, 6]}]
Explanation:
The 1st call is delayed by 150ms and ran at 200ms. The inputs were (1, 2).
The 2nd call is cancelled by the 3rd call
The 3rd call is delayed by 150ms and ran at 450ms. The inputs were (5, 6).","var debounce = function(fn, t) {
    let id;
        return function (...args) {
                clearTimeout(id);
                id = setTimeout(() => fn(...args), t);
        }
};","0 <= t <= 1000
1 <= calls.length <= 10
0 <= calls[i].t <= 1000
0 <= calls[i].inputs.length <= 10",Medium,https://leetcode.com/problems/debounce/description/?envType=study-plan-v2&envId=30-days-of-javascript,"/**
 * @param {Function} fn
 * @param {number} t milliseconds
 * @return {Function}
 */
var debounce = function(fn, t) {
    
    return function(...args) {
        
    }
};","ESLint Output:

[{'ruleId': 'no-var', 'severity': 2, 'message': 'Unexpected var, use let or const instead.', 'line': 1, 'column': 1, 'nodeType': 'VariableDeclaration', 'messageId': 'unexpectedVar', 'endLine': 7, 'endColumn': 3, 'fix': {'range': [0, 3], 'text': 'let'}}, {'ruleId': 'no-unused-vars', 'severity': 2, 'message': ""'debounce' is assigned a value but never used."", 'line': 1, 'column': 5, 'nodeType': 'Identifier', 'messageId': 'unusedVar', 'endLine': 1, 'endColumn': 13}, {'ruleId': 'func-names', 'severity': 2, 'message': 'Unexpected unnamed function.', 'line': 1, 'column': 16, 'nodeType': 'FunctionExpression', 'messageId': 'unnamed', 'endLine': 1, 'endColumn': 24}, {'ruleId': 'id-length', 'severity': 2, 'message': ""Identifier name 't' is too short (< 2)."", 'line': 1, 'column': 29, 'nodeType': 'Identifier', 'messageId': 'tooShort', 'endLine': 1, 'endColumn': 30}, {'ruleId': 'init-declarations', 'severity': 2, 'message': ""Variable 'id' should be initialized on declaration."", 'line': 2, 'column': 9, 'nodeType': 'VariableDeclarator', 'messageId': 'initialized', 'endLine': 2, 'endColumn': 11}, {'ruleId': 'func-names', 'severity': 2, 'message': 'Unexpected unnamed function.', 'line': 3, 'column': 16, 'nodeType': 'FunctionExpression', 'messageId': 'unnamed', 'endLine': 3, 'endColumn': 25}, {'ruleId': 'no-undef', 'severity': 2, 'message': ""'clearTimeout' is not defined."", 'line': 4, 'column': 17, 'nodeType': 'Identifier', 'messageId': 'undef', 'endLine': 4, 'endColumn': 29}, {'ruleId': 'no-undef', 'severity': 2, 'message': ""'setTimeout' is not defined."", 'line': 5, 'column': 22, 'nodeType': 'Identifier', 'messageId': 'undef', 'endLine': 5, 'endColumn': 32}]


Google Closure Compiler Output:

[{'level': 'warning', 'description': 'Using `var` (prefer `const` or `let`).', 'key': 'JSC_VAR', 'source': '/tmp/tmpw5uh2j8o', 'line': 1, 'column': 0, 'length': 182, 'context': 'var debounce = function(fn, t) {\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Function must have JSDoc.', 'key': 'JSC_MISSING_JSDOC', 'source': '/tmp/tmpw5uh2j8o', 'line': 1, 'column': 15, 'length': 166, 'context': 'var debounce = function(fn, t) {\n               ^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Missing semicolon', 'key': 'JSC_MISSING_SEMICOLON', 'source': '/tmp/tmpw5uh2j8o', 'line': 3, 'column': 8, 'length': 126, 'context': '        return function (...args) {\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'info', 'description': '0 error(s), 3 warning(s), 76.9% typed'}]"
9,Execute Asynchronous Functions in Parallel,"Given an array of asynchronous functions functions, return a new promise promise. Each function in the array accepts no arguments and returns a promise. All the promises should be executed in parallel.

promise resolves:

When all the promises returned from functions were resolved successfully in parallel. The resolved value of promise should be an array of all the resolved values of promises in the same order as they were in the functions. The promise should resolve when all the asynchronous functions in the array have completed execution in parallel.
promise rejects:

When any of the promises returned from functions were rejected. promise should also reject with the reason of the first rejection.
Please solve it without using the built-in Promise.all function.","Example 1:

Input: functions = [
  () => new Promise(resolve => setTimeout(() => resolve(5), 200))
]
Output: {""t"": 200, ""resolved"": [5]}
Explanation: 
promiseAll(functions).then(console.log); // [5]

The single function was resolved at 200ms with a value of 5.
Example 2:

Input: functions = [
    () => new Promise(resolve => setTimeout(() => resolve(1), 200)), 
    () => new Promise((resolve, reject) => setTimeout(() => reject(""Error""), 100))
]
Output: {""t"": 100, ""rejected"": ""Error""}
Explanation: Since one of the promises rejected, the returned promise also rejected with the same error at the same time.
Example 3:

Input: functions = [
    () => new Promise(resolve => setTimeout(() => resolve(4), 50)), 
    () => new Promise(resolve => setTimeout(() => resolve(10), 150)), 
    () => new Promise(resolve => setTimeout(() => resolve(16), 100))
]
Output: {""t"": 150, ""resolved"": [4, 10, 16]}
Explanation: All the promises resolved with a value. The returned promise resolved when the last promise resolved.","var promiseAll = async function(functions) {
    return new Promise((resolve, reject) => {
        let results = [];
        functions.forEach(fn => {
            fn()
            .then(val => results.push(val))
            .catch(reason => reject(reason));
        });
        resolve(results);
    })};

var promiseAll = async function(functions) {
    return new Promise((resolve,reject)=>{
        if(functions.length === 0) {
            resolve([]);
            return;
        }
        const arr=new Array(functions.length);
        arr.fill(null);
        let count=0
        functions.forEach(async(fn,i)=>{
            try{
                arr[i]=await fn()
                count++
            
                if(count===functions.length){
                    resolve(arr);
                }
            }
            catch(e){
                reject(e);
            }
        
        });
    });
};","functions is an array of functions that returns promises
1 <= functions.length <= 10",Medium,https://leetcode.com/problems/execute-asynchronous-functions-in-parallel/description/?envType=study-plan-v2&envId=30-days-of-javascript,"/**
 * @param {Array<Function>} functions
 * @return {Promise<any>}
 */
var promiseAll = function(functions) {
    
};","ESLint Output:

[{'ruleId': 'no-var', 'severity': 2, 'message': 'Unexpected var, use let or const instead.', 'line': 1, 'column': 1, 'nodeType': 'VariableDeclaration', 'messageId': 'unexpectedVar', 'endLine': 10, 'endColumn': 9}, {'ruleId': 'func-names', 'severity': 2, 'message': 'Unexpected unnamed async function.', 'line': 1, 'column': 18, 'nodeType': 'FunctionExpression', 'messageId': 'unnamed', 'endLine': 1, 'endColumn': 32}, {'ruleId': 'require-await', 'severity': 2, 'message': ""Async function has no 'await' expression."", 'line': 1, 'column': 18, 'nodeType': 'FunctionExpression', 'messageId': 'missingAwait', 'endLine': 1, 'endColumn': 32, 'suggestions': [{'messageId': 'removeAsync', 'fix': {'range': [17, 23], 'text': ''}, 'desc': ""Remove 'async'.""}]}, {'ruleId': 'prefer-const', 'severity': 2, 'message': ""'results' is never reassigned. Use 'const' instead."", 'line': 3, 'column': 13, 'nodeType': 'Identifier', 'messageId': 'useConst', 'endLine': 3, 'endColumn': 20, 'fix': {'range': [99, 116], 'text': 'const results = [];'}}, {'ruleId': 'one-var', 'severity': 2, 'message': ""Combine this with the previous 'var' statement."", 'line': 12, 'column': 1, 'nodeType': 'VariableDeclaration', 'messageId': 'combine', 'endLine': 36, 'endColumn': 3, 'fix': {'range': [303, 309], 'text': ',\n\n'}}, {'ruleId': 'no-var', 'severity': 2, 'message': 'Unexpected var, use let or const instead.', 'line': 12, 'column': 1, 'nodeType': 'VariableDeclaration', 'messageId': 'unexpectedVar', 'endLine': 36, 'endColumn': 3}, {'ruleId': 'no-redeclare', 'severity': 2, 'message': ""'promiseAll' is already defined."", 'line': 12, 'column': 5, 'nodeType': 'Identifier', 'messageId': 'redeclared', 'endLine': 12, 'endColumn': 15}, {'ruleId': 'no-unused-vars', 'severity': 2, 'message': ""'promiseAll' is assigned a value but never used."", 'line': 12, 'column': 5, 'nodeType': 'Identifier', 'messageId': 'unusedVar', 'endLine': 12, 'endColumn': 15}, {'ruleId': 'func-names', 'severity': 2, 'message': 'Unexpected unnamed async function.', 'line': 12, 'column': 18, 'nodeType': 'FunctionExpression', 'messageId': 'unnamed', 'endLine': 12, 'endColumn': 32}, {'ruleId': 'require-await', 'severity': 2, 'message': ""Async function has no 'await' expression."", 'line': 12, 'column': 18, 'nodeType': 'FunctionExpression', 'messageId': 'missingAwait', 'endLine': 12, 'endColumn': 32, 'suggestions': [{'messageId': 'removeAsync', 'fix': {'range': [323, 329], 'text': ''}, 'desc': ""Remove 'async'.""}]}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 0.', 'line': 14, 'column': 33, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 14, 'endColumn': 34}, {'ruleId': 'id-length', 'severity': 2, 'message': ""Identifier name 'i' is too short (< 2)."", 'line': 21, 'column': 36, 'nodeType': 'Identifier', 'messageId': 'tooShort', 'endLine': 21, 'endColumn': 37}, {'ruleId': 'no-plusplus', 'severity': 2, 'message': ""Unary operator '++' used."", 'line': 24, 'column': 17, 'nodeType': 'UpdateExpression', 'messageId': 'unexpectedUnaryOp', 'endLine': 24, 'endColumn': 24}, {'ruleId': 'id-length', 'severity': 2, 'message': ""Identifier name 'e' is too short (< 2)."", 'line': 30, 'column': 19, 'nodeType': 'Identifier', 'messageId': 'tooShort', 'endLine': 30, 'endColumn': 20}]


Google Closure Compiler Output:

[{'level': 'warning', 'description': 'Using `var` (prefer `const` or `let`).', 'key': 'JSC_VAR', 'source': '/tmp/tmp60oeuwdu', 'line': 1, 'column': 0, 'length': 304, 'context': 'var promiseAll = async function(functions) {\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Function must have JSDoc.', 'key': 'JSC_MISSING_JSDOC', 'source': '/tmp/tmp60oeuwdu', 'line': 1, 'column': 17, 'length': 286, 'context': 'var promiseAll = async function(functions) {\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Missing semicolon', 'key': 'JSC_MISSING_SEMICOLON', 'source': '/tmp/tmp60oeuwdu', 'line': 2, 'column': 4, 'length': 253, 'context': '    return new Promise((resolve, reject) => {\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Using `var` (prefer `const` or `let`).', 'key': 'JSC_VAR', 'source': '/tmp/tmp60oeuwdu', 'line': 12, 'column': 0, 'length': 606, 'context': 'var promiseAll = async function(functions) {\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Variable promiseAll declared more than once. First occurrence: /tmp/tmp60oeuwdu:1:4', 'key': 'JSC_VAR_MULTIPLY_DECLARED_ERROR', 'source': '/tmp/tmp60oeuwdu', 'line': 12, 'column': 4, 'length': 601, 'context': 'var promiseAll = async function(functions) {\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'variable promiseAll redefined, original definition at /tmp/tmp60oeuwdu:1', 'key': 'JSC_DUP_VAR_DECLARATION', 'source': '/tmp/tmp60oeuwdu', 'line': 12, 'column': 4, 'length': 601, 'context': 'var promiseAll = async function(functions) {\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Function must have JSDoc.', 'key': 'JSC_MISSING_JSDOC', 'source': '/tmp/tmp60oeuwdu', 'line': 12, 'column': 17, 'length': 588, 'context': 'var promiseAll = async function(functions) {\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Missing semicolon', 'key': 'JSC_MISSING_SEMICOLON', 'source': '/tmp/tmp60oeuwdu', 'line': 20, 'column': 8, 'length': 11, 'context': '        let count=0\n        ^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Missing semicolon', 'key': 'JSC_MISSING_SEMICOLON', 'source': '/tmp/tmp60oeuwdu', 'line': 23, 'column': 16, 'length': 17, 'context': '                arr[i]=await fn()\n                ^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Missing semicolon', 'key': 'JSC_MISSING_SEMICOLON', 'source': '/tmp/tmp60oeuwdu', 'line': 24, 'column': 16, 'length': 7, 'context': '                count++\n                ^^^^^^^'}, {'level': 'info', 'description': '0 error(s), 10 warning(s), 61.6% typed'}]"
10,Event Emitter,"Design an EventEmitter class. This interface is similar (but with some differences) to the one found in Node.js or the Event Target interface of the DOM. The EventEmitter should allow for subscribing to events and emitting them.

Your EventEmitter class should have the following two methods:

subscribe - This method takes in two arguments: the name of an event as a string and a callback function. This callback function will later be called when the event is emitted.
An event should be able to have multiple listeners for the same event. When emitting an event with multiple callbacks, each should be called in the order in which they were subscribed. An array of results should be returned. You can assume no callbacks passed to subscribe are referentially identical.
The subscribe method should also return an object with an unsubscribe method that enables the user to unsubscribe. When it is called, the callback should be removed from the list of subscriptions and undefined should be returned.
emit - This method takes in two arguments: the name of an event as a string and an optional array of arguments that will be passed to the callback(s). If there are no callbacks subscribed to the given event, return an empty array. Otherwise, return an array of the results of all callback calls in the order they were subscribed.","Example 1:

Input: 
actions = [""EventEmitter"", ""emit"", ""subscribe"", ""subscribe"", ""emit""], 
values = [[], [""firstEvent""], [""firstEvent"", ""function cb1() { return 5; }""],  [""firstEvent"", ""function cb1() { return 6; }""], [""firstEvent""]]
Output: [[],[""emitted"",[]],[""subscribed""],[""subscribed""],[""emitted"",[5,6]]]
Explanation: 
const emitter = new EventEmitter();
emitter.emit(""firstEvent""); // [], no callback are subscribed yet
emitter.subscribe(""firstEvent"", function cb1() { return 5; });
emitter.subscribe(""firstEvent"", function cb2() { return 6; });
emitter.emit(""firstEvent""); // [5, 6], returns the output of cb1 and cb2
Example 2:

Input: 
actions = [""EventEmitter"", ""subscribe"", ""emit"", ""emit""], 
values = [[], [""firstEvent"", ""function cb1(...args) { return args.join(','); }""], [""firstEvent"", [1,2,3]], [""firstEvent"", [3,4,6]]]
Output: [[],[""subscribed""],[""emitted"",[""1,2,3""]],[""emitted"",[""3,4,6""]]]
Explanation: Note that the emit method should be able to accept an OPTIONAL array of arguments.

const emitter = new EventEmitter();
emitter.subscribe(""firstEvent, function cb1(...args) { return args.join(','); });
emitter.emit(""firstEvent"", [1, 2, 3]); // [""1,2,3""]
emitter.emit(""firstEvent"", [3, 4, 6]); // [""3,4,6""]
Example 3:

Input: 
actions = [""EventEmitter"", ""subscribe"", ""emit"", ""unsubscribe"", ""emit""], 
values = [[], [""firstEvent"", ""(...args) => args.join(',')""], [""firstEvent"", [1,2,3]], [0], [""firstEvent"", [4,5,6]]]
Output: [[],[""subscribed""],[""emitted"",[""1,2,3""]],[""unsubscribed"",0],[""emitted"",[]]]
Explanation:
const emitter = new EventEmitter();
const sub = emitter.subscribe(""firstEvent"", (...args) => args.join(','));
emitter.emit(""firstEvent"", [1, 2, 3]); // [""1,2,3""]
sub.unsubscribe(); // undefined
emitter.emit(""firstEvent"", [4, 5, 6]); // [], there are no subscriptions
Example 4:

Input: 
actions = [""EventEmitter"", ""subscribe"", ""subscribe"", ""unsubscribe"", ""emit""], 
values = [[], [""firstEvent"", ""x => x + 1""], [""firstEvent"", ""x => x + 2""], [0], [""firstEvent"", [5]]]
Output: [[],[""subscribed""],[""subscribed""],[""unsubscribed"",0],[""emitted"",[7]]]
Explanation:
const emitter = new EventEmitter();
const sub1 = emitter.subscribe(""firstEvent"", x => x + 1);
const sub2 = emitter.subscribe(""firstEvent"", x => x + 2);
sub1.unsubscribe(); // undefined
emitter.emit(""firstEvent"", [5]); // [7]","class EventEmitter {
  constructor() {
    this.events = new Map();
  }

  subscribe(event, cb) {
    if (!this.events.has(event)) {
      this.events.set(event, []);
    }

    const listeners = this.events.get(event);
    listeners.push(cb);

    return {
      unsubscribe: () => {
        const index = listeners.indexOf(cb);
        if (index !== -1) {
          listeners.splice(index, 1);
        }
      }
    };
  }

  emit(event, args = []) {
    if (!this.events.has(event)) {
      return [];
    }

    const listeners = this.events.get(event);
    const results = [];

    for (const listener of listeners) {
      results.push(listener(...args));
    }

    return results;
  }
}","1 <= actions.length <= 10
values.length === actions.length
All test cases are valid, e.g. you don't need to handle scenarios when unsubscribing from a non-existing subscription.
There are only 4 different actions: EventEmitter, emit, subscribe, and unsubscribe.
The EventEmitter action doesn't take any arguments.
The emit action takes between either 1 or 2 arguments. The first argument is the name of the event we want to emit, and the 2nd argument is passed to the callback functions.
The subscribe action takes 2 arguments, where the first one is the event name and the second is the callback function.
The unsubscribe action takes one argument, which is the 0-indexed order of the subscription made before.",Medium,https://leetcode.com/problems/event-emitter/description/,"class EventEmitter {
    
    /**
     * @param {string} eventName
     * @param {Function} callback
     * @return {Object}
     */
    subscribe(eventName, callback) {
        
        return {
            unsubscribe: () => {
                
            }
        };
    }
    
    /**
     * @param {string} eventName
     * @param {Array} args
     * @return {Array}
     */
    emit(eventName, args = []) {
        
    }
}","ESLint Output:

[{'ruleId': 'no-unused-vars', 'severity': 2, 'message': ""'EventEmitter' is defined but never used."", 'line': 1, 'column': 7, 'nodeType': 'Identifier', 'messageId': 'unusedVar', 'endLine': 1, 'endColumn': 19}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: -1.', 'line': 17, 'column': 23, 'nodeType': 'UnaryExpression', 'messageId': 'noMagic', 'endLine': 17, 'endColumn': 25}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 1.', 'line': 18, 'column': 35, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 18, 'endColumn': 36}, {'ruleId': 'one-var', 'severity': 2, 'message': ""Combine this with the previous 'const' statement."", 'line': 30, 'column': 5, 'nodeType': 'VariableDeclaration', 'messageId': 'combine', 'endLine': 30, 'endColumn': 24, 'fix': {'range': [556, 567], 'text': ',\n    '}}]


Google Closure Compiler Output:

[{'level': 'warning', 'description': 'Function must have JSDoc.', 'key': 'JSC_MISSING_JSDOC', 'source': '/tmp/tmp7erj5tid', 'line': 6, 'column': 2, 'length': 349, 'context': '  subscribe(event, cb) {\n  ^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Function must have JSDoc.', 'key': 'JSC_MISSING_JSDOC', 'source': '/tmp/tmp7erj5tid', 'line': 24, 'column': 2, 'length': 264, 'context': '  emit(event, args = []) {\n  ^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'info', 'description': '0 error(s), 2 warning(s), 63.4% typed'}]"
11,Calculator with Method Chaining,"Design a Calculator class. The class should provide the mathematical operations of addition, subtraction, multiplication, division, and exponentiation. It should also allow consecutive operations to be performed using method chaining. The Calculator class constructor should accept a number which serves as the initial value of result.

Your Calculator class should have the following methods:

add - This method adds the given number value to the result and returns the updated Calculator.
subtract - This method subtracts the given number value from the result and returns the updated Calculator.
multiply - This method multiplies the result  by the given number value and returns the updated Calculator.
divide - This method divides the result by the given number value and returns the updated Calculator. If the passed value is 0, an error ""Division by zero is not allowed"" should be thrown.
power - This method raises the result to the power of the given number value and returns the updated Calculator.
getResult - This method returns the result.
Solutions within 10^-5 of the actual result are considered correct.","Example 1:

Input: 
actions = [""Calculator"", ""add"", ""subtract"", ""getResult""], 
values = [10, 5, 7]
Output: 8
Explanation: 
new Calculator(10).add(5).subtract(7).getResult() // 10 + 5 - 7 = 8
Example 2:

Input: 
actions = [""Calculator"", ""multiply"", ""power"", ""getResult""], 
values = [2, 5, 2]
Output: 100
Explanation: 
new Calculator(2).multiply(5).power(2).getResult() // (2 * 5) ^ 2 = 100
Example 3:

Input: 
actions = [""Calculator"", ""divide"", ""getResult""], 
values = [20, 0]
Output: ""Division by zero is not allowed""
Explanation: 
new Calculator(20).divide(0).getResult() // 20 / 0 

The error should be thrown because we cannot divide by zero.","class Calculator {
  constructor(value) {
    this.result = value;
  }
  add(value) {
    this.result += value;
    return this;
  }

  subtract(value) {
    this.result -= value;
    return this;
  }

  multiply(value) {
    this.result *= value;
    return this;
  }

  divide(value) {
    if (value === 0) {
      throw new Error('Division by zero is not allowed');
    }
    this.result /= value;
    return this;
  }

  power(value) {
    this.result = Math.pow(this.result, value);
    return this;
  }

  getResult() {
    return this.result;
  }
}","actions is a valid JSON array of strings
values is a valid JSON array of numbers
2 <= actions.length <= 2 * 10^4
1 <= values.length <= 2 * 10^4 - 1
actions[i] is one of ""Calculator"", ""add"", ""subtract"", ""multiply"", ""divide"", ""power"", and ""getResult""
First action is always ""Calculator""
Last action is always ""getResult""",Medium,https://leetcode.com/problems/calculator-with-method-chaining/description/?envType=study-plan-v2&envId=30-days-of-javascript,"class Calculator {
    
    /** 
     * @param {number} value
     */
    constructor(value) {
        
    }
    
    /** 
     * @param {number} value
     * @return {Calculator}
     */
    add(value){
        
    }
    
    /** 
     * @param {number} value
     * @return {Calculator}
     */
    subtract(value){
        
    }
    
    /** 
     * @param {number} value
     * @return {Calculator}
     */  
    multiply(value) {
        
    }
    
    /** 
     * @param {number} value
     * @return {Calculator}
     */
    divide(value) {
        
    }
    
    /** 
     * @param {number} value
     * @return {Calculator}
     */
    power(value) {
        
    }
    
    /** 
     * @return {number}
     */
    getResult() {
        
    }
}","ESLint Output:

[{'ruleId': 'no-unused-vars', 'severity': 2, 'message': ""'Calculator' is defined but never used."", 'line': 1, 'column': 7, 'nodeType': 'Identifier', 'messageId': 'unusedVar', 'endLine': 1, 'endColumn': 17}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 0.', 'line': 21, 'column': 19, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 21, 'endColumn': 20}, {'ruleId': 'prefer-exponentiation-operator', 'severity': 2, 'message': ""Use the '**' operator instead of 'Math.pow'."", 'line': 29, 'column': 19, 'nodeType': 'CallExpression', 'messageId': 'useExponentiation', 'endLine': 29, 'endColumn': 47, 'fix': {'range': [458, 486], 'text': 'this.result**value'}}]


Google Closure Compiler Output:

[{'level': 'warning', 'description': 'Function must have JSDoc.', 'key': 'JSC_MISSING_JSDOC', 'source': '/tmp/tmpx0w77fgr', 'line': 2, 'column': 2, 'length': 49, 'context': '  constructor(value) {\n  ^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Function must have JSDoc.', 'key': 'JSC_MISSING_JSDOC', 'source': '/tmp/tmpx0w77fgr', 'line': 5, 'column': 2, 'length': 59, 'context': '  add(value) {\n  ^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Function must have JSDoc.', 'key': 'JSC_MISSING_JSDOC', 'source': '/tmp/tmpx0w77fgr', 'line': 10, 'column': 2, 'length': 64, 'context': '  subtract(value) {\n  ^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Function must have JSDoc.', 'key': 'JSC_MISSING_JSDOC', 'source': '/tmp/tmpx0w77fgr', 'line': 15, 'column': 2, 'length': 64, 'context': '  multiply(value) {\n  ^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Function must have JSDoc.', 'key': 'JSC_MISSING_JSDOC', 'source': '/tmp/tmpx0w77fgr', 'line': 20, 'column': 2, 'length': 149, 'context': '  divide(value) {\n  ^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Function must have JSDoc.', 'key': 'JSC_MISSING_JSDOC', 'source': '/tmp/tmpx0w77fgr', 'line': 28, 'column': 2, 'length': 83, 'context': '  power(value) {\n  ^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Function must have JSDoc.', 'key': 'JSC_MISSING_JSDOC', 'source': '/tmp/tmpx0w77fgr', 'line': 33, 'column': 2, 'length': 41, 'context': '  getResult() {\n  ^^^^^^^^^^^^^'}, {'level': 'info', 'description': '0 error(s), 7 warning(s), 70.2% typed'}]"
12,Merge k Sorted Lists,"You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.

Merge all the linked-lists into one sorted linked-list and return it.","Example 1:

Input: lists = [[1,4,5],[1,3,4],[2,6]]
Output: [1,1,2,3,4,4,5,6]
Explanation: The linked-lists are:
[
  1->4->5,
  1->3->4,
  2->6
]
merging them into one sorted list:
1->1->2->3->4->4->5->6
Example 2:

Input: lists = []
Output: []
Example 3:

Input: lists = [[]]
Output: []","/**
 * @param {ListNode[]} lists
 * @return {ListNode}
 */

class ListNode {
  constructor(val, next) {
    this.val = (val === undefined ? 0 : val);
    this.next = (next === undefined ? null : next);
  }
}

function arrayToList(array) {
    if (array.length === 0) return null;

    let head = new ListNode(array[0]);
    let current = head;

    for (let i = 1; i < array.length; i++) {
        current.next = new ListNode(array[i]);
        current = current.next;
    }

    return head;
}

var mergeKLists = function (lists) {
    let nums = []

    for (let i = 0; i < lists.length; i++) {
        let current = lists[i]
        while (current !== null) {
            nums.push(current.val)
            current = current.next
        }
    }

    return arrayToList(nums.sort((a, b) => a - b))
};","k == lists.length
0 <= k <= 10^4
0 <= lists[i].length <= 500
-10^4 <= lists[i][j] <= 10^4
lists[i] is sorted in ascending order.
The sum of lists[i].length will not exceed 10^4.",Medium,https://leetcode.com/problems/merge-k-sorted-lists/description/,"/**
 * Definition for singly-linked list.
 * function ListNode(val, next) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.next = (next===undefined ? null : next)
 * }
 */
/**
 * @param {ListNode[]} lists
 * @return {ListNode}
 */
var mergeKLists = function(lists) {
    
};","ESLint Output:

[{'ruleId': 'no-ternary', 'severity': 2, 'message': 'Ternary operator used.', 'line': 8, 'column': 17, 'nodeType': 'ConditionalExpression', 'messageId': 'noTernaryOperator', 'endLine': 8, 'endColumn': 44}, {'ruleId': 'no-undefined', 'severity': 2, 'message': 'Unexpected use of undefined.', 'line': 8, 'column': 25, 'nodeType': 'Identifier', 'messageId': 'unexpectedUndefined', 'endLine': 8, 'endColumn': 34}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 0.', 'line': 8, 'column': 37, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 8, 'endColumn': 38}, {'ruleId': 'no-ternary', 'severity': 2, 'message': 'Ternary operator used.', 'line': 9, 'column': 18, 'nodeType': 'ConditionalExpression', 'messageId': 'noTernaryOperator', 'endLine': 9, 'endColumn': 50}, {'ruleId': 'no-undefined', 'severity': 2, 'message': 'Unexpected use of undefined.', 'line': 9, 'column': 27, 'nodeType': 'Identifier', 'messageId': 'unexpectedUndefined', 'endLine': 9, 'endColumn': 36}, {'ruleId': 'func-style', 'severity': 2, 'message': 'Expected a function expression.', 'line': 13, 'column': 1, 'nodeType': 'FunctionDeclaration', 'messageId': 'expression', 'endLine': 25, 'endColumn': 2}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 0.', 'line': 14, 'column': 26, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 14, 'endColumn': 27}, {'ruleId': 'curly', 'severity': 2, 'message': ""Expected { after 'if' condition."", 'line': 14, 'column': 29, 'nodeType': 'IfStatement', 'messageId': 'missingCurlyAfterCondition', 'endLine': 14, 'endColumn': 41, 'fix': {'range': [267, 279], 'text': '{return null;}'}}, {'ruleId': 'prefer-const', 'severity': 2, 'message': ""'head' is never reassigned. Use 'const' instead."", 'line': 16, 'column': 9, 'nodeType': 'Identifier', 'messageId': 'useConst', 'endLine': 16, 'endColumn': 13, 'fix': {'range': [285, 319], 'text': 'const head = new ListNode(array[0]);'}}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 0.', 'line': 16, 'column': 35, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 16, 'endColumn': 36}, {'ruleId': 'one-var', 'severity': 2, 'message': ""Combine this with the previous 'let' statement."", 'line': 17, 'column': 5, 'nodeType': 'VariableDeclaration', 'messageId': 'combine', 'endLine': 17, 'endColumn': 24, 'fix': {'range': [318, 327], 'text': ',\n    '}}, {'ruleId': 'id-length', 'severity': 2, 'message': ""Identifier name 'i' is too short (< 2)."", 'line': 19, 'column': 14, 'nodeType': 'Identifier', 'messageId': 'tooShort', 'endLine': 19, 'endColumn': 15}, {'ruleId': 'no-plusplus', 'severity': 2, 'message': ""Unary operator '++' used."", 'line': 19, 'column': 39, 'nodeType': 'UpdateExpression', 'messageId': 'unexpectedUnaryOp', 'endLine': 19, 'endColumn': 42}, {'ruleId': 'vars-on-top', 'severity': 2, 'message': ""All 'var' declarations must be at the top of the function scope."", 'line': 27, 'column': 1, 'nodeType': 'VariableDeclaration', 'messageId': 'top', 'endLine': 39, 'endColumn': 3}, {'ruleId': 'no-var', 'severity': 2, 'message': 'Unexpected var, use let or const instead.', 'line': 27, 'column': 1, 'nodeType': 'VariableDeclaration', 'messageId': 'unexpectedVar', 'endLine': 39, 'endColumn': 3, 'fix': {'range': [496, 499], 'text': 'let'}}, {'ruleId': 'no-unused-vars', 'severity': 2, 'message': ""'mergeKLists' is assigned a value but never used."", 'line': 27, 'column': 5, 'nodeType': 'Identifier', 'messageId': 'unusedVar', 'endLine': 27, 'endColumn': 16}, {'ruleId': 'func-names', 'severity': 2, 'message': 'Unexpected unnamed function.', 'line': 27, 'column': 19, 'nodeType': 'FunctionExpression', 'messageId': 'unnamed', 'endLine': 27, 'endColumn': 28}, {'ruleId': 'prefer-const', 'severity': 2, 'message': ""'nums' is never reassigned. Use 'const' instead."", 'line': 28, 'column': 9, 'nodeType': 'Identifier', 'messageId': 'useConst', 'endLine': 28, 'endColumn': 13, 'fix': {'range': [537, 550], 'text': 'const nums = []'}}, {'ruleId': 'id-length', 'severity': 2, 'message': ""Identifier name 'i' is too short (< 2)."", 'line': 30, 'column': 14, 'nodeType': 'Identifier', 'messageId': 'tooShort', 'endLine': 30, 'endColumn': 15}, {'ruleId': 'no-plusplus', 'severity': 2, 'message': ""Unary operator '++' used."", 'line': 30, 'column': 39, 'nodeType': 'UpdateExpression', 'messageId': 'unexpectedUnaryOp', 'endLine': 30, 'endColumn': 42}, {'ruleId': 'id-length', 'severity': 2, 'message': ""Identifier name 'a' is too short (< 2)."", 'line': 38, 'column': 35, 'nodeType': 'Identifier', 'messageId': 'tooShort', 'endLine': 38, 'endColumn': 36}, {'ruleId': 'id-length', 'severity': 2, 'message': ""Identifier name 'b' is too short (< 2)."", 'line': 38, 'column': 38, 'nodeType': 'Identifier', 'messageId': 'tooShort', 'endLine': 38, 'endColumn': 39}]


Google Closure Compiler Output:

[{'level': 'warning', 'description': 'Bad type annotation. expected closing } See https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler for more information.', 'key': 'JSC_TYPE_PARSE_ERROR', 'source': '/tmp/tmpbpf9404i', 'line': 2, 'column': 19, 'context': ' * @param {ListNode[]} lists\n                   ^'}, {'level': 'warning', 'description': 'Bad type annotation. expecting a variable name in a @param tag. See https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler for more information.', 'key': 'JSC_TYPE_PARSE_ERROR', 'source': '/tmp/tmpbpf9404i', 'line': 2, 'column': 19, 'context': ' * @param {ListNode[]} lists\n                   ^'}, {'level': 'warning', 'description': 'ListNode is a reference type with no nullability modifier, which is disallowed by the style guide.\nPlease add a ! to make it explicitly non-nullable, or a ? to make it explicitly nullable.', 'key': 'JSC_MISSING_NULLABILITY_MODIFIER_JSDOC', 'source': '/tmp/tmpbpf9404i', 'line': 3, 'column': 12, 'length': 8, 'context': ' * @return {ListNode}\n            ^^^^^^^^'}, {'level': 'warning', 'description': 'Misplaced function annotation. This JSDoc is not attached to a function node. Are you missing parentheses?', 'key': 'JSC_MISPLACED_ANNOTATION', 'source': '/tmp/tmpbpf9404i', 'line': 6, 'column': 0, 'length': 147, 'context': 'class ListNode {\n^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Function must have JSDoc.', 'key': 'JSC_MISSING_JSDOC', 'source': '/tmp/tmpbpf9404i', 'line': 7, 'column': 2, 'length': 126, 'context': '  constructor(val, next) {\n  ^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Function must have JSDoc.', 'key': 'JSC_MISSING_JSDOC', 'source': '/tmp/tmpbpf9404i', 'line': 13, 'column': 0, 'length': 285, 'context': 'function arrayToList(array) {\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Function ListNode: called with 1 argument(s). Function requires at least 2 argument(s) and no more than 2 argument(s).', 'key': 'JSC_WRONG_ARGUMENT_COUNT', 'source': '/tmp/tmpbpf9404i', 'line': 16, 'column': 15, 'length': 22, 'context': '    let head = new ListNode(array[0]);\n               ^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Function ListNode: called with 1 argument(s). Function requires at least 2 argument(s) and no more than 2 argument(s).', 'key': 'JSC_WRONG_ARGUMENT_COUNT', 'source': '/tmp/tmpbpf9404i', 'line': 20, 'column': 23, 'length': 22, 'context': '        current.next = new ListNode(array[i]);\n                       ^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Using `var` (prefer `const` or `let`).', 'key': 'JSC_VAR', 'source': '/tmp/tmpbpf9404i', 'line': 27, 'column': 0, 'length': 307, 'context': 'var mergeKLists = function (lists) {\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Function must have JSDoc.', 'key': 'JSC_MISSING_JSDOC', 'source': '/tmp/tmpbpf9404i', 'line': 27, 'column': 18, 'length': 288, 'context': 'var mergeKLists = function (lists) {\n                  ^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Missing semicolon', 'key': 'JSC_MISSING_SEMICOLON', 'source': '/tmp/tmpbpf9404i', 'line': 28, 'column': 4, 'length': 13, 'context': '    let nums = []\n    ^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Missing semicolon', 'key': 'JSC_MISSING_SEMICOLON', 'source': '/tmp/tmpbpf9404i', 'line': 31, 'column': 8, 'length': 22, 'context': '        let current = lists[i]\n        ^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Missing semicolon', 'key': 'JSC_MISSING_SEMICOLON', 'source': '/tmp/tmpbpf9404i', 'line': 33, 'column': 12, 'length': 22, 'context': '            nums.push(current.val)\n            ^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Missing semicolon', 'key': 'JSC_MISSING_SEMICOLON', 'source': '/tmp/tmpbpf9404i', 'line': 34, 'column': 12, 'length': 22, 'context': '            current = current.next\n            ^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Missing semicolon', 'key': 'JSC_MISSING_SEMICOLON', 'source': '/tmp/tmpbpf9404i', 'line': 38, 'column': 4, 'length': 46, 'context': '    return arrayToList(nums.sort((a, b) => a - b))\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'info', 'description': '0 error(s), 15 warning(s), 67.5% typed'}]"
13,Merge Strings Alternately,"You are given two strings word1 and word2. Merge the strings by adding letters in alternating order, starting with word1. If a string is longer than the other, append the additional letters onto the end of the merged string.

Return the merged string.","Example 1:

Input: word1 = ""abc"", word2 = ""pqr""
Output: ""apbqcr""
Explanation: The merged string will be merged as so:
word1:  a   b   c
word2:    p   q   r
merged: a p b q c r
Example 2:

Input: word1 = ""ab"", word2 = ""pqrs""
Output: ""apbqrs""
Explanation: Notice that as word2 is longer, ""rs"" is appended to the end.
word1:  a   b 
word2:    p   q   r   s
merged: a p b q   r   s
Example 3:

Input: word1 = ""abcd"", word2 = ""pq""
Output: ""apbqcd""
Explanation: Notice that as word1 is longer, ""cd"" is appended to the end.
word1:  a   b   c   d
word2:    p   q 
merged: a p b q c   d","/**
 * @param {string} word1
 * @param {string} word2
 * @return {string}
 */
var mergeAlternately = function(word1, word2) {
 let result = '';
  for (let i = 0; i < Math.max(word1.length, word2.length); i++) {
    if (i < word1.length) result += word1[i];
    if (i < word2.length) result += word2[i];
  }
  return result;
};","1 <= word1.length, word2.length <= 100
word1 and word2 consist of lowercase English letters.",Easy,https://leetcode.com/problems/merge-strings-alternately/description/,"/**
 * @param {string} word1
 * @param {string} word2
 * @return {string}
 */
var mergeAlternately = function(word1, word2) {
    
};","ESLint Output:

[{'ruleId': 'no-var', 'severity': 2, 'message': 'Unexpected var, use let or const instead.', 'line': 6, 'column': 1, 'nodeType': 'VariableDeclaration', 'messageId': 'unexpectedVar', 'endLine': 13, 'endColumn': 3, 'fix': {'range': [78, 81], 'text': 'let'}}, {'ruleId': 'no-unused-vars', 'severity': 2, 'message': ""'mergeAlternately' is assigned a value but never used."", 'line': 6, 'column': 5, 'nodeType': 'Identifier', 'messageId': 'unusedVar', 'endLine': 6, 'endColumn': 21}, {'ruleId': 'func-names', 'severity': 2, 'message': 'Unexpected unnamed function.', 'line': 6, 'column': 24, 'nodeType': 'FunctionExpression', 'messageId': 'unnamed', 'endLine': 6, 'endColumn': 32}, {'ruleId': 'id-length', 'severity': 2, 'message': ""Identifier name 'i' is too short (< 2)."", 'line': 8, 'column': 12, 'nodeType': 'Identifier', 'messageId': 'tooShort', 'endLine': 8, 'endColumn': 13}, {'ruleId': 'no-plusplus', 'severity': 2, 'message': ""Unary operator '++' used."", 'line': 8, 'column': 61, 'nodeType': 'UpdateExpression', 'messageId': 'unexpectedUnaryOp', 'endLine': 8, 'endColumn': 64}, {'ruleId': 'curly', 'severity': 2, 'message': ""Expected { after 'if' condition."", 'line': 9, 'column': 27, 'nodeType': 'IfStatement', 'messageId': 'missingCurlyAfterCondition', 'endLine': 9, 'endColumn': 46, 'fix': {'range': [237, 256], 'text': '{result += word1[i];}'}}, {'ruleId': 'curly', 'severity': 2, 'message': ""Expected { after 'if' condition."", 'line': 10, 'column': 27, 'nodeType': 'IfStatement', 'messageId': 'missingCurlyAfterCondition', 'endLine': 10, 'endColumn': 46, 'fix': {'range': [283, 302], 'text': '{result += word2[i];}'}}]


Google Closure Compiler Output:

[{'level': 'warning', 'description': 'Using `var` (prefer `const` or `let`).', 'key': 'JSC_VAR', 'source': '/tmp/tmpekb2vn3f', 'line': 6, 'column': 0, 'length': 248, 'context': 'var mergeAlternately = function(word1, word2) {\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'info', 'description': '0 error(s), 1 warning(s), 100.0% typed'}]"
14,Greatest Common Divisor of Strings,"For two strings s and t, we say ""t divides s"" if and only if s = t + t + t + ... + t + t (i.e., t is concatenated with itself one or more times).

Given two strings str1 and str2, return the largest string x such that x divides both str1 and str2.","Example 1:

Input: str1 = ""ABCABC"", str2 = ""ABC""
Output: ""ABC""
Example 2:

Input: str1 = ""ABABAB"", str2 = ""ABAB""
Output: ""AB""
Example 3:

Input: str1 = ""LEET"", str2 = ""CODE""
Output: """"","var gcdOfStrings = function (str1, str2) {
    // handle the base case
    if (str1 + str2 !== str2 + str1) return '';
    let a = str1.length
    let b = str2.length

    // loop (divide) until you find the 
    // highest common factor (length of string) 
    // like we did in maths
    while (b) {
        let temp = b
        b = a % b
        a = temp
    }
    return str1.substring(0, a)
};","1 <= str1.length, str2.length <= 1000
str1 and str2 consist of English uppercase letters.",Easy,https://leetcode.com/problems/greatest-common-divisor-of-strings/description/?envType=study-plan-v2&envId=leetcode-75,"/**
 * @param {string} str1
 * @param {string} str2
 * @return {string}
 */
var gcdOfStrings = function(str1, str2) {
    
};","ESLint Output:

[{'ruleId': 'no-var', 'severity': 2, 'message': 'Unexpected var, use let or const instead.', 'line': 1, 'column': 1, 'nodeType': 'VariableDeclaration', 'messageId': 'unexpectedVar', 'endLine': 16, 'endColumn': 3, 'fix': {'range': [0, 3], 'text': 'let'}}, {'ruleId': 'no-unused-vars', 'severity': 2, 'message': ""'gcdOfStrings' is assigned a value but never used."", 'line': 1, 'column': 5, 'nodeType': 'Identifier', 'messageId': 'unusedVar', 'endLine': 1, 'endColumn': 17}, {'ruleId': 'func-names', 'severity': 2, 'message': 'Unexpected unnamed function.', 'line': 1, 'column': 20, 'nodeType': 'FunctionExpression', 'messageId': 'unnamed', 'endLine': 1, 'endColumn': 29}, {'ruleId': 'capitalized-comments', 'severity': 2, 'message': 'Comments should not begin with a lowercase character.', 'line': 2, 'column': 5, 'nodeType': None, 'messageId': 'unexpectedLowercaseComment', 'endLine': 2, 'endColumn': 28, 'fix': {'range': [50, 51], 'text': 'H'}}, {'ruleId': 'curly', 'severity': 2, 'message': ""Expected { after 'if' condition."", 'line': 3, 'column': 38, 'nodeType': 'IfStatement', 'messageId': 'missingCurlyAfterCondition', 'endLine': 3, 'endColumn': 48, 'fix': {'range': [108, 118], 'text': ""{return '';}""}}, {'ruleId': 'id-length', 'severity': 2, 'message': ""Identifier name 'a' is too short (< 2)."", 'line': 4, 'column': 9, 'nodeType': 'Identifier', 'messageId': 'tooShort', 'endLine': 4, 'endColumn': 10}, {'ruleId': 'one-var', 'severity': 2, 'message': ""Combine this with the previous 'let' statement."", 'line': 5, 'column': 5, 'nodeType': 'VariableDeclaration', 'messageId': 'combine', 'endLine': 5, 'endColumn': 24, 'fix': {'range': [142, 150], 'text': ',\n    '}}, {'ruleId': 'id-length', 'severity': 2, 'message': ""Identifier name 'b' is too short (< 2)."", 'line': 5, 'column': 9, 'nodeType': 'Identifier', 'messageId': 'tooShort', 'endLine': 5, 'endColumn': 10}, {'ruleId': 'capitalized-comments', 'severity': 2, 'message': 'Comments should not begin with a lowercase character.', 'line': 7, 'column': 5, 'nodeType': None, 'messageId': 'unexpectedLowercaseComment', 'endLine': 7, 'endColumn': 41, 'fix': {'range': [175, 176], 'text': 'L'}}, {'ruleId': 'capitalized-comments', 'severity': 2, 'message': 'Comments should not begin with a lowercase character.', 'line': 8, 'column': 5, 'nodeType': None, 'messageId': 'unexpectedLowercaseComment', 'endLine': 8, 'endColumn': 49, 'fix': {'range': [216, 217], 'text': 'H'}}, {'ruleId': 'capitalized-comments', 'severity': 2, 'message': 'Comments should not begin with a lowercase character.', 'line': 9, 'column': 5, 'nodeType': None, 'messageId': 'unexpectedLowercaseComment', 'endLine': 9, 'endColumn': 28, 'fix': {'range': [265, 266], 'text': 'L'}}, {'ruleId': 'prefer-const', 'severity': 2, 'message': ""'temp' is never reassigned. Use 'const' instead."", 'line': 11, 'column': 13, 'nodeType': 'Identifier', 'messageId': 'useConst', 'endLine': 11, 'endColumn': 17, 'fix': {'range': [310, 322], 'text': 'const temp = b'}}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 0.', 'line': 15, 'column': 27, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 15, 'endColumn': 28}]


Google Closure Compiler Output:

[{'level': 'warning', 'description': 'Using `var` (prefer `const` or `let`).', 'key': 'JSC_VAR', 'source': '/tmp/tmpiw0wvg1y', 'line': 1, 'column': 0, 'length': 398, 'context': 'var gcdOfStrings = function (str1, str2) {\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Function must have JSDoc.', 'key': 'JSC_MISSING_JSDOC', 'source': '/tmp/tmpiw0wvg1y', 'line': 1, 'column': 19, 'length': 378, 'context': 'var gcdOfStrings = function (str1, str2) {\n                   ^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Missing semicolon', 'key': 'JSC_MISSING_SEMICOLON', 'source': '/tmp/tmpiw0wvg1y', 'line': 4, 'column': 4, 'length': 19, 'context': '    let a = str1.length\n    ^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Missing semicolon', 'key': 'JSC_MISSING_SEMICOLON', 'source': '/tmp/tmpiw0wvg1y', 'line': 5, 'column': 4, 'length': 19, 'context': '    let b = str2.length\n    ^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Missing semicolon', 'key': 'JSC_MISSING_SEMICOLON', 'source': '/tmp/tmpiw0wvg1y', 'line': 11, 'column': 8, 'length': 12, 'context': '        let temp = b\n        ^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Missing semicolon', 'key': 'JSC_MISSING_SEMICOLON', 'source': '/tmp/tmpiw0wvg1y', 'line': 12, 'column': 8, 'length': 9, 'context': '        b = a % b\n        ^^^^^^^^^'}, {'level': 'warning', 'description': 'Missing semicolon', 'key': 'JSC_MISSING_SEMICOLON', 'source': '/tmp/tmpiw0wvg1y', 'line': 13, 'column': 8, 'length': 8, 'context': '        a = temp\n        ^^^^^^^^'}, {'level': 'warning', 'description': 'Missing semicolon', 'key': 'JSC_MISSING_SEMICOLON', 'source': '/tmp/tmpiw0wvg1y', 'line': 15, 'column': 4, 'length': 27, 'context': '    return str1.substring(0, a)\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'info', 'description': '0 error(s), 8 warning(s), 23.0% typed'}]"
15,Reverse Words in a String,"Given an input string s, reverse the order of the words.

A word is defined as a sequence of non-space characters. The words in s will be separated by at least one space.

Return a string of the words in reverse order concatenated by a single space.

Note that s may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.","Example 1:

Input: s = ""the sky is blue""
Output: ""blue is sky the""
Example 2:

Input: s = ""  hello world  ""
Output: ""world hello""
Explanation: Your reversed string should not contain leading or trailing spaces.
Example 3:

Input: s = ""a good   example""
Output: ""example good a""
Explanation: You need to reduce multiple spaces between two words to a single space in the reversed string.","var reverseWords = function(s) {
    let words = s.split(' ');
    let res = [];

    for (let i = words.length - 1; i >= 0; i--) {
        if (words[i]) {
            res.push(words[i]);
        }
    }

    return res.join(' ');
};","1 <= s.length <= 10^4
s contains English letters (upper-case and lower-case), digits, and spaces ' '.
There is at least one word in s.",Medium,https://leetcode.com/problems/reverse-words-in-a-string/description/?envType=study-plan-v2&envId=leetcode-75,"/**
 * @param {string} s
 * @return {string}
 */
var reverseWords = function(s) {
    
};","ESLint Output:

[{'ruleId': 'no-var', 'severity': 2, 'message': 'Unexpected var, use let or const instead.', 'line': 1, 'column': 1, 'nodeType': 'VariableDeclaration', 'messageId': 'unexpectedVar', 'endLine': 12, 'endColumn': 3, 'fix': {'range': [0, 3], 'text': 'let'}}, {'ruleId': 'no-unused-vars', 'severity': 2, 'message': ""'reverseWords' is assigned a value but never used."", 'line': 1, 'column': 5, 'nodeType': 'Identifier', 'messageId': 'unusedVar', 'endLine': 1, 'endColumn': 17}, {'ruleId': 'func-names', 'severity': 2, 'message': 'Unexpected unnamed function.', 'line': 1, 'column': 20, 'nodeType': 'FunctionExpression', 'messageId': 'unnamed', 'endLine': 1, 'endColumn': 28}, {'ruleId': 'id-length', 'severity': 2, 'message': ""Identifier name 's' is too short (< 2)."", 'line': 1, 'column': 29, 'nodeType': 'Identifier', 'messageId': 'tooShort', 'endLine': 1, 'endColumn': 30}, {'ruleId': 'prefer-const', 'severity': 2, 'message': ""'words' is never reassigned. Use 'const' instead."", 'line': 2, 'column': 9, 'nodeType': 'Identifier', 'messageId': 'useConst', 'endLine': 2, 'endColumn': 14, 'fix': {'range': [37, 62], 'text': ""const words = s.split(' ');""}}, {'ruleId': 'one-var', 'severity': 2, 'message': ""Combine this with the previous 'let' statement."", 'line': 3, 'column': 5, 'nodeType': 'VariableDeclaration', 'messageId': 'combine', 'endLine': 3, 'endColumn': 18, 'fix': {'range': [61, 70], 'text': ',\n    '}}, {'ruleId': 'prefer-const', 'severity': 2, 'message': ""'res' is never reassigned. Use 'const' instead."", 'line': 3, 'column': 9, 'nodeType': 'Identifier', 'messageId': 'useConst', 'endLine': 3, 'endColumn': 12, 'fix': {'range': [67, 80], 'text': 'const res = [];'}}, {'ruleId': 'id-length', 'severity': 2, 'message': ""Identifier name 'i' is too short (< 2)."", 'line': 5, 'column': 14, 'nodeType': 'Identifier', 'messageId': 'tooShort', 'endLine': 5, 'endColumn': 15}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 1.', 'line': 5, 'column': 33, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 5, 'endColumn': 34}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 0.', 'line': 5, 'column': 41, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 5, 'endColumn': 42}, {'ruleId': 'no-plusplus', 'severity': 2, 'message': ""Unary operator '--' used."", 'line': 5, 'column': 44, 'nodeType': 'UpdateExpression', 'messageId': 'unexpectedUnaryOp', 'endLine': 5, 'endColumn': 47}]


Google Closure Compiler Output:

[{'level': 'warning', 'description': 'Using `var` (prefer `const` or `let`).', 'key': 'JSC_VAR', 'source': '/tmp/tmpyb3gurbg', 'line': 1, 'column': 0, 'length': 233, 'context': 'var reverseWords = function(s) {\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Function must have JSDoc.', 'key': 'JSC_MISSING_JSDOC', 'source': '/tmp/tmpyb3gurbg', 'line': 1, 'column': 19, 'length': 213, 'context': 'var reverseWords = function(s) {\n                   ^^^^^^^^^^^^^'}, {'level': 'info', 'description': '0 error(s), 2 warning(s), 72.0% typed'}]"
16,Product of Array Except Self,"Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].

The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.

You must write an algorithm that runs in O(n) time and without using the division operation.","Example 1:

Input: nums = [1,2,3,4]
Output: [24,12,8,6]
Example 2:

Input: nums = [-1,1,0,-3,3]
Output: [0,0,9,0,0]","var productExceptSelf = function(nums) {
    const output = Array(nums.length).fill(1);

    let left = 1;
    for (let i = 0; i < nums.length; i++) {
        output[i] *= left;
        left *= nums[i];
    }

    let right = 1;
    for (let i = nums.length - 1; i >= 0; i--) {
        output[i] *= right;
        right *= nums[i];
    }

    return output;    
};","2 <= nums.length <= 10^5
-30 <= nums[i] <= 30
The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.",Medium,https://leetcode.com/problems/product-of-array-except-self/description/?envType=study-plan-v2&envId=leetcode-75,"/**
 * @param {number[]} nums
 * @return {number[]}
 */
var productExceptSelf = function(nums) {
    
};","ESLint Output:

[{'ruleId': 'no-var', 'severity': 2, 'message': 'Unexpected var, use let or const instead.', 'line': 1, 'column': 1, 'nodeType': 'VariableDeclaration', 'messageId': 'unexpectedVar', 'endLine': 17, 'endColumn': 3, 'fix': {'range': [0, 3], 'text': 'let'}}, {'ruleId': 'no-unused-vars', 'severity': 2, 'message': ""'productExceptSelf' is assigned a value but never used."", 'line': 1, 'column': 5, 'nodeType': 'Identifier', 'messageId': 'unusedVar', 'endLine': 1, 'endColumn': 22}, {'ruleId': 'func-names', 'severity': 2, 'message': 'Unexpected unnamed function.', 'line': 1, 'column': 25, 'nodeType': 'FunctionExpression', 'messageId': 'unnamed', 'endLine': 1, 'endColumn': 33}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 1.', 'line': 2, 'column': 44, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 2, 'endColumn': 45}, {'ruleId': 'id-length', 'severity': 2, 'message': ""Identifier name 'i' is too short (< 2)."", 'line': 5, 'column': 14, 'nodeType': 'Identifier', 'messageId': 'tooShort', 'endLine': 5, 'endColumn': 15}, {'ruleId': 'no-plusplus', 'severity': 2, 'message': ""Unary operator '++' used."", 'line': 5, 'column': 38, 'nodeType': 'UpdateExpression', 'messageId': 'unexpectedUnaryOp', 'endLine': 5, 'endColumn': 41}, {'ruleId': 'one-var', 'severity': 2, 'message': ""Combine this with the previous 'let' statement."", 'line': 10, 'column': 5, 'nodeType': 'VariableDeclaration', 'messageId': 'combine', 'endLine': 10, 'endColumn': 19}, {'ruleId': 'id-length', 'severity': 2, 'message': ""Identifier name 'i' is too short (< 2)."", 'line': 11, 'column': 14, 'nodeType': 'Identifier', 'messageId': 'tooShort', 'endLine': 11, 'endColumn': 15}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 1.', 'line': 11, 'column': 32, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 11, 'endColumn': 33}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 0.', 'line': 11, 'column': 40, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 11, 'endColumn': 41}, {'ruleId': 'no-plusplus', 'severity': 2, 'message': ""Unary operator '--' used."", 'line': 11, 'column': 43, 'nodeType': 'UpdateExpression', 'messageId': 'unexpectedUnaryOp', 'endLine': 11, 'endColumn': 46}]


Google Closure Compiler Output:

[{'level': 'warning', 'description': 'Using `var` (prefer `const` or `let`).', 'key': 'JSC_VAR', 'source': '/tmp/tmp5h0c1nva', 'line': 1, 'column': 0, 'length': 364, 'context': 'var productExceptSelf = function(nums) {\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Function must have JSDoc.', 'key': 'JSC_MISSING_JSDOC', 'source': '/tmp/tmp5h0c1nva', 'line': 1, 'column': 24, 'length': 339, 'context': 'var productExceptSelf = function(nums) {\n                        ^^^^^^^^^^^^^^^^'}, {'level': 'info', 'description': '0 error(s), 2 warning(s), 81.3% typed'}]"
17,String Compression,"Given an array of characters chars, compress it using the following algorithm:

Begin with an empty string s. For each group of consecutive repeating characters in chars:

If the group's length is 1, append the character to s.
Otherwise, append the character followed by the group's length.
The compressed string s should not be returned separately, but instead, be stored in the input character array chars. Note that group lengths that are 10 or longer will be split into multiple characters in chars.

After you are done modifying the input array, return the new length of the array.

You must write an algorithm that uses only constant extra space.","Example 1:

Input: chars = [""a"",""a"",""b"",""b"",""c"",""c"",""c""]
Output: Return 6, and the first 6 characters of the input array should be: [""a"",""2"",""b"",""2"",""c"",""3""]
Explanation: The groups are ""aa"", ""bb"", and ""ccc"". This compresses to ""a2b2c3"".
Example 2:

Input: chars = [""a""]
Output: Return 1, and the first character of the input array should be: [""a""]
Explanation: The only group is ""a"", which remains uncompressed since it's a single character.
Example 3:

Input: chars = [""a"",""b"",""b"",""b"",""b"",""b"",""b"",""b"",""b"",""b"",""b"",""b"",""b""]
Output: Return 4, and the first 4 characters of the input array should be: [""a"",""b"",""1"",""2""].
Explanation: The groups are ""a"" and ""bbbbbbbbbbbb"". This compresses to ""ab12"".","/**
 * @param {character[]} chars
 * @return {number}
 */
var compress = function(chars) {
    let write = 0;
    let read = 0;

    while (read < chars.length) {
        let char = chars[read];
        let count = 0;

        // Count the number of consecutive characters
        while (read < chars.length && chars[read] === char) {
            count++;
            read++;
        }
        chars[write] = char;
        write++;
        if (count > 1) {
            for (let digit of String(count)) {
                chars[write] = digit;
                write++;
            }
        }
    }

    return write;
};","1 <= chars.length <= 2000
chars[i] is a lowercase English letter, uppercase English letter, digit, or symbol.",Medium,https://leetcode.com/problems/string-compression/description/?envType=study-plan-v2&envId=leetcode-75,"/**
 * @param {character[]} chars
 * @return {number}
 */
var compress = function(chars) {
    
};","ESLint Output:

[{'ruleId': 'no-var', 'severity': 2, 'message': 'Unexpected var, use let or const instead.', 'line': 5, 'column': 1, 'nodeType': 'VariableDeclaration', 'messageId': 'unexpectedVar', 'endLine': 29, 'endColumn': 3, 'fix': {'range': [58, 61], 'text': 'let'}}, {'ruleId': 'no-unused-vars', 'severity': 2, 'message': ""'compress' is assigned a value but never used."", 'line': 5, 'column': 5, 'nodeType': 'Identifier', 'messageId': 'unusedVar', 'endLine': 5, 'endColumn': 13}, {'ruleId': 'func-names', 'severity': 2, 'message': 'Unexpected unnamed function.', 'line': 5, 'column': 16, 'nodeType': 'FunctionExpression', 'messageId': 'unnamed', 'endLine': 5, 'endColumn': 24}, {'ruleId': 'max-statements', 'severity': 2, 'message': 'Function has too many statements (15). Maximum allowed is 10.', 'line': 5, 'column': 16, 'nodeType': 'FunctionExpression', 'messageId': 'exceed', 'endLine': 29, 'endColumn': 2}, {'ruleId': 'one-var', 'severity': 2, 'message': ""Combine this with the previous 'let' statement."", 'line': 7, 'column': 5, 'nodeType': 'VariableDeclaration', 'messageId': 'combine', 'endLine': 7, 'endColumn': 18, 'fix': {'range': [108, 117], 'text': ',\n    '}}, {'ruleId': 'prefer-const', 'severity': 2, 'message': ""'char' is never reassigned. Use 'const' instead."", 'line': 10, 'column': 13, 'nodeType': 'Identifier', 'messageId': 'useConst', 'endLine': 10, 'endColumn': 17, 'fix': {'range': [171, 194], 'text': 'const char = chars[read];'}}, {'ruleId': 'one-var', 'severity': 2, 'message': ""Combine this with the previous 'let' statement."", 'line': 11, 'column': 9, 'nodeType': 'VariableDeclaration', 'messageId': 'combine', 'endLine': 11, 'endColumn': 23, 'fix': {'range': [193, 206], 'text': ',\n        '}}, {'ruleId': 'no-plusplus', 'severity': 2, 'message': ""Unary operator '++' used."", 'line': 15, 'column': 13, 'nodeType': 'UpdateExpression', 'messageId': 'unexpectedUnaryOp', 'endLine': 15, 'endColumn': 20}, {'ruleId': 'no-plusplus', 'severity': 2, 'message': ""Unary operator '++' used."", 'line': 16, 'column': 13, 'nodeType': 'UpdateExpression', 'messageId': 'unexpectedUnaryOp', 'endLine': 16, 'endColumn': 19}, {'ruleId': 'no-plusplus', 'severity': 2, 'message': ""Unary operator '++' used."", 'line': 19, 'column': 9, 'nodeType': 'UpdateExpression', 'messageId': 'unexpectedUnaryOp', 'endLine': 19, 'endColumn': 16}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 1.', 'line': 20, 'column': 21, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 20, 'endColumn': 22}, {'ruleId': 'prefer-const', 'severity': 2, 'message': ""'digit' is never reassigned. Use 'const' instead."", 'line': 21, 'column': 22, 'nodeType': 'Identifier', 'messageId': 'useConst', 'endLine': 21, 'endColumn': 27, 'fix': {'range': [474, 483], 'text': 'const digit'}}, {'ruleId': 'no-plusplus', 'severity': 2, 'message': ""Unary operator '++' used."", 'line': 23, 'column': 17, 'nodeType': 'UpdateExpression', 'messageId': 'unexpectedUnaryOp', 'endLine': 23, 'endColumn': 24}]


Google Closure Compiler Output:

[{'level': 'warning', 'description': 'Bad type annotation. expected closing } See https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler for more information.', 'key': 'JSC_TYPE_PARSE_ERROR', 'source': '/tmp/tmpcmz283pp', 'line': 2, 'column': 20, 'context': ' * @param {character[]} chars\n                    ^'}, {'level': 'warning', 'description': 'Bad type annotation. expecting a variable name in a @param tag. See https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler for more information.', 'key': 'JSC_TYPE_PARSE_ERROR', 'source': '/tmp/tmpcmz283pp', 'line': 2, 'column': 20, 'context': ' * @param {character[]} chars\n                    ^'}, {'level': 'warning', 'description': 'Using `var` (prefer `const` or `let`).', 'key': 'JSC_VAR', 'source': '/tmp/tmpcmz283pp', 'line': 5, 'column': 0, 'length': 560, 'context': 'var compress = function(chars) {\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Parameter must have JSDoc.', 'key': 'JSC_MISSING_PARAMETER_JSDOC', 'source': '/tmp/tmpcmz283pp', 'line': 5, 'column': 24, 'length': 5, 'context': 'var compress = function(chars) {\n                        ^^^^^'}, {'level': 'info', 'description': '0 error(s), 4 warning(s), 75.0% typed'}]"
18,Max Consecutive Ones III,"Given a binary array nums and an integer k, return the maximum number of consecutive 1's in the array if you can flip at most k 0's.","Example 1:

Input: nums = [1,1,1,0,0,0,1,1,1,1,0], k = 2
Output: 6
Explanation: [1,1,1,0,0,1,1,1,1,1,1]
Bolded numbers were flipped from 0 to 1. The longest subarray is underlined.
Example 2:

Input: nums = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], k = 3
Output: 10
Explanation: [0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1]
Bolded numbers were flipped from 0 to 1. The longest subarray is underlined.","/**
 * @param {number[]} nums
 * @param {number} k
 * @return {number}
 */
var longestOnes = function(nums, k) {
    let left = 0
    let max_length = 0
    let zero_count = 0
    for (let right = 0; right < nums.length; right++) {
        if(nums[right] == 0){
            zero_count += 1
        }
        while(zero_count > k) {
            if(nums[left] == 0) {
                zero_count -= 1
            }
            left++
        }
        // Calculate the length of the current valid window 
        // and update max_length
        max_length = Math.max(max_length, right- left + 1)
    }
    return max_length
};","1 <= nums.length <= 10^5
nums[i] is either 0 or 1.
0 <= k <= nums.length",Medium,https://leetcode.com/problems/max-consecutive-ones-iii/description/?envType=study-plan-v2&envId=leetcode-75,"/**
 * @param {number[]} nums
 * @param {number} k
 * @return {number}
 */
var longestOnes = function(nums, k) {
    
};","ESLint Output:

[{'ruleId': 'no-var', 'severity': 2, 'message': 'Unexpected var, use let or const instead.', 'line': 6, 'column': 1, 'nodeType': 'VariableDeclaration', 'messageId': 'unexpectedVar', 'endLine': 25, 'endColumn': 3, 'fix': {'range': [75, 78], 'text': 'let'}}, {'ruleId': 'no-unused-vars', 'severity': 2, 'message': ""'longestOnes' is assigned a value but never used."", 'line': 6, 'column': 5, 'nodeType': 'Identifier', 'messageId': 'unusedVar', 'endLine': 6, 'endColumn': 16}, {'ruleId': 'func-names', 'severity': 2, 'message': 'Unexpected unnamed function.', 'line': 6, 'column': 19, 'nodeType': 'FunctionExpression', 'messageId': 'unnamed', 'endLine': 6, 'endColumn': 27}, {'ruleId': 'max-statements', 'severity': 2, 'message': 'Function has too many statements (12). Maximum allowed is 10.', 'line': 6, 'column': 19, 'nodeType': 'FunctionExpression', 'messageId': 'exceed', 'endLine': 25, 'endColumn': 2}, {'ruleId': 'id-length', 'severity': 2, 'message': ""Identifier name 'k' is too short (< 2)."", 'line': 6, 'column': 34, 'nodeType': 'Identifier', 'messageId': 'tooShort', 'endLine': 6, 'endColumn': 35}, {'ruleId': 'one-var', 'severity': 2, 'message': ""Combine this with the previous 'let' statement."", 'line': 8, 'column': 5, 'nodeType': 'VariableDeclaration', 'messageId': 'combine', 'endLine': 8, 'endColumn': 23, 'fix': {'range': [129, 137], 'text': ',\n    '}}, {'ruleId': 'camelcase', 'severity': 2, 'message': ""Identifier 'max_length' is not in camel case."", 'line': 8, 'column': 9, 'nodeType': 'Identifier', 'messageId': 'notCamelCase', 'endLine': 8, 'endColumn': 19}, {'ruleId': 'one-var', 'severity': 2, 'message': ""Combine this with the previous 'let' statement."", 'line': 9, 'column': 5, 'nodeType': 'VariableDeclaration', 'messageId': 'combine', 'endLine': 9, 'endColumn': 23, 'fix': {'range': [152, 160], 'text': ',\n    '}}, {'ruleId': 'camelcase', 'severity': 2, 'message': ""Identifier 'zero_count' is not in camel case."", 'line': 9, 'column': 9, 'nodeType': 'Identifier', 'messageId': 'notCamelCase', 'endLine': 9, 'endColumn': 19}, {'ruleId': 'no-plusplus', 'severity': 2, 'message': ""Unary operator '++' used."", 'line': 10, 'column': 46, 'nodeType': 'UpdateExpression', 'messageId': 'unexpectedUnaryOp', 'endLine': 10, 'endColumn': 53}, {'ruleId': 'eqeqeq', 'severity': 2, 'message': ""Expected '===' and instead saw '=='."", 'line': 11, 'column': 24, 'nodeType': 'BinaryExpression', 'messageId': 'unexpected', 'endLine': 11, 'endColumn': 26}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 0.', 'line': 11, 'column': 27, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 11, 'endColumn': 28}, {'ruleId': 'camelcase', 'severity': 2, 'message': ""Identifier 'zero_count' is not in camel case."", 'line': 12, 'column': 13, 'nodeType': 'Identifier', 'messageId': 'notCamelCase', 'endLine': 12, 'endColumn': 23}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 1.', 'line': 12, 'column': 27, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 12, 'endColumn': 28}, {'ruleId': 'camelcase', 'severity': 2, 'message': ""Identifier 'zero_count' is not in camel case."", 'line': 14, 'column': 15, 'nodeType': 'Identifier', 'messageId': 'notCamelCase', 'endLine': 14, 'endColumn': 25}, {'ruleId': 'eqeqeq', 'severity': 2, 'message': ""Expected '===' and instead saw '=='."", 'line': 15, 'column': 27, 'nodeType': 'BinaryExpression', 'messageId': 'unexpected', 'endLine': 15, 'endColumn': 29}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 0.', 'line': 15, 'column': 30, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 15, 'endColumn': 31}, {'ruleId': 'camelcase', 'severity': 2, 'message': ""Identifier 'zero_count' is not in camel case."", 'line': 16, 'column': 17, 'nodeType': 'Identifier', 'messageId': 'notCamelCase', 'endLine': 16, 'endColumn': 27}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 1.', 'line': 16, 'column': 31, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 16, 'endColumn': 32}, {'ruleId': 'no-plusplus', 'severity': 2, 'message': ""Unary operator '++' used."", 'line': 18, 'column': 13, 'nodeType': 'UpdateExpression', 'messageId': 'unexpectedUnaryOp', 'endLine': 18, 'endColumn': 19}, {'ruleId': 'capitalized-comments', 'severity': 2, 'message': 'Comments should not begin with a lowercase character.', 'line': 21, 'column': 9, 'nodeType': None, 'messageId': 'unexpectedLowercaseComment', 'endLine': 21, 'endColumn': 33, 'fix': {'range': [513, 514], 'text': 'A'}}, {'ruleId': 'camelcase', 'severity': 2, 'message': ""Identifier 'max_length' is not in camel case."", 'line': 22, 'column': 9, 'nodeType': 'Identifier', 'messageId': 'notCamelCase', 'endLine': 22, 'endColumn': 19}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 1.', 'line': 22, 'column': 57, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 22, 'endColumn': 58}, {'ruleId': 'camelcase', 'severity': 2, 'message': ""Identifier 'max_length' is not in camel case."", 'line': 24, 'column': 12, 'nodeType': 'Identifier', 'messageId': 'notCamelCase', 'endLine': 24, 'endColumn': 22}]


Google Closure Compiler Output:

[{'level': 'warning', 'description': 'Bad type annotation. expected closing } See https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler for more information.', 'key': 'JSC_TYPE_PARSE_ERROR', 'source': '/tmp/tmpuafyjma4', 'line': 2, 'column': 17, 'context': ' * @param {number[]} nums\n                 ^'}, {'level': 'warning', 'description': 'Bad type annotation. expecting a variable name in a @param tag. See https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler for more information.', 'key': 'JSC_TYPE_PARSE_ERROR', 'source': '/tmp/tmpuafyjma4', 'line': 2, 'column': 17, 'context': ' * @param {number[]} nums\n                 ^'}, {'level': 'warning', 'description': 'Using `var` (prefer `const` or `let`).', 'key': 'JSC_VAR', 'source': '/tmp/tmpuafyjma4', 'line': 6, 'column': 0, 'length': 549, 'context': 'var longestOnes = function(nums, k) {\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Wrong number of @param annotations', 'key': 'JSC_WRONG_NUMBER_OF_PARAMS', 'source': '/tmp/tmpuafyjma4', 'line': 6, 'column': 26, 'length': 9, 'context': 'var longestOnes = function(nums, k) {\n                          ^^^^^^^^^'}, {'level': 'warning', 'description': 'Missing semicolon', 'key': 'JSC_MISSING_SEMICOLON', 'source': '/tmp/tmpuafyjma4', 'line': 7, 'column': 4, 'length': 12, 'context': '    let left = 0\n    ^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Missing semicolon', 'key': 'JSC_MISSING_SEMICOLON', 'source': '/tmp/tmpuafyjma4', 'line': 8, 'column': 4, 'length': 18, 'context': '    let max_length = 0\n    ^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Missing semicolon', 'key': 'JSC_MISSING_SEMICOLON', 'source': '/tmp/tmpuafyjma4', 'line': 9, 'column': 4, 'length': 18, 'context': '    let zero_count = 0\n    ^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Missing semicolon', 'key': 'JSC_MISSING_SEMICOLON', 'source': '/tmp/tmpuafyjma4', 'line': 12, 'column': 12, 'length': 15, 'context': '            zero_count += 1\n            ^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Missing semicolon', 'key': 'JSC_MISSING_SEMICOLON', 'source': '/tmp/tmpuafyjma4', 'line': 16, 'column': 16, 'length': 15, 'context': '                zero_count -= 1\n                ^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Missing semicolon', 'key': 'JSC_MISSING_SEMICOLON', 'source': '/tmp/tmpuafyjma4', 'line': 18, 'column': 12, 'length': 6, 'context': '            left++\n            ^^^^^^'}, {'level': 'warning', 'description': 'Missing semicolon', 'key': 'JSC_MISSING_SEMICOLON', 'source': '/tmp/tmpuafyjma4', 'line': 22, 'column': 8, 'length': 50, 'context': '        max_length = Math.max(max_length, right- left + 1)\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Missing semicolon', 'key': 'JSC_MISSING_SEMICOLON', 'source': '/tmp/tmpuafyjma4', 'line': 24, 'column': 4, 'length': 17, 'context': '    return max_length\n    ^^^^^^^^^^^^^^^^^'}, {'level': 'info', 'description': '0 error(s), 12 warning(s), 90.2% typed'}]"
19,Find the Difference of Two Arrays,"Given two 0-indexed integer arrays nums1 and nums2, return a list answer of size 2 where:

answer[0] is a list of all distinct integers in nums1 which are not present in nums2.
answer[1] is a list of all distinct integers in nums2 which are not present in nums1.
Note that the integers in the lists may be returned in any order.","Example 1:

Input: nums1 = [1,2,3], nums2 = [2,4,6]
Output: [[1,3],[4,6]]
Explanation:
For nums1, nums1[1] = 2 is present at index 0 of nums2, whereas nums1[0] = 1 and nums1[2] = 3 are not present in nums2. Therefore, answer[0] = [1,3].
For nums2, nums2[0] = 2 is present at index 1 of nums1, whereas nums2[1] = 4 and nums2[2] = 6 are not present in nums2. Therefore, answer[1] = [4,6].
Example 2:

Input: nums1 = [1,2,3,3], nums2 = [1,1,2,2]
Output: [[3],[]]
Explanation:
For nums1, nums1[2] and nums1[3] are not present in nums2. Since nums1[2] == nums1[3], their value is only included once and answer[0] = [3].
Every integer in nums2 is present in nums1. Therefore, answer[1] = [].","/**
 * @param {number[]} nums1
 * @param {number[]} nums2
 * @return {number[][]}
 */
var findDifference = function(nums1, nums2) {
    let set1 = new Set(nums1);
    let set2 = new Set(nums2);
    let uniqueToNums1 = Array.from(set1).filter(x => !set2.has(x));
    let uniqueToNums2 = Array.from(set2).filter(x => !set1.has(x));

    return [uniqueToNums1, uniqueToNums2];
};","1 <= nums1.length, nums2.length <= 1000
-1000 <= nums1[i], nums2[i] <= 1000",Medium,https://leetcode.com/problems/find-the-difference-of-two-arrays/description/?envType=study-plan-v2&envId=leetcode-75,"/**
 * @param {number[]} nums1
 * @param {number[]} nums2
 * @return {number[][]}
 */
var findDifference = function(nums1, nums2) {
    
};","ESLint Output:

[{'ruleId': 'no-var', 'severity': 2, 'message': 'Unexpected var, use let or const instead.', 'line': 6, 'column': 1, 'nodeType': 'VariableDeclaration', 'messageId': 'unexpectedVar', 'endLine': 13, 'endColumn': 3, 'fix': {'range': [86, 89], 'text': 'let'}}, {'ruleId': 'no-unused-vars', 'severity': 2, 'message': ""'findDifference' is assigned a value but never used."", 'line': 6, 'column': 5, 'nodeType': 'Identifier', 'messageId': 'unusedVar', 'endLine': 6, 'endColumn': 19}, {'ruleId': 'func-names', 'severity': 2, 'message': 'Unexpected unnamed function.', 'line': 6, 'column': 22, 'nodeType': 'FunctionExpression', 'messageId': 'unnamed', 'endLine': 6, 'endColumn': 30}, {'ruleId': 'prefer-const', 'severity': 2, 'message': ""'set1' is never reassigned. Use 'const' instead."", 'line': 7, 'column': 9, 'nodeType': 'Identifier', 'messageId': 'useConst', 'endLine': 7, 'endColumn': 13, 'fix': {'range': [136, 162], 'text': 'const set1 = new Set(nums1);'}}, {'ruleId': 'one-var', 'severity': 2, 'message': ""Combine this with the previous 'let' statement."", 'line': 8, 'column': 5, 'nodeType': 'VariableDeclaration', 'messageId': 'combine', 'endLine': 8, 'endColumn': 31, 'fix': {'range': [161, 170], 'text': ',\n    '}}, {'ruleId': 'prefer-const', 'severity': 2, 'message': ""'set2' is never reassigned. Use 'const' instead."", 'line': 8, 'column': 9, 'nodeType': 'Identifier', 'messageId': 'useConst', 'endLine': 8, 'endColumn': 13, 'fix': {'range': [167, 193], 'text': 'const set2 = new Set(nums2);'}}, {'ruleId': 'one-var', 'severity': 2, 'message': ""Combine this with the previous 'let' statement."", 'line': 9, 'column': 5, 'nodeType': 'VariableDeclaration', 'messageId': 'combine', 'endLine': 9, 'endColumn': 68, 'fix': {'range': [192, 201], 'text': ',\n    '}}, {'ruleId': 'prefer-const', 'severity': 2, 'message': ""'uniqueToNums1' is never reassigned. Use 'const' instead."", 'line': 9, 'column': 9, 'nodeType': 'Identifier', 'messageId': 'useConst', 'endLine': 9, 'endColumn': 22, 'fix': {'range': [198, 261], 'text': 'const uniqueToNums1 = Array.from(set1).filter(x => !set2.has(x));'}}, {'ruleId': 'id-length', 'severity': 2, 'message': ""Identifier name 'x' is too short (< 2)."", 'line': 9, 'column': 49, 'nodeType': 'Identifier', 'messageId': 'tooShort', 'endLine': 9, 'endColumn': 50}, {'ruleId': 'one-var', 'severity': 2, 'message': ""Combine this with the previous 'let' statement."", 'line': 10, 'column': 5, 'nodeType': 'VariableDeclaration', 'messageId': 'combine', 'endLine': 10, 'endColumn': 68, 'fix': {'range': [260, 269], 'text': ',\n    '}}, {'ruleId': 'prefer-const', 'severity': 2, 'message': ""'uniqueToNums2' is never reassigned. Use 'const' instead."", 'line': 10, 'column': 9, 'nodeType': 'Identifier', 'messageId': 'useConst', 'endLine': 10, 'endColumn': 22, 'fix': {'range': [266, 329], 'text': 'const uniqueToNums2 = Array.from(set2).filter(x => !set1.has(x));'}}, {'ruleId': 'id-length', 'severity': 2, 'message': ""Identifier name 'x' is too short (< 2)."", 'line': 10, 'column': 49, 'nodeType': 'Identifier', 'messageId': 'tooShort', 'endLine': 10, 'endColumn': 50}]


Google Closure Compiler Output:

[{'level': 'warning', 'description': 'Bad type annotation. expected closing } See https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler for more information.', 'key': 'JSC_TYPE_PARSE_ERROR', 'source': '/tmp/tmplg29py1m', 'line': 2, 'column': 17, 'context': ' * @param {number[]} nums1\n                 ^'}, {'level': 'warning', 'description': 'Bad type annotation. expecting a variable name in a @param tag. See https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler for more information.', 'key': 'JSC_TYPE_PARSE_ERROR', 'source': '/tmp/tmplg29py1m', 'line': 2, 'column': 17, 'context': ' * @param {number[]} nums1\n                 ^'}, {'level': 'warning', 'description': 'Bad type annotation. expected closing } See https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler for more information.', 'key': 'JSC_TYPE_PARSE_ERROR', 'source': '/tmp/tmplg29py1m', 'line': 3, 'column': 17, 'context': ' * @param {number[]} nums2\n                 ^'}, {'level': 'warning', 'description': 'Bad type annotation. expecting a variable name in a @param tag. See https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler for more information.', 'key': 'JSC_TYPE_PARSE_ERROR', 'source': '/tmp/tmplg29py1m', 'line': 3, 'column': 17, 'context': ' * @param {number[]} nums2\n                 ^'}, {'level': 'warning', 'description': 'Bad type annotation. expected closing } See https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler for more information.', 'key': 'JSC_TYPE_PARSE_ERROR', 'source': '/tmp/tmplg29py1m', 'line': 4, 'column': 18, 'context': ' * @return {number[][]}\n                  ^'}, {'level': 'warning', 'description': 'Using `var` (prefer `const` or `let`).', 'key': 'JSC_VAR', 'source': '/tmp/tmplg29py1m', 'line': 6, 'column': 0, 'length': 290, 'context': 'var findDifference = function(nums1, nums2) {\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Parameter must have JSDoc.', 'key': 'JSC_MISSING_PARAMETER_JSDOC', 'source': '/tmp/tmplg29py1m', 'line': 6, 'column': 30, 'length': 5, 'context': 'var findDifference = function(nums1, nums2) {\n                              ^^^^^'}, {'level': 'warning', 'description': 'inconsistent return type\nfound   : Array<?>\nrequired: number', 'key': 'JSC_TYPE_MISMATCH', 'source': '/tmp/tmplg29py1m', 'line': 12, 'column': 11, 'length': 30, 'context': '    return [uniqueToNums1, uniqueToNums2];\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'info', 'description': '0 error(s), 8 warning(s), 88.2% typed'}]"
20,Removing Stars From a String,"You are given a string s, which contains stars *.

In one operation, you can:

Choose a star in s.
Remove the closest non-star character to its left, as well as remove the star itself.
Return the string after all stars have been removed.

Note:

The input will be generated such that the operation is always possible.
It can be shown that the resulting string will always be unique.","Example 1:

Input: s = ""leet**cod*e""
Output: ""lecoe""
Explanation: Performing the removals from left to right:
- The closest character to the 1st star is 't' in ""leet**cod*e"". s becomes ""lee*cod*e"".
- The closest character to the 2nd star is 'e' in ""lee*cod*e"". s becomes ""lecod*e"".
- The closest character to the 3rd star is 'd' in ""lecod*e"". s becomes ""lecoe"".
There are no more stars, so we return ""lecoe"".
Example 2:

Input: s = ""erase*****""
Output: """"
Explanation: The entire string is removed, so we return an empty string.","/**
 * @param {string} s
 * @return {string}
 */
var removeStars = function(s) {
let i = 0;
    let stk = [];
     while(i<s.length){
         if(s.charAt(i)===""*""){
            if(stk.length>0){
                stk.pop();
            }
         }
         else {
             stk.push(s.charAt(i))
         }
         i++;
     }
    return stk.join("""");
};","1 <= s.length <= 10^5
s consists of lowercase English letters and stars *.
The operation above can be performed on s.",Medium,https://leetcode.com/problems/removing-stars-from-a-string/description/?envType=study-plan-v2&envId=leetcode-75,"/**
 * @param {string} s
 * @return {string}
 */
var removeStars = function(s) {
    
};","ESLint Output:

[{'ruleId': 'no-var', 'severity': 2, 'message': 'Unexpected var, use let or const instead.', 'line': 5, 'column': 1, 'nodeType': 'VariableDeclaration', 'messageId': 'unexpectedVar', 'endLine': 20, 'endColumn': 3, 'fix': {'range': [49, 52], 'text': 'let'}}, {'ruleId': 'no-unused-vars', 'severity': 2, 'message': ""'removeStars' is assigned a value but never used."", 'line': 5, 'column': 5, 'nodeType': 'Identifier', 'messageId': 'unusedVar', 'endLine': 5, 'endColumn': 16}, {'ruleId': 'func-names', 'severity': 2, 'message': 'Unexpected unnamed function.', 'line': 5, 'column': 19, 'nodeType': 'FunctionExpression', 'messageId': 'unnamed', 'endLine': 5, 'endColumn': 27}, {'ruleId': 'id-length', 'severity': 2, 'message': ""Identifier name 's' is too short (< 2)."", 'line': 5, 'column': 28, 'nodeType': 'Identifier', 'messageId': 'tooShort', 'endLine': 5, 'endColumn': 29}, {'ruleId': 'id-length', 'severity': 2, 'message': ""Identifier name 'i' is too short (< 2)."", 'line': 6, 'column': 5, 'nodeType': 'Identifier', 'messageId': 'tooShort', 'endLine': 6, 'endColumn': 6}, {'ruleId': 'one-var', 'severity': 2, 'message': ""Combine this with the previous 'let' statement."", 'line': 7, 'column': 5, 'nodeType': 'VariableDeclaration', 'messageId': 'combine', 'endLine': 7, 'endColumn': 18, 'fix': {'range': [90, 99], 'text': ',\n    '}}, {'ruleId': 'prefer-const', 'severity': 2, 'message': ""'stk' is never reassigned. Use 'const' instead."", 'line': 7, 'column': 9, 'nodeType': 'Identifier', 'messageId': 'useConst', 'endLine': 7, 'endColumn': 12, 'fix': {'range': [96, 109], 'text': 'const stk = [];'}}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 0.', 'line': 10, 'column': 27, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 10, 'endColumn': 28}, {'ruleId': 'no-plusplus', 'severity': 2, 'message': ""Unary operator '++' used."", 'line': 17, 'column': 10, 'nodeType': 'UpdateExpression', 'messageId': 'unexpectedUnaryOp', 'endLine': 17, 'endColumn': 13}]


Google Closure Compiler Output:

[{'level': 'warning', 'description': 'Using `var` (prefer `const` or `let`).', 'key': 'JSC_VAR', 'source': '/tmp/tmp4gikgw2t', 'line': 5, 'column': 0, 'length': 309, 'context': 'var removeStars = function(s) {\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Missing semicolon', 'key': 'JSC_MISSING_SEMICOLON', 'source': '/tmp/tmp4gikgw2t', 'line': 15, 'column': 13, 'length': 21, 'context': '             stk.push(s.charAt(i))\n             ^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'info', 'description': '0 error(s), 2 warning(s), 100.0% typed'}]"
21,Dota2 Senate,"In the world of Dota2, there are two parties: the Radiant and the Dire.

The Dota2 senate consists of senators coming from two parties. Now the Senate wants to decide on a change in the Dota2 game. The voting for this change is a round-based procedure. In each round, each senator can exercise one of the two rights:

Ban one senator's right: A senator can make another senator lose all his rights in this and all the following rounds.
Announce the victory: If this senator found the senators who still have rights to vote are all from the same party, he can announce the victory and decide on the change in the game.
Given a string senate representing each senator's party belonging. The character 'R' and 'D' represent the Radiant party and the Dire party. Then if there are n senators, the size of the given string will be n.

The round-based procedure starts from the first senator to the last senator in the given order. This procedure will last until the end of voting. All the senators who have lost their rights will be skipped during the procedure.

Suppose every senator is smart enough and will play the best strategy for his own party. Predict which party will finally announce the victory and change the Dota2 game. The output should be ""Radiant"" or ""Dire"".","Example 1:

Input: senate = ""RD""
Output: ""Radiant""
Explanation: 
The first senator comes from Radiant and he can just ban the next senator's right in round 1. 
And the second senator can't exercise any rights anymore since his right has been banned. 
And in round 2, the first senator can just announce the victory since he is the only guy in the senate who can vote.
Example 2:

Input: senate = ""RDD""
Output: ""Dire""
Explanation: 
The first senator comes from Radiant and he can just ban the next senator's right in round 1. 
And the second senator can't exercise any rights anymore since his right has been banned. 
And the third senator comes from Dire and he can ban the first senator's right in round 1. 
And in round 2, the third senator can just announce the victory since he is the only guy in the senate who can vote.","var predictPartyVictory = function(senate) {
    senate = senate.split('');
    while(senate.length) {
        var first = senate.shift();
        var len = senate.length;

        for(var i=0; i<len; i++) {
            if(first != senate[i]) {
                senate.splice(i, 1);
                senate.push(first);
                break;
            }
        }
        if(i == len) {
            return first == 'D' ? 'Dire' : 'Radiant';
        }
    }
};","n == senate.length
1 <= n <= 10^4
senate[i] is either 'R' or 'D'.",Medium,https://leetcode.com/problems/dota2-senate/description/?envType=study-plan-v2&envId=leetcode-75,"/**
 * @param {string} senate
 * @return {string}
 */
var predictPartyVictory = function(senate) {
    
};","ESLint Output:

[{'ruleId': 'no-var', 'severity': 2, 'message': 'Unexpected var, use let or const instead.', 'line': 1, 'column': 1, 'nodeType': 'VariableDeclaration', 'messageId': 'unexpectedVar', 'endLine': 18, 'endColumn': 3, 'fix': {'range': [0, 3], 'text': 'let'}}, {'ruleId': 'no-unused-vars', 'severity': 2, 'message': ""'predictPartyVictory' is assigned a value but never used."", 'line': 1, 'column': 5, 'nodeType': 'Identifier', 'messageId': 'unusedVar', 'endLine': 1, 'endColumn': 24}, {'ruleId': 'consistent-return', 'severity': 2, 'message': 'Expected to return a value at the end of function.', 'line': 1, 'column': 27, 'nodeType': 'FunctionExpression', 'messageId': 'missingReturn', 'endLine': 1, 'endColumn': 35}, {'ruleId': 'func-names', 'severity': 2, 'message': 'Unexpected unnamed function.', 'line': 1, 'column': 27, 'nodeType': 'FunctionExpression', 'messageId': 'unnamed', 'endLine': 1, 'endColumn': 35}, {'ruleId': 'max-statements', 'severity': 2, 'message': 'Function has too many statements (11). Maximum allowed is 10.', 'line': 1, 'column': 27, 'nodeType': 'FunctionExpression', 'messageId': 'exceed', 'endLine': 18, 'endColumn': 2}, {'ruleId': 'no-param-reassign', 'severity': 2, 'message': ""Assignment to function parameter 'senate'."", 'line': 2, 'column': 5, 'nodeType': 'Identifier', 'messageId': 'assignmentToFunctionParam', 'endLine': 2, 'endColumn': 11}, {'ruleId': 'vars-on-top', 'severity': 2, 'message': ""All 'var' declarations must be at the top of the function scope."", 'line': 4, 'column': 9, 'nodeType': 'VariableDeclaration', 'messageId': 'top', 'endLine': 4, 'endColumn': 36}, {'ruleId': 'no-var', 'severity': 2, 'message': 'Unexpected var, use let or const instead.', 'line': 4, 'column': 9, 'nodeType': 'VariableDeclaration', 'messageId': 'unexpectedVar', 'endLine': 4, 'endColumn': 36, 'fix': {'range': [111, 114], 'text': 'let'}}, {'ruleId': 'one-var', 'severity': 2, 'message': ""Combine this with the previous 'var' statement."", 'line': 5, 'column': 9, 'nodeType': 'VariableDeclaration', 'messageId': 'combine', 'endLine': 5, 'endColumn': 33, 'fix': {'range': [137, 150], 'text': ',\n        '}}, {'ruleId': 'vars-on-top', 'severity': 2, 'message': ""All 'var' declarations must be at the top of the function scope."", 'line': 5, 'column': 9, 'nodeType': 'VariableDeclaration', 'messageId': 'top', 'endLine': 5, 'endColumn': 33}, {'ruleId': 'no-var', 'severity': 2, 'message': 'Unexpected var, use let or const instead.', 'line': 5, 'column': 9, 'nodeType': 'VariableDeclaration', 'messageId': 'unexpectedVar', 'endLine': 5, 'endColumn': 33, 'fix': {'range': [147, 150], 'text': 'let'}}, {'ruleId': 'one-var', 'severity': 2, 'message': ""Combine this with the previous 'var' statement."", 'line': 7, 'column': 13, 'nodeType': 'VariableDeclaration', 'messageId': 'combine', 'endLine': 7, 'endColumn': 20}, {'ruleId': 'vars-on-top', 'severity': 2, 'message': ""All 'var' declarations must be at the top of the function scope."", 'line': 7, 'column': 13, 'nodeType': 'VariableDeclaration', 'messageId': 'top', 'endLine': 7, 'endColumn': 20}, {'ruleId': 'no-var', 'severity': 2, 'message': 'Unexpected var, use let or const instead.', 'line': 7, 'column': 13, 'nodeType': 'VariableDeclaration', 'messageId': 'unexpectedVar', 'endLine': 7, 'endColumn': 20}, {'ruleId': 'id-length', 'severity': 2, 'message': ""Identifier name 'i' is too short (< 2)."", 'line': 7, 'column': 17, 'nodeType': 'Identifier', 'messageId': 'tooShort', 'endLine': 7, 'endColumn': 18}, {'ruleId': 'no-plusplus', 'severity': 2, 'message': ""Unary operator '++' used."", 'line': 7, 'column': 29, 'nodeType': 'UpdateExpression', 'messageId': 'unexpectedUnaryOp', 'endLine': 7, 'endColumn': 32}, {'ruleId': 'eqeqeq', 'severity': 2, 'message': ""Expected '!==' and instead saw '!='."", 'line': 8, 'column': 22, 'nodeType': 'BinaryExpression', 'messageId': 'unexpected', 'endLine': 8, 'endColumn': 24}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 1.', 'line': 9, 'column': 34, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 9, 'endColumn': 35}, {'ruleId': 'block-scoped-var', 'severity': 2, 'message': ""'i' declared on line 7 column 17 is used outside of binding context."", 'line': 14, 'column': 12, 'nodeType': 'Identifier', 'messageId': 'outOfScope', 'endLine': 14, 'endColumn': 13}, {'ruleId': 'eqeqeq', 'severity': 2, 'message': ""Expected '===' and instead saw '=='."", 'line': 14, 'column': 14, 'nodeType': 'BinaryExpression', 'messageId': 'unexpected', 'endLine': 14, 'endColumn': 16}, {'ruleId': 'no-ternary', 'severity': 2, 'message': 'Ternary operator used.', 'line': 15, 'column': 20, 'nodeType': 'ConditionalExpression', 'messageId': 'noTernaryOperator', 'endLine': 15, 'endColumn': 53}, {'ruleId': 'eqeqeq', 'severity': 2, 'message': ""Expected '===' and instead saw '=='."", 'line': 15, 'column': 26, 'nodeType': 'BinaryExpression', 'messageId': 'unexpected', 'endLine': 15, 'endColumn': 28}]


Google Closure Compiler Output:

[{'level': 'warning', 'description': 'Using `var` (prefer `const` or `let`).', 'key': 'JSC_VAR', 'source': '/tmp/tmpk0ee2y6v', 'line': 1, 'column': 0, 'length': 460, 'context': 'var predictPartyVictory = function(senate) {\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Function must have JSDoc.', 'key': 'JSC_MISSING_JSDOC', 'source': '/tmp/tmpk0ee2y6v', 'line': 1, 'column': 26, 'length': 433, 'context': 'var predictPartyVictory = function(senate) {\n                          ^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Using `var` (prefer `const` or `let`).', 'key': 'JSC_VAR', 'source': '/tmp/tmpk0ee2y6v', 'line': 4, 'column': 8, 'length': 27, 'context': '        var first = senate.shift();\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Using `var` (prefer `const` or `let`).', 'key': 'JSC_VAR', 'source': '/tmp/tmpk0ee2y6v', 'line': 5, 'column': 8, 'length': 24, 'context': '        var len = senate.length;\n        ^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Using `var` (prefer `const` or `let`).', 'key': 'JSC_VAR', 'source': '/tmp/tmpk0ee2y6v', 'line': 7, 'column': 12, 'length': 7, 'context': '        for(var i=0; i<len; i++) {\n            ^^^^^^^'}, {'level': 'info', 'description': '0 error(s), 5 warning(s), 46.1% typed'}]"
22,Delete the Middle Node of a Linked List,"You are given the head of a linked list. Delete the middle node, and return the head of the modified linked list.

The middle node of a linked list of size n is the ⌊n / 2⌋th node from the start using 0-based indexing, where ⌊x⌋ denotes the largest integer less than or equal to x.

For n = 1, 2, 3, 4, and 5, the middle nodes are 0, 1, 1, 2, and 2, respectively.","Input: head = [1,3,4,7,1,2,6]
Output: [1,3,4,1,2,6]
Explanation:
The above figure represents the given linked list. The indices of the nodes are written below.
Since n = 7, node 3 with value 7 is the middle node, which is marked in red.
We return the new list after removing this node. 
Example 2:


Input: head = [1,2,3,4]
Output: [1,2,4]
Explanation:
The above figure represents the given linked list.
For n = 4, node 2 with value 3 is the middle node, which is marked in red.
Example 3:


Input: head = [2,1]
Output: [2]
Explanation:
The above figure represents the given linked list.
For n = 2, node 1 with value 1 is the middle node, which is marked in red.
Node 0 with value 2 is the only node remaining after removing node 1.","/**
 * Definition for singly-linked list.
 * function ListNode(val, next) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.next = (next===undefined ? null : next)
 * }
 */
/**
 * @param {ListNode} head
 * @return {ListNode}
 */
var deleteMiddle = function(head) {
    if(head === null)return null;
    prev = new ListNode(0);
    prev.next = head;
    slow = prev;
    fast = head;
    while(fast != null && fast.next != null){
        slow = slow.next;
        fast = fast.next.next;
    }
    slow.next = slow.next.next;
    return prev.next;
};","The number of nodes in the list is in the range [1, 10^5].
1 <= Node.val <= 10^5",Medium,https://leetcode.com/problems/delete-the-middle-node-of-a-linked-list/description/?envType=study-plan-v2&envId=leetcode-75,"/**
 * Definition for singly-linked list.
 * function ListNode(val, next) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.next = (next===undefined ? null : next)
 * }
 */
/**
 * @param {ListNode} head
 * @return {ListNode}
 */
var deleteMiddle = function(head) {
    
};","ESLint Output:

[{'ruleId': 'no-var', 'severity': 2, 'message': 'Unexpected var, use let or const instead.', 'line': 12, 'column': 1, 'nodeType': 'VariableDeclaration', 'messageId': 'unexpectedVar', 'endLine': 24, 'endColumn': 3, 'fix': {'range': [239, 242], 'text': 'let'}}, {'ruleId': 'no-unused-vars', 'severity': 2, 'message': ""'deleteMiddle' is assigned a value but never used."", 'line': 12, 'column': 5, 'nodeType': 'Identifier', 'messageId': 'unusedVar', 'endLine': 12, 'endColumn': 17}, {'ruleId': 'func-names', 'severity': 2, 'message': 'Unexpected unnamed function.', 'line': 12, 'column': 20, 'nodeType': 'FunctionExpression', 'messageId': 'unnamed', 'endLine': 12, 'endColumn': 28}, {'ruleId': 'curly', 'severity': 2, 'message': ""Expected { after 'if' condition."", 'line': 13, 'column': 22, 'nodeType': 'IfStatement', 'messageId': 'missingCurlyAfterCondition', 'endLine': 13, 'endColumn': 34, 'fix': {'range': [296, 308], 'text': '{return null;}'}}, {'ruleId': 'no-undef', 'severity': 2, 'message': ""'prev' is not defined."", 'line': 14, 'column': 5, 'nodeType': 'Identifier', 'messageId': 'undef', 'endLine': 14, 'endColumn': 9}, {'ruleId': 'no-undef', 'severity': 2, 'message': ""'ListNode' is not defined."", 'line': 14, 'column': 16, 'nodeType': 'Identifier', 'messageId': 'undef', 'endLine': 14, 'endColumn': 24}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 0.', 'line': 14, 'column': 25, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 14, 'endColumn': 26}, {'ruleId': 'no-undef', 'severity': 2, 'message': ""'prev' is not defined."", 'line': 15, 'column': 5, 'nodeType': 'Identifier', 'messageId': 'undef', 'endLine': 15, 'endColumn': 9}, {'ruleId': 'no-undef', 'severity': 2, 'message': ""'slow' is not defined."", 'line': 16, 'column': 5, 'nodeType': 'Identifier', 'messageId': 'undef', 'endLine': 16, 'endColumn': 9}, {'ruleId': 'no-undef', 'severity': 2, 'message': ""'prev' is not defined."", 'line': 16, 'column': 12, 'nodeType': 'Identifier', 'messageId': 'undef', 'endLine': 16, 'endColumn': 16}, {'ruleId': 'no-undef', 'severity': 2, 'message': ""'fast' is not defined."", 'line': 17, 'column': 5, 'nodeType': 'Identifier', 'messageId': 'undef', 'endLine': 17, 'endColumn': 9}, {'ruleId': 'no-eq-null', 'severity': 2, 'message': ""Use '===' to compare with null."", 'line': 18, 'column': 11, 'nodeType': 'BinaryExpression', 'messageId': 'unexpected', 'endLine': 18, 'endColumn': 23}, {'ruleId': 'no-undef', 'severity': 2, 'message': ""'fast' is not defined."", 'line': 18, 'column': 11, 'nodeType': 'Identifier', 'messageId': 'undef', 'endLine': 18, 'endColumn': 15}, {'ruleId': 'eqeqeq', 'severity': 2, 'message': ""Expected '!==' and instead saw '!='."", 'line': 18, 'column': 16, 'nodeType': 'BinaryExpression', 'messageId': 'unexpected', 'endLine': 18, 'endColumn': 18}, {'ruleId': 'no-eq-null', 'severity': 2, 'message': ""Use '===' to compare with null."", 'line': 18, 'column': 27, 'nodeType': 'BinaryExpression', 'messageId': 'unexpected', 'endLine': 18, 'endColumn': 44}, {'ruleId': 'no-undef', 'severity': 2, 'message': ""'fast' is not defined."", 'line': 18, 'column': 27, 'nodeType': 'Identifier', 'messageId': 'undef', 'endLine': 18, 'endColumn': 31}, {'ruleId': 'eqeqeq', 'severity': 2, 'message': ""Expected '!==' and instead saw '!='."", 'line': 18, 'column': 37, 'nodeType': 'BinaryExpression', 'messageId': 'unexpected', 'endLine': 18, 'endColumn': 39}, {'ruleId': 'no-undef', 'severity': 2, 'message': ""'slow' is not defined."", 'line': 19, 'column': 9, 'nodeType': 'Identifier', 'messageId': 'undef', 'endLine': 19, 'endColumn': 13}, {'ruleId': 'no-undef', 'severity': 2, 'message': ""'slow' is not defined."", 'line': 19, 'column': 16, 'nodeType': 'Identifier', 'messageId': 'undef', 'endLine': 19, 'endColumn': 20}, {'ruleId': 'no-undef', 'severity': 2, 'message': ""'fast' is not defined."", 'line': 20, 'column': 9, 'nodeType': 'Identifier', 'messageId': 'undef', 'endLine': 20, 'endColumn': 13}, {'ruleId': 'no-undef', 'severity': 2, 'message': ""'fast' is not defined."", 'line': 20, 'column': 16, 'nodeType': 'Identifier', 'messageId': 'undef', 'endLine': 20, 'endColumn': 20}, {'ruleId': 'no-undef', 'severity': 2, 'message': ""'slow' is not defined."", 'line': 22, 'column': 5, 'nodeType': 'Identifier', 'messageId': 'undef', 'endLine': 22, 'endColumn': 9}, {'ruleId': 'no-undef', 'severity': 2, 'message': ""'slow' is not defined."", 'line': 22, 'column': 17, 'nodeType': 'Identifier', 'messageId': 'undef', 'endLine': 22, 'endColumn': 21}, {'ruleId': 'no-undef', 'severity': 2, 'message': ""'prev' is not defined."", 'line': 23, 'column': 12, 'nodeType': 'Identifier', 'messageId': 'undef', 'endLine': 23, 'endColumn': 16}]


Google Closure Compiler Output:

[{'level': 'warning', 'description': ""Bad type annotation. Unknown type ListNode\nIt's possible that 'ListNode' refers to a value, not a type."", 'key': 'JSC_UNRECOGNIZED_TYPE_ERROR', 'source': '/tmp/tmpmjho16u8', 'line': 9, 'column': 11, 'context': ' * @param {ListNode} head\n           ^'}, {'level': 'warning', 'description': 'ListNode is a reference type with no nullability modifier, which is disallowed by the style guide.\nPlease add a ! to make it explicitly non-nullable, or a ? to make it explicitly nullable.', 'key': 'JSC_MISSING_NULLABILITY_MODIFIER_JSDOC', 'source': '/tmp/tmpmjho16u8', 'line': 9, 'column': 11, 'length': 8, 'context': ' * @param {ListNode} head\n           ^^^^^^^^'}, {'level': 'warning', 'description': ""Bad type annotation. Unknown type ListNode\nIt's possible that 'ListNode' refers to a value, not a type."", 'key': 'JSC_UNRECOGNIZED_TYPE_ERROR', 'source': '/tmp/tmpmjho16u8', 'line': 10, 'column': 12, 'context': ' * @return {ListNode}\n            ^'}, {'level': 'warning', 'description': 'ListNode is a reference type with no nullability modifier, which is disallowed by the style guide.\nPlease add a ! to make it explicitly non-nullable, or a ? to make it explicitly nullable.', 'key': 'JSC_MISSING_NULLABILITY_MODIFIER_JSDOC', 'source': '/tmp/tmpmjho16u8', 'line': 10, 'column': 12, 'length': 8, 'context': ' * @return {ListNode}\n            ^^^^^^^^'}, {'level': 'warning', 'description': 'Using `var` (prefer `const` or `let`).', 'key': 'JSC_VAR', 'source': '/tmp/tmpmjho16u8', 'line': 12, 'column': 0, 'length': 319, 'context': 'var deleteMiddle = function(head) {\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'variable prev is undeclared', 'key': 'JSC_UNDEFINED_VARIABLE', 'source': '/tmp/tmpmjho16u8', 'line': 14, 'column': 4, 'length': 4, 'context': '    prev = new ListNode(0);\n    ^^^^'}, {'level': 'warning', 'description': 'variable ListNode is undeclared', 'key': 'JSC_UNDEFINED_VARIABLE', 'source': '/tmp/tmpmjho16u8', 'line': 14, 'column': 15, 'length': 8, 'context': '    prev = new ListNode(0);\n               ^^^^^^^^'}, {'level': 'warning', 'description': 'variable slow is undeclared', 'key': 'JSC_UNDEFINED_VARIABLE', 'source': '/tmp/tmpmjho16u8', 'line': 16, 'column': 4, 'length': 4, 'context': '    slow = prev;\n    ^^^^'}, {'level': 'warning', 'description': 'variable fast is undeclared', 'key': 'JSC_UNDEFINED_VARIABLE', 'source': '/tmp/tmpmjho16u8', 'line': 17, 'column': 4, 'length': 4, 'context': '    fast = head;\n    ^^^^'}, {'level': 'info', 'description': '0 error(s), 9 warning(s), 27.7% typed'}]"
23,Lowest Common Ancestor of a Binary Tree,"Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.

According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”","Example 1:


Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
Output: 3
Explanation: The LCA of nodes 5 and 1 is 3.
Example 2:


Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4
Output: 5
Explanation: The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.
Example 3:

Input: root = [1,2], p = 1, q = 2
Output: 1
","function lowestCommonAncestor(root, p, q) {
  if (!root || root === p || root === q) return root;
  var resL = lowestCommonAncestor(root.left, p, q);
  var resR = lowestCommonAncestor(root.right, p, q);
  return (resL && resR) ? root : (resL || resR);
}","The number of nodes in the tree is in the range [2, 10^5].
-10^9 <= Node.val <= 10^9
All Node.val are unique.
p != q
p and q will exist in the tree.",Medium,https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/description/?envType=study-plan-v2&envId=leetcode-75,"/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @param {TreeNode} p
 * @param {TreeNode} q
 * @return {TreeNode}
 */
var lowestCommonAncestor = function(root, p, q) {
    
};","ESLint Output:

[{'ruleId': 'func-style', 'severity': 2, 'message': 'Expected a function expression.', 'line': 1, 'column': 1, 'nodeType': 'FunctionDeclaration', 'messageId': 'expression', 'endLine': 6, 'endColumn': 2}, {'ruleId': 'no-unused-vars', 'severity': 2, 'message': ""'lowestCommonAncestor' is defined but never used."", 'line': 1, 'column': 10, 'nodeType': 'Identifier', 'messageId': 'unusedVar', 'endLine': 1, 'endColumn': 30}, {'ruleId': 'id-length', 'severity': 2, 'message': ""Identifier name 'p' is too short (< 2)."", 'line': 1, 'column': 37, 'nodeType': 'Identifier', 'messageId': 'tooShort', 'endLine': 1, 'endColumn': 38}, {'ruleId': 'id-length', 'severity': 2, 'message': ""Identifier name 'q' is too short (< 2)."", 'line': 1, 'column': 40, 'nodeType': 'Identifier', 'messageId': 'tooShort', 'endLine': 1, 'endColumn': 41}, {'ruleId': 'curly', 'severity': 2, 'message': ""Expected { after 'if' condition."", 'line': 2, 'column': 42, 'nodeType': 'IfStatement', 'messageId': 'missingCurlyAfterCondition', 'endLine': 2, 'endColumn': 54, 'fix': {'range': [85, 97], 'text': '{return root;}'}}, {'ruleId': 'vars-on-top', 'severity': 2, 'message': ""All 'var' declarations must be at the top of the function scope."", 'line': 3, 'column': 3, 'nodeType': 'VariableDeclaration', 'messageId': 'top', 'endLine': 3, 'endColumn': 52}, {'ruleId': 'no-var', 'severity': 2, 'message': 'Unexpected var, use let or const instead.', 'line': 3, 'column': 3, 'nodeType': 'VariableDeclaration', 'messageId': 'unexpectedVar', 'endLine': 3, 'endColumn': 52, 'fix': {'range': [100, 103], 'text': 'let'}}, {'ruleId': 'one-var', 'severity': 2, 'message': ""Combine this with the previous 'var' statement."", 'line': 4, 'column': 3, 'nodeType': 'VariableDeclaration', 'messageId': 'combine', 'endLine': 4, 'endColumn': 53, 'fix': {'range': [148, 155], 'text': ',\n  '}}, {'ruleId': 'vars-on-top', 'severity': 2, 'message': ""All 'var' declarations must be at the top of the function scope."", 'line': 4, 'column': 3, 'nodeType': 'VariableDeclaration', 'messageId': 'top', 'endLine': 4, 'endColumn': 53}, {'ruleId': 'no-var', 'severity': 2, 'message': 'Unexpected var, use let or const instead.', 'line': 4, 'column': 3, 'nodeType': 'VariableDeclaration', 'messageId': 'unexpectedVar', 'endLine': 4, 'endColumn': 53, 'fix': {'range': [152, 155], 'text': 'let'}}, {'ruleId': 'no-ternary', 'severity': 2, 'message': 'Ternary operator used.', 'line': 5, 'column': 10, 'nodeType': 'ConditionalExpression', 'messageId': 'noTernaryOperator', 'endLine': 5, 'endColumn': 48}]


Google Closure Compiler Output:

[{'level': 'warning', 'description': 'Function must have JSDoc.', 'key': 'JSC_MISSING_JSDOC', 'source': '/tmp/tmp28x71v_x', 'line': 1, 'column': 0, 'length': 253, 'context': 'function lowestCommonAncestor(root, p, q) {\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Using `var` (prefer `const` or `let`).', 'key': 'JSC_VAR', 'source': '/tmp/tmp28x71v_x', 'line': 3, 'column': 2, 'length': 49, 'context': '  var resL = lowestCommonAncestor(root.left, p, q);\n  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Using `var` (prefer `const` or `let`).', 'key': 'JSC_VAR', 'source': '/tmp/tmp28x71v_x', 'line': 4, 'column': 2, 'length': 50, 'context': '  var resR = lowestCommonAncestor(root.right, p, q);\n  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'info', 'description': '0 error(s), 3 warning(s), 25.0% typed'}]"
24,Number of Provinces,"There are n cities. Some of them are connected, while some are not. If city a is connected directly with city b, and city b is connected directly with city c, then city a is connected indirectly with city c.

A province is a group of directly or indirectly connected cities and no other cities outside of the group.

You are given an n x n matrix isConnected where isConnected[i][j] = 1 if the ith city and the jth city are directly connected, and isConnected[i][j] = 0 otherwise.

Return the total number of provinces.","Example 1:


Input: isConnected = [[1,1,0],[1,1,0],[0,0,1]]
Output: 2
Example 2:


Input: isConnected = [[1,0,0],[0,1,0],[0,0,1]]
Output: 3","var findCircleNum = function (isConnected) {

    let provinces = 0;
    let visited = new Array(isConnected.length).fill(false);

    for (let i = 0; i < isConnected.length; i++) {
        if (!visited[i]) {
            provinces++;
            dfs(isConnected, visited, i);
        }
    }
    return provinces;
};

function dfs(isConnected, visited, i) {

    visited[i] = true;
    
    for (let j = 0; j < isConnected.length; j++) {
        if (isConnected[i][j] === 1 && !visited[j]) {
            dfs(isConnected, visited, j);
        }
    }
}","1 <= n <= 200
n == isConnected.length
n == isConnected[i].length
isConnected[i][j] is 1 or 0.
isConnected[i][i] == 1
isConnected[i][j] == isConnected[j][i]",Medium,https://leetcode.com/problems/number-of-provinces/description/?envType=study-plan-v2&envId=leetcode-75,"/**
 * @param {number[][]} isConnected
 * @return {number}
 */
var findCircleNum = function(isConnected) {
    
};","ESLint Output:

[{'ruleId': 'no-var', 'severity': 2, 'message': 'Unexpected var, use let or const instead.', 'line': 1, 'column': 1, 'nodeType': 'VariableDeclaration', 'messageId': 'unexpectedVar', 'endLine': 13, 'endColumn': 3, 'fix': {'range': [0, 3], 'text': 'let'}}, {'ruleId': 'no-unused-vars', 'severity': 2, 'message': ""'findCircleNum' is assigned a value but never used."", 'line': 1, 'column': 5, 'nodeType': 'Identifier', 'messageId': 'unusedVar', 'endLine': 1, 'endColumn': 18}, {'ruleId': 'func-names', 'severity': 2, 'message': 'Unexpected unnamed function.', 'line': 1, 'column': 21, 'nodeType': 'FunctionExpression', 'messageId': 'unnamed', 'endLine': 1, 'endColumn': 30}, {'ruleId': 'one-var', 'severity': 2, 'message': ""Combine this with the previous 'let' statement."", 'line': 4, 'column': 5, 'nodeType': 'VariableDeclaration', 'messageId': 'combine', 'endLine': 4, 'endColumn': 61, 'fix': {'range': [67, 76], 'text': ',\n    '}}, {'ruleId': 'prefer-const', 'severity': 2, 'message': ""'visited' is never reassigned. Use 'const' instead."", 'line': 4, 'column': 9, 'nodeType': 'Identifier', 'messageId': 'useConst', 'endLine': 4, 'endColumn': 16, 'fix': {'range': [73, 129], 'text': 'const visited = new Array(isConnected.length).fill(false);'}}, {'ruleId': 'id-length', 'severity': 2, 'message': ""Identifier name 'i' is too short (< 2)."", 'line': 6, 'column': 14, 'nodeType': 'Identifier', 'messageId': 'tooShort', 'endLine': 6, 'endColumn': 15}, {'ruleId': 'no-plusplus', 'severity': 2, 'message': ""Unary operator '++' used."", 'line': 6, 'column': 45, 'nodeType': 'UpdateExpression', 'messageId': 'unexpectedUnaryOp', 'endLine': 6, 'endColumn': 48}, {'ruleId': 'no-plusplus', 'severity': 2, 'message': ""Unary operator '++' used."", 'line': 8, 'column': 13, 'nodeType': 'UpdateExpression', 'messageId': 'unexpectedUnaryOp', 'endLine': 8, 'endColumn': 24}, {'ruleId': 'no-use-before-define', 'severity': 2, 'message': ""'dfs' was used before it was defined."", 'line': 9, 'column': 13, 'nodeType': 'Identifier', 'messageId': 'usedBeforeDefined', 'endLine': 9, 'endColumn': 16}, {'ruleId': 'func-style', 'severity': 2, 'message': 'Expected a function expression.', 'line': 15, 'column': 1, 'nodeType': 'FunctionDeclaration', 'messageId': 'expression', 'endLine': 24, 'endColumn': 2}, {'ruleId': 'id-length', 'severity': 2, 'message': ""Identifier name 'i' is too short (< 2)."", 'line': 15, 'column': 36, 'nodeType': 'Identifier', 'messageId': 'tooShort', 'endLine': 15, 'endColumn': 37}, {'ruleId': 'id-length', 'severity': 2, 'message': ""Identifier name 'j' is too short (< 2)."", 'line': 19, 'column': 14, 'nodeType': 'Identifier', 'messageId': 'tooShort', 'endLine': 19, 'endColumn': 15}, {'ruleId': 'no-plusplus', 'severity': 2, 'message': ""Unary operator '++' used."", 'line': 19, 'column': 45, 'nodeType': 'UpdateExpression', 'messageId': 'unexpectedUnaryOp', 'endLine': 19, 'endColumn': 48}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 1.', 'line': 20, 'column': 35, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 20, 'endColumn': 36}]


Google Closure Compiler Output:

[{'level': 'warning', 'description': 'Using `var` (prefer `const` or `let`).', 'key': 'JSC_VAR', 'source': '/tmp/tmpygm4pwo7', 'line': 1, 'column': 0, 'length': 316, 'context': 'var findCircleNum = function (isConnected) {\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Function must have JSDoc.', 'key': 'JSC_MISSING_JSDOC', 'source': '/tmp/tmpygm4pwo7', 'line': 1, 'column': 20, 'length': 295, 'context': 'var findCircleNum = function (isConnected) {\n                    ^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Function must have JSDoc.', 'key': 'JSC_MISSING_JSDOC', 'source': '/tmp/tmpygm4pwo7', 'line': 15, 'column': 0, 'length': 233, 'context': 'function dfs(isConnected, visited, i) {\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'info', 'description': '0 error(s), 3 warning(s), 72.0% typed'}]"
25,Find Peak Element,"A peak element is an element that is strictly greater than its neighbors.

Given a 0-indexed integer array nums, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.

You may imagine that nums[-1] = nums[n] = -∞. In other words, an element is always considered to be strictly greater than a neighbor that is outside the array.

You must write an algorithm that runs in O(log n) time.","Example 1:

Input: nums = [1,2,3,1]
Output: 2
Explanation: 3 is a peak element and your function should return the index number 2.
Example 2:

Input: nums = [1,2,1,3,5,6,4]
Output: 5
Explanation: Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6.","var findPeakElement = function(nums) {
    var start = 0, end = nums.length - 1;
    while (start < end) {
        var mid = Math.floor((start + end) / 2);
        if (mid === 0) {
            return nums[0] >= nums[1] ? 0 : 1;
        }
        if (mid === end) {
            return nums[end - 1] >= nums[end - 2] ? end - 1 : end - 2;
        }

        if (nums[mid] > nums[mid + 1] && nums[mid] > nums[mid - 1]) {
            return mid;
        }
        if (nums[mid] < nums[mid - 1]) {
            end = mid - 1;
        } else {
            start = mid + 1;
        }
    }
    return start;
};","1 <= nums.length <= 1000
-2^31 <= nums[i] <= 2^31 - 1
nums[i] != nums[i + 1] for all valid i.",Medium,https://leetcode.com/problems/find-peak-element/description/?envType=study-plan-v2&envId=leetcode-75,"/**
 * @param {number[]} nums
 * @return {number}
 */
var findPeakElement = function(nums) {
    
};","ESLint Output:

[{'ruleId': 'no-var', 'severity': 2, 'message': 'Unexpected var, use let or const instead.', 'line': 1, 'column': 1, 'nodeType': 'VariableDeclaration', 'messageId': 'unexpectedVar', 'endLine': 22, 'endColumn': 3, 'fix': {'range': [0, 3], 'text': 'let'}}, {'ruleId': 'no-unused-vars', 'severity': 2, 'message': ""'findPeakElement' is assigned a value but never used."", 'line': 1, 'column': 5, 'nodeType': 'Identifier', 'messageId': 'unusedVar', 'endLine': 1, 'endColumn': 20}, {'ruleId': 'func-names', 'severity': 2, 'message': 'Unexpected unnamed function.', 'line': 1, 'column': 23, 'nodeType': 'FunctionExpression', 'messageId': 'unnamed', 'endLine': 1, 'endColumn': 31}, {'ruleId': 'max-statements', 'severity': 2, 'message': 'Function has too many statements (13). Maximum allowed is 10.', 'line': 1, 'column': 23, 'nodeType': 'FunctionExpression', 'messageId': 'exceed', 'endLine': 22, 'endColumn': 2}, {'ruleId': 'no-var', 'severity': 2, 'message': 'Unexpected var, use let or const instead.', 'line': 2, 'column': 5, 'nodeType': 'VariableDeclaration', 'messageId': 'unexpectedVar', 'endLine': 2, 'endColumn': 42, 'fix': {'range': [43, 46], 'text': 'let'}}, {'ruleId': 'sort-vars', 'severity': 2, 'message': 'Variables within the same declaration block should be sorted alphabetically.', 'line': 2, 'column': 20, 'nodeType': 'VariableDeclarator', 'messageId': 'sortVars', 'endLine': 2, 'endColumn': 41}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 1.', 'line': 2, 'column': 40, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 2, 'endColumn': 41}, {'ruleId': 'one-var', 'severity': 2, 'message': ""Combine this with the previous 'var' statement."", 'line': 4, 'column': 9, 'nodeType': 'VariableDeclaration', 'messageId': 'combine', 'endLine': 4, 'endColumn': 49}, {'ruleId': 'vars-on-top', 'severity': 2, 'message': ""All 'var' declarations must be at the top of the function scope."", 'line': 4, 'column': 9, 'nodeType': 'VariableDeclaration', 'messageId': 'top', 'endLine': 4, 'endColumn': 49}, {'ruleId': 'no-var', 'severity': 2, 'message': 'Unexpected var, use let or const instead.', 'line': 4, 'column': 9, 'nodeType': 'VariableDeclaration', 'messageId': 'unexpectedVar', 'endLine': 4, 'endColumn': 49, 'fix': {'range': [115, 118], 'text': 'let'}}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 2.', 'line': 4, 'column': 46, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 4, 'endColumn': 47}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 0.', 'line': 5, 'column': 21, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 5, 'endColumn': 22}, {'ruleId': 'no-ternary', 'severity': 2, 'message': 'Ternary operator used.', 'line': 6, 'column': 20, 'nodeType': 'ConditionalExpression', 'messageId': 'noTernaryOperator', 'endLine': 6, 'endColumn': 46}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 0.', 'line': 6, 'column': 25, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 6, 'endColumn': 26}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 1.', 'line': 6, 'column': 36, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 6, 'endColumn': 37}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 0.', 'line': 6, 'column': 41, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 6, 'endColumn': 42}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 1.', 'line': 6, 'column': 45, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 6, 'endColumn': 46}, {'ruleId': 'no-ternary', 'severity': 2, 'message': 'Ternary operator used.', 'line': 9, 'column': 20, 'nodeType': 'ConditionalExpression', 'messageId': 'noTernaryOperator', 'endLine': 9, 'endColumn': 70}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 1.', 'line': 9, 'column': 31, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 9, 'endColumn': 32}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 2.', 'line': 9, 'column': 48, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 9, 'endColumn': 49}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 1.', 'line': 9, 'column': 59, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 9, 'endColumn': 60}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 2.', 'line': 9, 'column': 69, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 9, 'endColumn': 70}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 1.', 'line': 12, 'column': 36, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 12, 'endColumn': 37}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 1.', 'line': 12, 'column': 65, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 12, 'endColumn': 66}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 1.', 'line': 15, 'column': 36, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 15, 'endColumn': 37}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 1.', 'line': 16, 'column': 25, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 16, 'endColumn': 26}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 1.', 'line': 18, 'column': 27, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 18, 'endColumn': 28}]


Google Closure Compiler Output:

[{'level': 'warning', 'description': 'Using `var` (prefer `const` or `let`).', 'key': 'JSC_VAR', 'source': '/tmp/tmp4_iqq6s5', 'line': 1, 'column': 0, 'length': 601, 'context': 'var findPeakElement = function(nums) {\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Function must have JSDoc.', 'key': 'JSC_MISSING_JSDOC', 'source': '/tmp/tmp4_iqq6s5', 'line': 1, 'column': 22, 'length': 578, 'context': 'var findPeakElement = function(nums) {\n                      ^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Using `var` (prefer `const` or `let`).', 'key': 'JSC_VAR', 'source': '/tmp/tmp4_iqq6s5', 'line': 2, 'column': 4, 'length': 37, 'context': '    var start = 0, end = nums.length - 1;\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Using `var` (prefer `const` or `let`).', 'key': 'JSC_VAR', 'source': '/tmp/tmp4_iqq6s5', 'line': 4, 'column': 8, 'length': 40, 'context': '        var mid = Math.floor((start + end) / 2);\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'info', 'description': '0 error(s), 4 warning(s), 84.8% typed'}]"
26,Two Sum,"Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.","Example 1:

Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
Example 2:

Input: nums = [3,2,4], target = 6
Output: [1,2]
Example 3:

Input: nums = [3,3], target = 6
Output: [0,1]","var twoSum = function(nums, target) {
    
    let numToIndexMap = {};

    
    for (let i = 0; i < nums.length; i++) {
        
        let diff = target - nums[i];

        
        if (numToIndexMap.hasOwnProperty(diff)) {
            
            return [i, numToIndexMap[diff]];
        }

        
        numToIndexMap[nums[i]] = i;
    }

    
    return null;
};","2 <= nums.length <= 10^4
-10^9 <= nums[i] <= 10^9
-10^9 <= target <= 10^9
Only one valid answer exists.",Easy,https://leetcode.com/problems/two-sum/description/?source=submission-noac,"/**
 * @param {number[]} nums
 * @param {number} target
 * @return {number[]}
 */
var twoSum = function(nums, target) {
    
};","ESLint Output:

[{'ruleId': 'no-var', 'severity': 2, 'message': 'Unexpected var, use let or const instead.', 'line': 1, 'column': 1, 'nodeType': 'VariableDeclaration', 'messageId': 'unexpectedVar', 'endLine': 22, 'endColumn': 3, 'fix': {'range': [0, 3], 'text': 'let'}}, {'ruleId': 'no-unused-vars', 'severity': 2, 'message': ""'twoSum' is assigned a value but never used."", 'line': 1, 'column': 5, 'nodeType': 'Identifier', 'messageId': 'unusedVar', 'endLine': 1, 'endColumn': 11}, {'ruleId': 'func-names', 'severity': 2, 'message': 'Unexpected unnamed function.', 'line': 1, 'column': 14, 'nodeType': 'FunctionExpression', 'messageId': 'unnamed', 'endLine': 1, 'endColumn': 22}, {'ruleId': 'prefer-const', 'severity': 2, 'message': ""'numToIndexMap' is never reassigned. Use 'const' instead."", 'line': 3, 'column': 9, 'nodeType': 'Identifier', 'messageId': 'useConst', 'endLine': 3, 'endColumn': 22, 'fix': {'range': [49, 72], 'text': 'const numToIndexMap = {};'}}, {'ruleId': 'id-length', 'severity': 2, 'message': ""Identifier name 'i' is too short (< 2)."", 'line': 6, 'column': 14, 'nodeType': 'Identifier', 'messageId': 'tooShort', 'endLine': 6, 'endColumn': 15}, {'ruleId': 'no-plusplus', 'severity': 2, 'message': ""Unary operator '++' used."", 'line': 6, 'column': 38, 'nodeType': 'UpdateExpression', 'messageId': 'unexpectedUnaryOp', 'endLine': 6, 'endColumn': 41}, {'ruleId': 'prefer-const', 'severity': 2, 'message': ""'diff' is never reassigned. Use 'const' instead."", 'line': 8, 'column': 13, 'nodeType': 'Identifier', 'messageId': 'useConst', 'endLine': 8, 'endColumn': 17, 'fix': {'range': [145, 173], 'text': 'const diff = target - nums[i];'}}, {'ruleId': 'no-prototype-builtins', 'severity': 2, 'message': ""Do not access Object.prototype method 'hasOwnProperty' from target object."", 'line': 11, 'column': 27, 'nodeType': 'CallExpression', 'messageId': 'prototypeBuildIn', 'endLine': 11, 'endColumn': 41, 'suggestions': [{'messageId': 'callObjectPrototype', 'data': {'prop': 'hasOwnProperty'}, 'fix': {'range': [199, 228], 'text': 'Object.prototype.hasOwnProperty.call(numToIndexMap, '}, 'desc': 'Call Object.prototype.hasOwnProperty explicitly.'}]}]


Google Closure Compiler Output:

[{'level': 'warning', 'description': 'Using `var` (prefer `const` or `let`).', 'key': 'JSC_VAR', 'source': '/tmp/tmp15bdd01p', 'line': 1, 'column': 0, 'length': 393, 'context': 'var twoSum = function(nums, target) {\r\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Function must have JSDoc.', 'key': 'JSC_MISSING_JSDOC', 'source': '/tmp/tmp15bdd01p', 'line': 1, 'column': 13, 'length': 379, 'context': 'var twoSum = function(nums, target) {\r\n             ^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'info', 'description': '0 error(s), 2 warning(s), 80.7% typed'}]"
27,Valid Anagram,"Given two strings s and t, return true if t is an anagram of s, and false otherwise.","Example 1:

Input: s = ""anagram"", t = ""nagaram""

Output: true

Example 2:

Input: s = ""rat"", t = ""car""

Output: false","var isAnagram = function(s, t) {
    if (s.length !== t.length) {
        return false;
    }
    
    var freq = new Array(26).fill(0);
    for (var i = 0; i < s.length; i++) {
        freq[s.charCodeAt(i) - 'a'.charCodeAt(0)]++;
        freq[t.charCodeAt(i) - 'a'.charCodeAt(0)]--;
    }
    
    for (var i = 0; i < freq.length; i++) {
        if (freq[i] !== 0) {
            return false;
        }
    }
    
    return true;
};","1 <= s.length, t.length <= 5 * 10^4
s and t consist of lowercase English letters.",Easy,https://leetcode.com/problems/valid-anagram/description/,"/**
 * @param {string} s
 * @param {string} t
 * @return {boolean}
 */
var isAnagram = function(s, t) {
    
};","ESLint Output:

[{'ruleId': 'no-var', 'severity': 2, 'message': 'Unexpected var, use let or const instead.', 'line': 1, 'column': 1, 'nodeType': 'VariableDeclaration', 'messageId': 'unexpectedVar', 'endLine': 19, 'endColumn': 3, 'fix': {'range': [0, 3], 'text': 'let'}}, {'ruleId': 'no-unused-vars', 'severity': 2, 'message': ""'isAnagram' is assigned a value but never used."", 'line': 1, 'column': 5, 'nodeType': 'Identifier', 'messageId': 'unusedVar', 'endLine': 1, 'endColumn': 14}, {'ruleId': 'func-names', 'severity': 2, 'message': 'Unexpected unnamed function.', 'line': 1, 'column': 17, 'nodeType': 'FunctionExpression', 'messageId': 'unnamed', 'endLine': 1, 'endColumn': 25}, {'ruleId': 'id-length', 'severity': 2, 'message': ""Identifier name 's' is too short (< 2)."", 'line': 1, 'column': 26, 'nodeType': 'Identifier', 'messageId': 'tooShort', 'endLine': 1, 'endColumn': 27}, {'ruleId': 'id-length', 'severity': 2, 'message': ""Identifier name 't' is too short (< 2)."", 'line': 1, 'column': 29, 'nodeType': 'Identifier', 'messageId': 'tooShort', 'endLine': 1, 'endColumn': 30}, {'ruleId': 'vars-on-top', 'severity': 2, 'message': ""All 'var' declarations must be at the top of the function scope."", 'line': 6, 'column': 5, 'nodeType': 'VariableDeclaration', 'messageId': 'top', 'endLine': 6, 'endColumn': 38}, {'ruleId': 'no-var', 'severity': 2, 'message': 'Unexpected var, use let or const instead.', 'line': 6, 'column': 5, 'nodeType': 'VariableDeclaration', 'messageId': 'unexpectedVar', 'endLine': 6, 'endColumn': 38, 'fix': {'range': [108, 111], 'text': 'let'}}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 26.', 'line': 6, 'column': 26, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 6, 'endColumn': 28}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 0.', 'line': 6, 'column': 35, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 6, 'endColumn': 36}, {'ruleId': 'one-var', 'severity': 2, 'message': ""Combine this with the previous 'var' statement."", 'line': 7, 'column': 10, 'nodeType': 'VariableDeclaration', 'messageId': 'combine', 'endLine': 7, 'endColumn': 19}, {'ruleId': 'vars-on-top', 'severity': 2, 'message': ""All 'var' declarations must be at the top of the function scope."", 'line': 7, 'column': 10, 'nodeType': 'VariableDeclaration', 'messageId': 'top', 'endLine': 7, 'endColumn': 19}, {'ruleId': 'no-var', 'severity': 2, 'message': 'Unexpected var, use let or const instead.', 'line': 7, 'column': 10, 'nodeType': 'VariableDeclaration', 'messageId': 'unexpectedVar', 'endLine': 7, 'endColumn': 19}, {'ruleId': 'id-length', 'severity': 2, 'message': ""Identifier name 'i' is too short (< 2)."", 'line': 7, 'column': 14, 'nodeType': 'Identifier', 'messageId': 'tooShort', 'endLine': 7, 'endColumn': 15}, {'ruleId': 'block-scoped-var', 'severity': 2, 'message': ""'i' declared on line 12 column 14 is used outside of binding context."", 'line': 7, 'column': 14, 'nodeType': 'Identifier', 'messageId': 'outOfScope', 'endLine': 7, 'endColumn': 15}, {'ruleId': 'block-scoped-var', 'severity': 2, 'message': ""'i' declared on line 12 column 14 is used outside of binding context."", 'line': 7, 'column': 21, 'nodeType': 'Identifier', 'messageId': 'outOfScope', 'endLine': 7, 'endColumn': 22}, {'ruleId': 'no-plusplus', 'severity': 2, 'message': ""Unary operator '++' used."", 'line': 7, 'column': 35, 'nodeType': 'UpdateExpression', 'messageId': 'unexpectedUnaryOp', 'endLine': 7, 'endColumn': 38}, {'ruleId': 'block-scoped-var', 'severity': 2, 'message': ""'i' declared on line 12 column 14 is used outside of binding context."", 'line': 7, 'column': 35, 'nodeType': 'Identifier', 'messageId': 'outOfScope', 'endLine': 7, 'endColumn': 36}, {'ruleId': 'no-plusplus', 'severity': 2, 'message': ""Unary operator '++' used."", 'line': 8, 'column': 9, 'nodeType': 'UpdateExpression', 'messageId': 'unexpectedUnaryOp', 'endLine': 8, 'endColumn': 52}, {'ruleId': 'block-scoped-var', 'severity': 2, 'message': ""'i' declared on line 12 column 14 is used outside of binding context."", 'line': 8, 'column': 27, 'nodeType': 'Identifier', 'messageId': 'outOfScope', 'endLine': 8, 'endColumn': 28}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 0.', 'line': 8, 'column': 47, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 8, 'endColumn': 48}, {'ruleId': 'no-plusplus', 'severity': 2, 'message': ""Unary operator '--' used."", 'line': 9, 'column': 9, 'nodeType': 'UpdateExpression', 'messageId': 'unexpectedUnaryOp', 'endLine': 9, 'endColumn': 52}, {'ruleId': 'block-scoped-var', 'severity': 2, 'message': ""'i' declared on line 12 column 14 is used outside of binding context."", 'line': 9, 'column': 27, 'nodeType': 'Identifier', 'messageId': 'outOfScope', 'endLine': 9, 'endColumn': 28}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 0.', 'line': 9, 'column': 47, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 9, 'endColumn': 48}, {'ruleId': 'one-var', 'severity': 2, 'message': ""Combine this with the previous 'var' statement."", 'line': 12, 'column': 10, 'nodeType': 'VariableDeclaration', 'messageId': 'combine', 'endLine': 12, 'endColumn': 19}, {'ruleId': 'vars-on-top', 'severity': 2, 'message': ""All 'var' declarations must be at the top of the function scope."", 'line': 12, 'column': 10, 'nodeType': 'VariableDeclaration', 'messageId': 'top', 'endLine': 12, 'endColumn': 19}, {'ruleId': 'no-var', 'severity': 2, 'message': 'Unexpected var, use let or const instead.', 'line': 12, 'column': 10, 'nodeType': 'VariableDeclaration', 'messageId': 'unexpectedVar', 'endLine': 12, 'endColumn': 19}, {'ruleId': 'no-redeclare', 'severity': 2, 'message': ""'i' is already defined."", 'line': 12, 'column': 14, 'nodeType': 'Identifier', 'messageId': 'redeclared', 'endLine': 12, 'endColumn': 15}, {'ruleId': 'block-scoped-var', 'severity': 2, 'message': ""'i' declared on line 7 column 14 is used outside of binding context."", 'line': 12, 'column': 14, 'nodeType': 'Identifier', 'messageId': 'outOfScope', 'endLine': 12, 'endColumn': 15}, {'ruleId': 'id-length', 'severity': 2, 'message': ""Identifier name 'i' is too short (< 2)."", 'line': 12, 'column': 14, 'nodeType': 'Identifier', 'messageId': 'tooShort', 'endLine': 12, 'endColumn': 15}, {'ruleId': 'block-scoped-var', 'severity': 2, 'message': ""'i' declared on line 7 column 14 is used outside of binding context."", 'line': 12, 'column': 21, 'nodeType': 'Identifier', 'messageId': 'outOfScope', 'endLine': 12, 'endColumn': 22}, {'ruleId': 'block-scoped-var', 'severity': 2, 'message': ""'i' declared on line 7 column 14 is used outside of binding context."", 'line': 12, 'column': 38, 'nodeType': 'Identifier', 'messageId': 'outOfScope', 'endLine': 12, 'endColumn': 39}, {'ruleId': 'no-plusplus', 'severity': 2, 'message': ""Unary operator '++' used."", 'line': 12, 'column': 38, 'nodeType': 'UpdateExpression', 'messageId': 'unexpectedUnaryOp', 'endLine': 12, 'endColumn': 41}, {'ruleId': 'block-scoped-var', 'severity': 2, 'message': ""'i' declared on line 7 column 14 is used outside of binding context."", 'line': 13, 'column': 18, 'nodeType': 'Identifier', 'messageId': 'outOfScope', 'endLine': 13, 'endColumn': 19}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 0.', 'line': 13, 'column': 25, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 13, 'endColumn': 26}]


Google Closure Compiler Output:

[{'level': 'warning', 'description': 'Using `var` (prefer `const` or `let`).', 'key': 'JSC_VAR', 'source': '/tmp/tmpy92e52rh', 'line': 1, 'column': 0, 'length': 452, 'context': 'var isAnagram = function(s, t) {\r\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Function must have JSDoc.', 'key': 'JSC_MISSING_JSDOC', 'source': '/tmp/tmpy92e52rh', 'line': 1, 'column': 16, 'length': 435, 'context': 'var isAnagram = function(s, t) {\r\n                ^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Using `var` (prefer `const` or `let`).', 'key': 'JSC_VAR', 'source': '/tmp/tmpy92e52rh', 'line': 6, 'column': 4, 'length': 33, 'context': '    var freq = new Array(26).fill(0);\r\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Using `var` (prefer `const` or `let`).', 'key': 'JSC_VAR', 'source': '/tmp/tmpy92e52rh', 'line': 7, 'column': 9, 'length': 9, 'context': '    for (var i = 0; i < s.length; i++) {\r\n         ^^^^^^^^^'}, {'level': 'warning', 'description': 'Using `var` (prefer `const` or `let`).', 'key': 'JSC_VAR', 'source': '/tmp/tmpy92e52rh', 'line': 12, 'column': 9, 'length': 9, 'context': '    for (var i = 0; i < freq.length; i++) {\r\n         ^^^^^^^^^'}, {'level': 'info', 'description': '0 error(s), 5 warning(s), 78.1% typed'}]"
28,Roman to Integer,"Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.

Symbol       Value
I             1
V             5
X             10
L             50
C             100
D             500
M             1000
For example, 2 is written as II in Roman numeral, just two ones added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.

Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:

I can be placed before V (5) and X (10) to make 4 and 9. 
X can be placed before L (50) and C (100) to make 40 and 90. 
C can be placed before D (500) and M (1000) to make 400 and 900.
Given a roman numeral, convert it to an integer.","Example 1:

Input: s = ""III""
Output: 3
Explanation: III = 3.
Example 2:

Input: s = ""LVIII""
Output: 58
Explanation: L = 50, V= 5, III = 3.
Example 3:

Input: s = ""MCMXCIV""
Output: 1994
Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.","var romanToInt = function(s) {
    let res = 0;
    const roman = {
        'I': 1,
        'V': 5,
        'X': 10,
        'L': 50,
        'C': 100,
        'D': 500,
        'M': 1000
    };

    for (let i = 0; i < s.length - 1; i++) {
        if (roman[s[i]] < roman[s[i + 1]]) {
            res -= roman[s[i]];
        } else {
            res += roman[s[i]];
        }
    }

    return res + roman[s[s.length - 1]];    
};","1 <= s.length <= 15
s contains only the characters ('I', 'V', 'X', 'L', 'C', 'D', 'M').
It is guaranteed that s is a valid roman numeral in the range [1, 3999].",Easy,https://leetcode.com/problems/roman-to-integer/description/,"/**
 * @param {string} s
 * @return {number}
 */
var romanToInt = function(s) {
    
};","ESLint Output:

[{'ruleId': 'no-var', 'severity': 2, 'message': 'Unexpected var, use let or const instead.', 'line': 1, 'column': 1, 'nodeType': 'VariableDeclaration', 'messageId': 'unexpectedVar', 'endLine': 22, 'endColumn': 3, 'fix': {'range': [0, 3], 'text': 'let'}}, {'ruleId': 'no-unused-vars', 'severity': 2, 'message': ""'romanToInt' is assigned a value but never used."", 'line': 1, 'column': 5, 'nodeType': 'Identifier', 'messageId': 'unusedVar', 'endLine': 1, 'endColumn': 15}, {'ruleId': 'func-names', 'severity': 2, 'message': 'Unexpected unnamed function.', 'line': 1, 'column': 18, 'nodeType': 'FunctionExpression', 'messageId': 'unnamed', 'endLine': 1, 'endColumn': 26}, {'ruleId': 'id-length', 'severity': 2, 'message': ""Identifier name 's' is too short (< 2)."", 'line': 1, 'column': 27, 'nodeType': 'Identifier', 'messageId': 'tooShort', 'endLine': 1, 'endColumn': 28}, {'ruleId': 'sort-keys', 'severity': 2, 'message': ""Expected object keys to be in ascending order. 'L' should be before 'X'."", 'line': 7, 'column': 9, 'nodeType': 'Property', 'messageId': 'sortKeys', 'endLine': 7, 'endColumn': 12}, {'ruleId': 'sort-keys', 'severity': 2, 'message': ""Expected object keys to be in ascending order. 'C' should be before 'L'."", 'line': 8, 'column': 9, 'nodeType': 'Property', 'messageId': 'sortKeys', 'endLine': 8, 'endColumn': 12}, {'ruleId': 'id-length', 'severity': 2, 'message': ""Identifier name 'i' is too short (< 2)."", 'line': 13, 'column': 14, 'nodeType': 'Identifier', 'messageId': 'tooShort', 'endLine': 13, 'endColumn': 15}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 1.', 'line': 13, 'column': 36, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 13, 'endColumn': 37}, {'ruleId': 'no-plusplus', 'severity': 2, 'message': ""Unary operator '++' used."", 'line': 13, 'column': 39, 'nodeType': 'UpdateExpression', 'messageId': 'unexpectedUnaryOp', 'endLine': 13, 'endColumn': 42}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 1.', 'line': 14, 'column': 39, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 14, 'endColumn': 40}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 1.', 'line': 21, 'column': 37, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 21, 'endColumn': 38}]


Google Closure Compiler Output:

[{'level': 'warning', 'description': 'Using `var` (prefer `const` or `let`).', 'key': 'JSC_VAR', 'source': '/tmp/tmp14kpkot3', 'line': 1, 'column': 0, 'length': 452, 'context': 'var romanToInt = function(s) {\r\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Function must have JSDoc.', 'key': 'JSC_MISSING_JSDOC', 'source': '/tmp/tmp14kpkot3', 'line': 1, 'column': 17, 'length': 434, 'context': 'var romanToInt = function(s) {\r\n                 ^^^^^^^^^^^^^^'}, {'level': 'info', 'description': '0 error(s), 2 warning(s), 69.5% typed'}]"
29,Palindrome Number,"Given an integer x, return true if x is a palindrome, and false otherwise.","Example 1:

Input: x = 121
Output: true
Explanation: 121 reads as 121 from left to right and from right to left.
Example 2:

Input: x = -121
Output: false
Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.
Example 3:

Input: x = 10
Output: false
Explanation: Reads 01 from right to left. Therefore it is not a palindrome.","var isPalindrome = function(x) {
    if (x < 0) {
        return false;
    }

    let reverse = 0;
    let xcopy = x;

    while (x > 0) {
        reverse = (reverse * 10) + (x % 10);
        x = Math.floor(x / 10);
    }

    return reverse === xcopy;    
};",-2^31 <= x <= 2^31 - 1,Easy,https://leetcode.com/problems/palindrome-number/description/,"/**
 * @param {number} x
 * @return {boolean}
 */
var isPalindrome = function(x) {
    
};","ESLint Output:

[{'ruleId': 'no-var', 'severity': 2, 'message': 'Unexpected var, use let or const instead.', 'line': 1, 'column': 1, 'nodeType': 'VariableDeclaration', 'messageId': 'unexpectedVar', 'endLine': 15, 'endColumn': 3, 'fix': {'range': [0, 3], 'text': 'let'}}, {'ruleId': 'no-unused-vars', 'severity': 2, 'message': ""'isPalindrome' is assigned a value but never used."", 'line': 1, 'column': 5, 'nodeType': 'Identifier', 'messageId': 'unusedVar', 'endLine': 1, 'endColumn': 17}, {'ruleId': 'func-names', 'severity': 2, 'message': 'Unexpected unnamed function.', 'line': 1, 'column': 20, 'nodeType': 'FunctionExpression', 'messageId': 'unnamed', 'endLine': 1, 'endColumn': 28}, {'ruleId': 'id-length', 'severity': 2, 'message': ""Identifier name 'x' is too short (< 2)."", 'line': 1, 'column': 29, 'nodeType': 'Identifier', 'messageId': 'tooShort', 'endLine': 1, 'endColumn': 30}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 0.', 'line': 2, 'column': 13, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 2, 'endColumn': 14}, {'ruleId': 'one-var', 'severity': 2, 'message': ""Combine this with the previous 'let' statement."", 'line': 7, 'column': 5, 'nodeType': 'VariableDeclaration', 'messageId': 'combine', 'endLine': 7, 'endColumn': 19, 'fix': {'range': [103, 113], 'text': ',\r\n    '}}, {'ruleId': 'prefer-const', 'severity': 2, 'message': ""'xcopy' is never reassigned. Use 'const' instead."", 'line': 7, 'column': 9, 'nodeType': 'Identifier', 'messageId': 'useConst', 'endLine': 7, 'endColumn': 14, 'fix': {'range': [110, 124], 'text': 'const xcopy = x;'}}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 0.', 'line': 9, 'column': 16, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 9, 'endColumn': 17}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 10.', 'line': 10, 'column': 30, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 10, 'endColumn': 32}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 10.', 'line': 10, 'column': 41, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 10, 'endColumn': 43}, {'ruleId': 'no-param-reassign', 'severity': 2, 'message': ""Assignment to function parameter 'x'."", 'line': 11, 'column': 9, 'nodeType': 'Identifier', 'messageId': 'assignmentToFunctionParam', 'endLine': 11, 'endColumn': 10}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 10.', 'line': 11, 'column': 28, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 11, 'endColumn': 30}]


Google Closure Compiler Output:

[{'level': 'warning', 'description': 'Using `var` (prefer `const` or `let`).', 'key': 'JSC_VAR', 'source': '/tmp/tmpq6l8a99e', 'line': 1, 'column': 0, 'length': 274, 'context': 'var isPalindrome = function(x) {\r\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Function must have JSDoc.', 'key': 'JSC_MISSING_JSDOC', 'source': '/tmp/tmpq6l8a99e', 'line': 1, 'column': 19, 'length': 254, 'context': 'var isPalindrome = function(x) {\r\n                   ^^^^^^^^^^^^^^'}, {'level': 'info', 'description': '0 error(s), 2 warning(s), 78.5% typed'}]"
30,Fizz Buzz,"Given an integer n, return a string array answer (1-indexed) where:

answer[i] == ""FizzBuzz"" if i is divisible by 3 and 5.
answer[i] == ""Fizz"" if i is divisible by 3.
answer[i] == ""Buzz"" if i is divisible by 5.
answer[i] == i (as a string) if none of the above conditions are true.","Example 1:

Input: n = 3
Output: [""1"",""2"",""Fizz""]
Example 2:

Input: n = 5
Output: [""1"",""2"",""Fizz"",""4"",""Buzz""]
Example 3:

Input: n = 15
Output: [""1"",""2"",""Fizz"",""4"",""Buzz"",""Fizz"",""7"",""8"",""Fizz"",""Buzz"",""11"",""Fizz"",""13"",""14"",""FizzBuzz""]","/**
 * @param {number} n
 * @return {string[]}
 */
var fizzBuzz = function(n) {
    var ans = [];

    for (var i = 1; i <= n; i++) {
        if (i % 3 === 0 && i % 5 === 0) {
            ans.push(""FizzBuzz"");
        } else if (i % 3 === 0) {
            ans.push(""Fizz"");
        } else if (i % 5 === 0) {
            ans.push(""Buzz"");
        } else {
            ans.push(i.toString());
        }
    }

    return ans;
};",1 <= n <= 10^4,Easy,https://leetcode.com/problems/fizz-buzz/description/,"/**
 * @param {number} n
 * @return {string[]}
 */
var fizzBuzz = function(n) {
    
};","ESLint Output:

[{'ruleId': 'no-var', 'severity': 2, 'message': 'Unexpected var, use let or const instead.', 'line': 5, 'column': 1, 'nodeType': 'VariableDeclaration', 'messageId': 'unexpectedVar', 'endLine': 21, 'endColumn': 3, 'fix': {'range': [51, 54], 'text': 'let'}}, {'ruleId': 'no-unused-vars', 'severity': 2, 'message': ""'fizzBuzz' is assigned a value but never used."", 'line': 5, 'column': 5, 'nodeType': 'Identifier', 'messageId': 'unusedVar', 'endLine': 5, 'endColumn': 13}, {'ruleId': 'func-names', 'severity': 2, 'message': 'Unexpected unnamed function.', 'line': 5, 'column': 16, 'nodeType': 'FunctionExpression', 'messageId': 'unnamed', 'endLine': 5, 'endColumn': 24}, {'ruleId': 'id-length', 'severity': 2, 'message': ""Identifier name 'n' is too short (< 2)."", 'line': 5, 'column': 25, 'nodeType': 'Identifier', 'messageId': 'tooShort', 'endLine': 5, 'endColumn': 26}, {'ruleId': 'no-var', 'severity': 2, 'message': 'Unexpected var, use let or const instead.', 'line': 6, 'column': 5, 'nodeType': 'VariableDeclaration', 'messageId': 'unexpectedVar', 'endLine': 6, 'endColumn': 18, 'fix': {'range': [84, 87], 'text': 'let'}}, {'ruleId': 'one-var', 'severity': 2, 'message': ""Combine this with the previous 'var' statement."", 'line': 8, 'column': 10, 'nodeType': 'VariableDeclaration', 'messageId': 'combine', 'endLine': 8, 'endColumn': 19}, {'ruleId': 'vars-on-top', 'severity': 2, 'message': ""All 'var' declarations must be at the top of the function scope."", 'line': 8, 'column': 10, 'nodeType': 'VariableDeclaration', 'messageId': 'top', 'endLine': 8, 'endColumn': 19}, {'ruleId': 'no-var', 'severity': 2, 'message': 'Unexpected var, use let or const instead.', 'line': 8, 'column': 10, 'nodeType': 'VariableDeclaration', 'messageId': 'unexpectedVar', 'endLine': 8, 'endColumn': 19, 'fix': {'range': [108, 111], 'text': 'let'}}, {'ruleId': 'id-length', 'severity': 2, 'message': ""Identifier name 'i' is too short (< 2)."", 'line': 8, 'column': 14, 'nodeType': 'Identifier', 'messageId': 'tooShort', 'endLine': 8, 'endColumn': 15}, {'ruleId': 'no-plusplus', 'severity': 2, 'message': ""Unary operator '++' used."", 'line': 8, 'column': 29, 'nodeType': 'UpdateExpression', 'messageId': 'unexpectedUnaryOp', 'endLine': 8, 'endColumn': 32}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 3.', 'line': 9, 'column': 17, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 9, 'endColumn': 18}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 0.', 'line': 9, 'column': 23, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 9, 'endColumn': 24}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 5.', 'line': 9, 'column': 32, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 9, 'endColumn': 33}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 0.', 'line': 9, 'column': 38, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 9, 'endColumn': 39}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 3.', 'line': 11, 'column': 24, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 11, 'endColumn': 25}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 0.', 'line': 11, 'column': 30, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 11, 'endColumn': 31}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 5.', 'line': 13, 'column': 24, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 13, 'endColumn': 25}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 0.', 'line': 13, 'column': 30, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 13, 'endColumn': 31}]


Google Closure Compiler Output:

[{'level': 'warning', 'description': 'Bad type annotation. expected closing } See https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler for more information.', 'key': 'JSC_TYPE_PARSE_ERROR', 'source': '/tmp/tmppnc97yce', 'line': 3, 'column': 18, 'context': ' * @return {string[]}\n                  ^'}, {'level': 'warning', 'description': 'Using `var` (prefer `const` or `let`).', 'key': 'JSC_VAR', 'source': '/tmp/tmppnc97yce', 'line': 5, 'column': 0, 'length': 375, 'context': 'var fizzBuzz = function(n) {\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Using `var` (prefer `const` or `let`).', 'key': 'JSC_VAR', 'source': '/tmp/tmppnc97yce', 'line': 6, 'column': 4, 'length': 13, 'context': '    var ans = [];\n    ^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Using `var` (prefer `const` or `let`).', 'key': 'JSC_VAR', 'source': '/tmp/tmppnc97yce', 'line': 8, 'column': 9, 'length': 9, 'context': '    for (var i = 1; i <= n; i++) {\n         ^^^^^^^^^'}, {'level': 'warning', 'description': 'inconsistent return type\nfound   : Array<?>\nrequired: string', 'key': 'JSC_TYPE_MISMATCH', 'source': '/tmp/tmppnc97yce', 'line': 20, 'column': 11, 'length': 3, 'context': '    return ans;\n           ^^^'}, {'level': 'info', 'description': '0 error(s), 5 warning(s), 100.0% typed'}]"
31,Majority Element,"Given an array nums of size n, return the majority element.

The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.","Example 1:

Input: nums = [3,2,3]
Output: 3
Example 2:

Input: nums = [2,2,1,1,1,2,2]
Output: 2","/**
 * @param {number[]} nums
 * @return {number}
 */
var majorityElement = function(nums) {
    const hash = {};
    let res = 0;
    let majority = 0;

    for (let n of nums) {
        hash[n] = 1 + (hash[n] || 0);
        if (hash[n] > majority) {
            res = n;
            majority = hash[n];
        }
    }

    return res;    
};","n == nums.length
1 <= n <= 5 * 10^4
-10^9 <= nums[i] <= 10^9",Easy,https://leetcode.com/problems/majority-element/description/,"/**
 * @param {number[]} nums
 * @return {number}
 */
var majorityElement = function(nums) {
    
};","ESLint Output:

[{'ruleId': 'no-var', 'severity': 2, 'message': 'Unexpected var, use let or const instead.', 'line': 5, 'column': 1, 'nodeType': 'VariableDeclaration', 'messageId': 'unexpectedVar', 'endLine': 19, 'endColumn': 3, 'fix': {'range': [58, 61], 'text': 'let'}}, {'ruleId': 'no-unused-vars', 'severity': 2, 'message': ""'majorityElement' is assigned a value but never used."", 'line': 5, 'column': 5, 'nodeType': 'Identifier', 'messageId': 'unusedVar', 'endLine': 5, 'endColumn': 20}, {'ruleId': 'func-names', 'severity': 2, 'message': 'Unexpected unnamed function.', 'line': 5, 'column': 23, 'nodeType': 'FunctionExpression', 'messageId': 'unnamed', 'endLine': 5, 'endColumn': 31}, {'ruleId': 'one-var', 'severity': 2, 'message': ""Combine this with the previous 'let' statement."", 'line': 8, 'column': 5, 'nodeType': 'VariableDeclaration', 'messageId': 'combine', 'endLine': 8, 'endColumn': 22, 'fix': {'range': [135, 145], 'text': ',\r\n    '}}, {'ruleId': 'id-length', 'severity': 2, 'message': ""Identifier name 'n' is too short (< 2)."", 'line': 10, 'column': 14, 'nodeType': 'Identifier', 'messageId': 'tooShort', 'endLine': 10, 'endColumn': 15}, {'ruleId': 'prefer-const', 'severity': 2, 'message': ""'n' is never reassigned. Use 'const' instead."", 'line': 10, 'column': 14, 'nodeType': 'Identifier', 'messageId': 'useConst', 'endLine': 10, 'endColumn': 15, 'fix': {'range': [172, 177], 'text': 'const n'}}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 1.', 'line': 11, 'column': 19, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 11, 'endColumn': 20}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 0.', 'line': 11, 'column': 35, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 11, 'endColumn': 36}]


Google Closure Compiler Output:

[{'level': 'warning', 'description': 'Bad type annotation. expected closing } See https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler for more information.', 'key': 'JSC_TYPE_PARSE_ERROR', 'source': '/tmp/tmpu9x33s2n', 'line': 2, 'column': 17, 'context': ' * @param {number[]} nums\r\n                 ^'}, {'level': 'warning', 'description': 'Bad type annotation. expecting a variable name in a @param tag. See https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler for more information.', 'key': 'JSC_TYPE_PARSE_ERROR', 'source': '/tmp/tmpu9x33s2n', 'line': 2, 'column': 17, 'context': ' * @param {number[]} nums\r\n                 ^'}, {'level': 'warning', 'description': 'Using `var` (prefer `const` or `let`).', 'key': 'JSC_VAR', 'source': '/tmp/tmpu9x33s2n', 'line': 5, 'column': 0, 'length': 304, 'context': 'var majorityElement = function(nums) {\r\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Parameter must have JSDoc.', 'key': 'JSC_MISSING_PARAMETER_JSDOC', 'source': '/tmp/tmpu9x33s2n', 'line': 5, 'column': 31, 'length': 4, 'context': 'var majorityElement = function(nums) {\r\n                               ^^^^'}, {'level': 'info', 'description': '0 error(s), 4 warning(s), 47.8% typed'}]"
32,First Unique Character in a String,"Given a string s, find the first non-repeating character in it and return its index. If it does not exist, return -1.","Example 1:

Input: s = ""leetcode""

Output: 0

Explanation:

The character 'l' at index 0 is the first character that does not occur at any other index.

Example 2:

Input: s = ""loveleetcode""

Output: 2

Example 3:

Input: s = ""aabb""

Output: -1","
var firstUniqChar = function(s) {
    let mp = {};

    for (let a of s) {
        mp[a] = (mp[a] || 0) + 1;
    }

    for (let i = 0; i < s.length; i++) {
        if (mp[s[i]] === 1) {
            return i;
        }
    }

    return -1;
};","1 <= s.length <= 10^5
s consists of only lowercase English letters.",Easy,https://leetcode.com/problems/first-unique-character-in-a-string/description/,"/**
 * @param {string} s
 * @return {number}
 */
var firstUniqChar = function(s) {
    
};","ESLint Output:

[{'ruleId': 'no-var', 'severity': 2, 'message': 'Unexpected var, use let or const instead.', 'line': 2, 'column': 1, 'nodeType': 'VariableDeclaration', 'messageId': 'unexpectedVar', 'endLine': 16, 'endColumn': 3, 'fix': {'range': [2, 5], 'text': 'let'}}, {'ruleId': 'no-unused-vars', 'severity': 2, 'message': ""'firstUniqChar' is assigned a value but never used."", 'line': 2, 'column': 5, 'nodeType': 'Identifier', 'messageId': 'unusedVar', 'endLine': 2, 'endColumn': 18}, {'ruleId': 'func-names', 'severity': 2, 'message': 'Unexpected unnamed function.', 'line': 2, 'column': 21, 'nodeType': 'FunctionExpression', 'messageId': 'unnamed', 'endLine': 2, 'endColumn': 29}, {'ruleId': 'id-length', 'severity': 2, 'message': ""Identifier name 's' is too short (< 2)."", 'line': 2, 'column': 30, 'nodeType': 'Identifier', 'messageId': 'tooShort', 'endLine': 2, 'endColumn': 31}, {'ruleId': 'prefer-const', 'severity': 2, 'message': ""'mp' is never reassigned. Use 'const' instead."", 'line': 3, 'column': 9, 'nodeType': 'Identifier', 'messageId': 'useConst', 'endLine': 3, 'endColumn': 11, 'fix': {'range': [41, 53], 'text': 'const mp = {};'}}, {'ruleId': 'id-length', 'severity': 2, 'message': ""Identifier name 'a' is too short (< 2)."", 'line': 5, 'column': 14, 'nodeType': 'Identifier', 'messageId': 'tooShort', 'endLine': 5, 'endColumn': 15}, {'ruleId': 'prefer-const', 'severity': 2, 'message': ""'a' is never reassigned. Use 'const' instead."", 'line': 5, 'column': 14, 'nodeType': 'Identifier', 'messageId': 'useConst', 'endLine': 5, 'endColumn': 15, 'fix': {'range': [66, 71], 'text': 'const a'}}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 0.', 'line': 6, 'column': 27, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 6, 'endColumn': 28}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 1.', 'line': 6, 'column': 32, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 6, 'endColumn': 33}, {'ruleId': 'id-length', 'severity': 2, 'message': ""Identifier name 'i' is too short (< 2)."", 'line': 9, 'column': 14, 'nodeType': 'Identifier', 'messageId': 'tooShort', 'endLine': 9, 'endColumn': 15}, {'ruleId': 'no-plusplus', 'severity': 2, 'message': ""Unary operator '++' used."", 'line': 9, 'column': 35, 'nodeType': 'UpdateExpression', 'messageId': 'unexpectedUnaryOp', 'endLine': 9, 'endColumn': 38}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 1.', 'line': 10, 'column': 26, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 10, 'endColumn': 27}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: -1.', 'line': 15, 'column': 12, 'nodeType': 'UnaryExpression', 'messageId': 'noMagic', 'endLine': 15, 'endColumn': 14}]


Google Closure Compiler Output:

[{'level': 'warning', 'description': 'Using `var` (prefer `const` or `let`).', 'key': 'JSC_VAR', 'source': '/tmp/tmpejh7b2gn', 'line': 2, 'column': 0, 'length': 257, 'context': 'var firstUniqChar = function(s) {\r\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Function must have JSDoc.', 'key': 'JSC_MISSING_JSDOC', 'source': '/tmp/tmpejh7b2gn', 'line': 2, 'column': 20, 'length': 236, 'context': 'var firstUniqChar = function(s) {\r\n                    ^^^^^^^^^^^^^^'}, {'level': 'info', 'description': '0 error(s), 2 warning(s), 69.2% typed'}]"
33,Binary Search,"Given an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums. If target exists, then return its index. Otherwise, return -1.

You must write an algorithm with O(log n) runtime complexity.","Example 1:

Input: nums = [-1,0,3,5,9,12], target = 9
Output: 4
Explanation: 9 exists in nums and its index is 4
Example 2:

Input: nums = [-1,0,3,5,9,12], target = 2
Output: -1
Explanation: 2 does not exist in nums so return -1","function binarySearch(nums, target) {
  let left = 0;
  let right = nums.length - 1;
  
  while (left <= right) {
    const mid = Math.floor((left + right) / 2);
    
    if (nums[mid] === target) {
      return mid;
    } else if (nums[mid] < target) {
      left = mid + 1;
    } else {
      right = mid - 1;
    }
  }
  
  return -1;
}","1 <= nums.length <= 10^4
-10^4 < nums[i], target < 10^4
All the integers in nums are unique.
nums is sorted in ascending order.",Easy,https://leetcode.com/problems/binary-search/description/,"/**
 * @param {number[]} nums
 * @param {number} target
 * @return {number}
 */
var search = function(nums, target) {
    
};","ESLint Output:

[{'ruleId': 'func-style', 'severity': 2, 'message': 'Expected a function expression.', 'line': 1, 'column': 1, 'nodeType': 'FunctionDeclaration', 'messageId': 'expression', 'endLine': 18, 'endColumn': 2}, {'ruleId': 'no-unused-vars', 'severity': 2, 'message': ""'binarySearch' is defined but never used."", 'line': 1, 'column': 10, 'nodeType': 'Identifier', 'messageId': 'unusedVar', 'endLine': 1, 'endColumn': 22}, {'ruleId': 'one-var', 'severity': 2, 'message': ""Combine this with the previous 'let' statement."", 'line': 3, 'column': 3, 'nodeType': 'VariableDeclaration', 'messageId': 'combine', 'endLine': 3, 'endColumn': 31, 'fix': {'range': [53, 61], 'text': ',\r\n  '}}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 1.', 'line': 3, 'column': 29, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 3, 'endColumn': 30}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 2.', 'line': 6, 'column': 45, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 6, 'endColumn': 46}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 1.', 'line': 11, 'column': 20, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 11, 'endColumn': 21}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 1.', 'line': 13, 'column': 21, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 13, 'endColumn': 22}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: -1.', 'line': 17, 'column': 10, 'nodeType': 'UnaryExpression', 'messageId': 'noMagic', 'endLine': 17, 'endColumn': 12}]


Google Closure Compiler Output:

[{'level': 'warning', 'description': 'Function must have JSDoc.', 'key': 'JSC_MISSING_JSDOC', 'source': '/tmp/tmpfqrar8zx', 'line': 1, 'column': 0, 'length': 356, 'context': 'function binarySearch(nums, target) {\r\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'info', 'description': '0 error(s), 1 warning(s), 83.3% typed'}]"
34,Move Zeroes,"Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.

Note that you must do this in-place without making a copy of the array.","Example 1:

Input: nums = [0,1,0,3,12]
Output: [1,3,12,0,0]
Example 2:

Input: nums = [0]
Output: [0]","var moveZeroes = function(nums) {
    let left = 0;

    for (let right = 0; right < nums.length; right++) {
        if (nums[right] !== 0) {
            [nums[right], nums[left]] = [nums[left], nums[right]];
            left++;
        }
    }

    return nums;    
};","1 <= nums.length <= 10^4
-2^31 <= nums[i] <= 2^31 - 1",Easy,https://leetcode.com/problems/move-zeroes/description/,"/**
 * @param {number[]} nums
 * @return {void} Do not return anything, modify nums in-place instead.
 */
var moveZeroes = function(nums) {
    
};","ESLint Output:

[{'ruleId': 'no-var', 'severity': 2, 'message': 'Unexpected var, use let or const instead.', 'line': 1, 'column': 1, 'nodeType': 'VariableDeclaration', 'messageId': 'unexpectedVar', 'endLine': 12, 'endColumn': 3, 'fix': {'range': [0, 3], 'text': 'let'}}, {'ruleId': 'no-unused-vars', 'severity': 2, 'message': ""'moveZeroes' is assigned a value but never used."", 'line': 1, 'column': 5, 'nodeType': 'Identifier', 'messageId': 'unusedVar', 'endLine': 1, 'endColumn': 15}, {'ruleId': 'func-names', 'severity': 2, 'message': 'Unexpected unnamed function.', 'line': 1, 'column': 18, 'nodeType': 'FunctionExpression', 'messageId': 'unnamed', 'endLine': 1, 'endColumn': 26}, {'ruleId': 'no-plusplus', 'severity': 2, 'message': ""Unary operator '++' used."", 'line': 4, 'column': 46, 'nodeType': 'UpdateExpression', 'messageId': 'unexpectedUnaryOp', 'endLine': 4, 'endColumn': 53}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 0.', 'line': 5, 'column': 29, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 5, 'endColumn': 30}, {'ruleId': 'no-plusplus', 'severity': 2, 'message': ""Unary operator '++' used."", 'line': 7, 'column': 13, 'nodeType': 'UpdateExpression', 'messageId': 'unexpectedUnaryOp', 'endLine': 7, 'endColumn': 19}]


Google Closure Compiler Output:

[{'level': 'warning', 'description': 'Using `var` (prefer `const` or `let`).', 'key': 'JSC_VAR', 'source': '/tmp/tmpujls2rqm', 'line': 1, 'column': 0, 'length': 280, 'context': 'var moveZeroes = function(nums) {\r\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Function must have JSDoc.', 'key': 'JSC_MISSING_JSDOC', 'source': '/tmp/tmpujls2rqm', 'line': 1, 'column': 17, 'length': 262, 'context': 'var moveZeroes = function(nums) {\r\n                 ^^^^^^^^^^^^^^^^^'}, {'level': 'info', 'description': '0 error(s), 2 warning(s), 69.2% typed'}]"
35,Valid Palindrome,"A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.

Given a string s, return true if it is a palindrome, or false otherwise.","Example 1:

Input: s = ""A man, a plan, a canal: Panama""
Output: true
Explanation: ""amanaplanacanalpanama"" is a palindrome.
Example 2:

Input: s = ""race a car""
Output: false
Explanation: ""raceacar"" is not a palindrome.
Example 3:

Input: s = "" ""
Output: true
Explanation: s is an empty string """" after removing non-alphanumeric characters.
Since an empty string reads the same forward and backward, it is a palindrome.","/**
 * @param {string} s
 * @return {boolean}
 */
var isPalindrome = function(input) {
    var start = 0
    var end = input.length - 1
    while (start < end) {
        var s = input.charCodeAt(start)
        var e = input.charCodeAt(end)
    
        if (!isLetter(s)) {
            start++
            continue
        }
        if (!isLetter(e)) {
            end--
            continue
        }
    
        if (toLowerCase(s) !== toLowerCase(e)) {
            return false 
        } 
        start++
        end--
  }
  return true
};

var isLetter = function(code) {
    if (((code >= 48) && (code <= 57))  // numbers
    || ((code >= 65) && (code <= 90))  // uppercase
    || ((code >= 97) && (code <= 122))) {  // lowercase
        return true
    }
    else {
        return false
    }
}

var toLowerCase = function(code) {
    if (code >= 65 && code <= 90) {
        return code + 32    
    }
    else {
        return code
    }
}","1 <= s.length <= 2 * 10^5
s consists only of printable ASCII characters.",Easy,https://leetcode.com/problems/valid-palindrome/description/,"/**
 * @param {string} s
 * @return {boolean}
 */
var isPalindrome = function(s) {
    
};","ESLint Output:

[{'ruleId': 'no-var', 'severity': 2, 'message': 'Unexpected var, use let or const instead.', 'line': 5, 'column': 1, 'nodeType': 'VariableDeclaration', 'messageId': 'unexpectedVar', 'endLine': 28, 'endColumn': 3, 'fix': {'range': [50, 53], 'text': 'let'}}, {'ruleId': 'no-unused-vars', 'severity': 2, 'message': ""'isPalindrome' is assigned a value but never used."", 'line': 5, 'column': 5, 'nodeType': 'Identifier', 'messageId': 'unusedVar', 'endLine': 5, 'endColumn': 17}, {'ruleId': 'func-names', 'severity': 2, 'message': 'Unexpected unnamed function.', 'line': 5, 'column': 20, 'nodeType': 'FunctionExpression', 'messageId': 'unnamed', 'endLine': 5, 'endColumn': 28}, {'ruleId': 'max-statements', 'severity': 2, 'message': 'Function has too many statements (16). Maximum allowed is 10.', 'line': 5, 'column': 20, 'nodeType': 'FunctionExpression', 'messageId': 'exceed', 'endLine': 28, 'endColumn': 2}, {'ruleId': 'no-var', 'severity': 2, 'message': 'Unexpected var, use let or const instead.', 'line': 6, 'column': 5, 'nodeType': 'VariableDeclaration', 'messageId': 'unexpectedVar', 'endLine': 6, 'endColumn': 18, 'fix': {'range': [91, 94], 'text': 'let'}}, {'ruleId': 'one-var', 'severity': 2, 'message': ""Combine this with the previous 'var' statement."", 'line': 7, 'column': 5, 'nodeType': 'VariableDeclaration', 'messageId': 'combine', 'endLine': 7, 'endColumn': 31, 'fix': {'range': [104, 112], 'text': ',\n    '}}, {'ruleId': 'no-var', 'severity': 2, 'message': 'Unexpected var, use let or const instead.', 'line': 7, 'column': 5, 'nodeType': 'VariableDeclaration', 'messageId': 'unexpectedVar', 'endLine': 7, 'endColumn': 31, 'fix': {'range': [109, 112], 'text': 'let'}}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 1.', 'line': 7, 'column': 30, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 7, 'endColumn': 31}, {'ruleId': 'one-var', 'severity': 2, 'message': ""Combine this with the previous 'var' statement."", 'line': 9, 'column': 9, 'nodeType': 'VariableDeclaration', 'messageId': 'combine', 'endLine': 9, 'endColumn': 40}, {'ruleId': 'vars-on-top', 'severity': 2, 'message': ""All 'var' declarations must be at the top of the function scope."", 'line': 9, 'column': 9, 'nodeType': 'VariableDeclaration', 'messageId': 'top', 'endLine': 9, 'endColumn': 40}, {'ruleId': 'no-var', 'severity': 2, 'message': 'Unexpected var, use let or const instead.', 'line': 9, 'column': 9, 'nodeType': 'VariableDeclaration', 'messageId': 'unexpectedVar', 'endLine': 9, 'endColumn': 40, 'fix': {'range': [170, 173], 'text': 'let'}}, {'ruleId': 'id-length', 'severity': 2, 'message': ""Identifier name 's' is too short (< 2)."", 'line': 9, 'column': 13, 'nodeType': 'Identifier', 'messageId': 'tooShort', 'endLine': 9, 'endColumn': 14}, {'ruleId': 'one-var', 'severity': 2, 'message': ""Combine this with the previous 'var' statement."", 'line': 10, 'column': 9, 'nodeType': 'VariableDeclaration', 'messageId': 'combine', 'endLine': 10, 'endColumn': 38, 'fix': {'range': [201, 213], 'text': ',\n        '}}, {'ruleId': 'vars-on-top', 'severity': 2, 'message': ""All 'var' declarations must be at the top of the function scope."", 'line': 10, 'column': 9, 'nodeType': 'VariableDeclaration', 'messageId': 'top', 'endLine': 10, 'endColumn': 38}, {'ruleId': 'no-var', 'severity': 2, 'message': 'Unexpected var, use let or const instead.', 'line': 10, 'column': 9, 'nodeType': 'VariableDeclaration', 'messageId': 'unexpectedVar', 'endLine': 10, 'endColumn': 38, 'fix': {'range': [210, 213], 'text': 'let'}}, {'ruleId': 'id-length', 'severity': 2, 'message': ""Identifier name 'e' is too short (< 2)."", 'line': 10, 'column': 13, 'nodeType': 'Identifier', 'messageId': 'tooShort', 'endLine': 10, 'endColumn': 14}, {'ruleId': 'no-use-before-define', 'severity': 2, 'message': ""'isLetter' was used before it was defined."", 'line': 12, 'column': 14, 'nodeType': 'Identifier', 'messageId': 'usedBeforeDefined', 'endLine': 12, 'endColumn': 22}, {'ruleId': 'no-plusplus', 'severity': 2, 'message': ""Unary operator '++' used."", 'line': 13, 'column': 13, 'nodeType': 'UpdateExpression', 'messageId': 'unexpectedUnaryOp', 'endLine': 13, 'endColumn': 20}, {'ruleId': 'no-continue', 'severity': 2, 'message': 'Unexpected use of continue statement.', 'line': 14, 'column': 13, 'nodeType': 'ContinueStatement', 'messageId': 'unexpected', 'endLine': 14, 'endColumn': 21}, {'ruleId': 'no-use-before-define', 'severity': 2, 'message': ""'isLetter' was used before it was defined."", 'line': 16, 'column': 14, 'nodeType': 'Identifier', 'messageId': 'usedBeforeDefined', 'endLine': 16, 'endColumn': 22}, {'ruleId': 'no-plusplus', 'severity': 2, 'message': ""Unary operator '--' used."", 'line': 17, 'column': 13, 'nodeType': 'UpdateExpression', 'messageId': 'unexpectedUnaryOp', 'endLine': 17, 'endColumn': 18}, {'ruleId': 'no-continue', 'severity': 2, 'message': 'Unexpected use of continue statement.', 'line': 18, 'column': 13, 'nodeType': 'ContinueStatement', 'messageId': 'unexpected', 'endLine': 18, 'endColumn': 21}, {'ruleId': 'no-use-before-define', 'severity': 2, 'message': ""'toLowerCase' was used before it was defined."", 'line': 21, 'column': 13, 'nodeType': 'Identifier', 'messageId': 'usedBeforeDefined', 'endLine': 21, 'endColumn': 24}, {'ruleId': 'no-use-before-define', 'severity': 2, 'message': ""'toLowerCase' was used before it was defined."", 'line': 21, 'column': 32, 'nodeType': 'Identifier', 'messageId': 'usedBeforeDefined', 'endLine': 21, 'endColumn': 43}, {'ruleId': 'no-plusplus', 'severity': 2, 'message': ""Unary operator '++' used."", 'line': 24, 'column': 9, 'nodeType': 'UpdateExpression', 'messageId': 'unexpectedUnaryOp', 'endLine': 24, 'endColumn': 16}, {'ruleId': 'no-plusplus', 'severity': 2, 'message': ""Unary operator '--' used."", 'line': 25, 'column': 9, 'nodeType': 'UpdateExpression', 'messageId': 'unexpectedUnaryOp', 'endLine': 25, 'endColumn': 14}, {'ruleId': 'one-var', 'severity': 2, 'message': ""Combine this with the previous 'var' statement."", 'line': 30, 'column': 1, 'nodeType': 'VariableDeclaration', 'messageId': 'combine', 'endLine': 39, 'endColumn': 2, 'fix': {'range': [541, 547], 'text': ',\n\n'}}, {'ruleId': 'no-var', 'severity': 2, 'message': 'Unexpected var, use let or const instead.', 'line': 30, 'column': 1, 'nodeType': 'VariableDeclaration', 'messageId': 'unexpectedVar', 'endLine': 39, 'endColumn': 2}, {'ruleId': 'func-names', 'severity': 2, 'message': 'Unexpected unnamed function.', 'line': 30, 'column': 16, 'nodeType': 'FunctionExpression', 'messageId': 'unnamed', 'endLine': 30, 'endColumn': 24}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 48.', 'line': 31, 'column': 19, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 31, 'endColumn': 21}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 57.', 'line': 31, 'column': 35, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 31, 'endColumn': 37}, {'ruleId': 'capitalized-comments', 'severity': 2, 'message': 'Comments should not begin with a lowercase character.', 'line': 31, 'column': 41, 'nodeType': None, 'messageId': 'unexpectedLowercaseComment', 'endLine': 31, 'endColumn': 51, 'fix': {'range': [619, 620], 'text': 'N'}}, {'ruleId': 'no-inline-comments', 'severity': 2, 'message': 'Unexpected comment inline with code.', 'line': 31, 'column': 41, 'nodeType': 'Line', 'messageId': 'unexpectedInlineComment', 'endLine': 31, 'endColumn': 51}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 65.', 'line': 32, 'column': 18, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 32, 'endColumn': 20}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 90.', 'line': 32, 'column': 34, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 32, 'endColumn': 36}, {'ruleId': 'capitalized-comments', 'severity': 2, 'message': 'Comments should not begin with a lowercase character.', 'line': 32, 'column': 40, 'nodeType': None, 'messageId': 'unexpectedLowercaseComment', 'endLine': 32, 'endColumn': 52, 'fix': {'range': [669, 670], 'text': 'U'}}, {'ruleId': 'no-inline-comments', 'severity': 2, 'message': 'Unexpected comment inline with code.', 'line': 32, 'column': 40, 'nodeType': 'Line', 'messageId': 'unexpectedInlineComment', 'endLine': 32, 'endColumn': 52}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 97.', 'line': 33, 'column': 18, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 33, 'endColumn': 20}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 122.', 'line': 33, 'column': 34, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 33, 'endColumn': 37}, {'ruleId': 'capitalized-comments', 'severity': 2, 'message': 'Comments should not begin with a lowercase character.', 'line': 33, 'column': 44, 'nodeType': None, 'messageId': 'unexpectedLowercaseComment', 'endLine': 33, 'endColumn': 56, 'fix': {'range': [725, 726], 'text': 'L'}}, {'ruleId': 'no-inline-comments', 'severity': 2, 'message': 'Unexpected comment inline with code.', 'line': 33, 'column': 44, 'nodeType': 'Line', 'messageId': 'unexpectedInlineComment', 'endLine': 33, 'endColumn': 56}, {'ruleId': 'no-else-return', 'severity': 2, 'message': ""Unnecessary 'else' after 'return'."", 'line': 36, 'column': 10, 'nodeType': 'BlockStatement', 'messageId': 'unexpected', 'endLine': 38, 'endColumn': 6, 'fix': {'range': [559, 800], 'text': 'function(code) {\n    if (((code >= 48) && (code <= 57))  // numbers\n    || ((code >= 65) && (code <= 90))  // uppercase\n    || ((code >= 97) && (code <= 122))) {  // lowercase\n        return true\n    }\n    \n        return false\n    \n}'}}, {'ruleId': 'one-var', 'severity': 2, 'message': ""Combine this with the previous 'var' statement."", 'line': 41, 'column': 1, 'nodeType': 'VariableDeclaration', 'messageId': 'combine', 'endLine': 48, 'endColumn': 2, 'fix': {'range': [800, 805], 'text': ',\n\n'}}, {'ruleId': 'no-var', 'severity': 2, 'message': 'Unexpected var, use let or const instead.', 'line': 41, 'column': 1, 'nodeType': 'VariableDeclaration', 'messageId': 'unexpectedVar', 'endLine': 48, 'endColumn': 2}, {'ruleId': 'func-names', 'severity': 2, 'message': 'Unexpected unnamed function.', 'line': 41, 'column': 19, 'nodeType': 'FunctionExpression', 'messageId': 'unnamed', 'endLine': 41, 'endColumn': 27}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 65.', 'line': 42, 'column': 17, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 42, 'endColumn': 19}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 90.', 'line': 42, 'column': 31, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 42, 'endColumn': 33}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 32.', 'line': 43, 'column': 23, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 43, 'endColumn': 25}, {'ruleId': 'no-else-return', 'severity': 2, 'message': ""Unnecessary 'else' after 'return'."", 'line': 45, 'column': 10, 'nodeType': 'BlockStatement', 'messageId': 'unexpected', 'endLine': 47, 'endColumn': 6, 'fix': {'range': [820, 946], 'text': 'function(code) {\n    if (code >= 65 && code <= 90) {\n        return code + 32    \n    }\n    \n        return code\n    \n}'}}]


Google Closure Compiler Output:

[{'level': 'warning', 'description': 'Using `var` (prefer `const` or `let`).', 'key': 'JSC_VAR', 'source': '/tmp/tmp4k9249c2', 'line': 5, 'column': 0, 'length': 492, 'context': 'var isPalindrome = function(input) {\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': ""parameter s does not appear in isPalindrome's parameter list"", 'key': 'JSC_INEXISTENT_PARAM', 'source': '/tmp/tmp4k9249c2', 'line': 5, 'column': 19, 'length': 472, 'context': 'var isPalindrome = function(input) {\n                   ^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Incorrect param name. Are your @param annotations in the wrong order?', 'key': 'JSC_INCORRECT_PARAM_NAME', 'source': '/tmp/tmp4k9249c2', 'line': 5, 'column': 28, 'length': 5, 'context': 'var isPalindrome = function(input) {\n                            ^^^^^'}, {'level': 'warning', 'description': 'Missing semicolon', 'key': 'JSC_MISSING_SEMICOLON', 'source': '/tmp/tmp4k9249c2', 'line': 6, 'column': 4, 'length': 13, 'context': '    var start = 0\n    ^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Using `var` (prefer `const` or `let`).', 'key': 'JSC_VAR', 'source': '/tmp/tmp4k9249c2', 'line': 6, 'column': 4, 'length': 13, 'context': '    var start = 0\n    ^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Missing semicolon', 'key': 'JSC_MISSING_SEMICOLON', 'source': '/tmp/tmp4k9249c2', 'line': 7, 'column': 4, 'length': 26, 'context': '    var end = input.length - 1\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Using `var` (prefer `const` or `let`).', 'key': 'JSC_VAR', 'source': '/tmp/tmp4k9249c2', 'line': 7, 'column': 4, 'length': 26, 'context': '    var end = input.length - 1\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Missing semicolon', 'key': 'JSC_MISSING_SEMICOLON', 'source': '/tmp/tmp4k9249c2', 'line': 9, 'column': 8, 'length': 31, 'context': '        var s = input.charCodeAt(start)\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Using `var` (prefer `const` or `let`).', 'key': 'JSC_VAR', 'source': '/tmp/tmp4k9249c2', 'line': 9, 'column': 8, 'length': 31, 'context': '        var s = input.charCodeAt(start)\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Missing semicolon', 'key': 'JSC_MISSING_SEMICOLON', 'source': '/tmp/tmp4k9249c2', 'line': 10, 'column': 8, 'length': 29, 'context': '        var e = input.charCodeAt(end)\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Using `var` (prefer `const` or `let`).', 'key': 'JSC_VAR', 'source': '/tmp/tmp4k9249c2', 'line': 10, 'column': 8, 'length': 29, 'context': '        var e = input.charCodeAt(end)\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Missing semicolon', 'key': 'JSC_MISSING_SEMICOLON', 'source': '/tmp/tmp4k9249c2', 'line': 13, 'column': 12, 'length': 7, 'context': '            start++\n            ^^^^^^^'}, {'level': 'warning', 'description': 'Missing semicolon', 'key': 'JSC_MISSING_SEMICOLON', 'source': '/tmp/tmp4k9249c2', 'line': 14, 'column': 12, 'length': 8, 'context': '            continue\n            ^^^^^^^^'}, {'level': 'warning', 'description': 'Missing semicolon', 'key': 'JSC_MISSING_SEMICOLON', 'source': '/tmp/tmp4k9249c2', 'line': 17, 'column': 12, 'length': 5, 'context': '            end--\n            ^^^^^'}, {'level': 'warning', 'description': 'Missing semicolon', 'key': 'JSC_MISSING_SEMICOLON', 'source': '/tmp/tmp4k9249c2', 'line': 18, 'column': 12, 'length': 8, 'context': '            continue\n            ^^^^^^^^'}, {'level': 'warning', 'description': 'Missing semicolon', 'key': 'JSC_MISSING_SEMICOLON', 'source': '/tmp/tmp4k9249c2', 'line': 22, 'column': 12, 'length': 12, 'context': '            return false \n            ^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Missing semicolon', 'key': 'JSC_MISSING_SEMICOLON', 'source': '/tmp/tmp4k9249c2', 'line': 24, 'column': 8, 'length': 7, 'context': '        start++\n        ^^^^^^^'}, {'level': 'warning', 'description': 'Missing semicolon', 'key': 'JSC_MISSING_SEMICOLON', 'source': '/tmp/tmp4k9249c2', 'line': 25, 'column': 8, 'length': 5, 'context': '        end--\n        ^^^^^'}, {'level': 'warning', 'description': 'Missing semicolon', 'key': 'JSC_MISSING_SEMICOLON', 'source': '/tmp/tmp4k9249c2', 'line': 27, 'column': 2, 'length': 11, 'context': '  return true\n  ^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Missing semicolon', 'key': 'JSC_MISSING_SEMICOLON', 'source': '/tmp/tmp4k9249c2', 'line': 30, 'column': 0, 'length': 256, 'context': 'var isLetter = function(code) {\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Using `var` (prefer `const` or `let`).', 'key': 'JSC_VAR', 'source': '/tmp/tmp4k9249c2', 'line': 30, 'column': 0, 'length': 256, 'context': 'var isLetter = function(code) {\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Function must have JSDoc.', 'key': 'JSC_MISSING_JSDOC', 'source': '/tmp/tmp4k9249c2', 'line': 30, 'column': 15, 'length': 241, 'context': 'var isLetter = function(code) {\n               ^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Missing semicolon', 'key': 'JSC_MISSING_SEMICOLON', 'source': '/tmp/tmp4k9249c2', 'line': 34, 'column': 8, 'length': 11, 'context': '        return true\n        ^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Missing semicolon', 'key': 'JSC_MISSING_SEMICOLON', 'source': '/tmp/tmp4k9249c2', 'line': 37, 'column': 8, 'length': 12, 'context': '        return false\n        ^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Missing semicolon', 'key': 'JSC_MISSING_SEMICOLON', 'source': '/tmp/tmp4k9249c2', 'line': 41, 'column': 0, 'length': 144, 'context': 'var toLowerCase = function(code) {\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Using `var` (prefer `const` or `let`).', 'key': 'JSC_VAR', 'source': '/tmp/tmp4k9249c2', 'line': 41, 'column': 0, 'length': 144, 'context': 'var toLowerCase = function(code) {\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Function must have JSDoc.', 'key': 'JSC_MISSING_JSDOC', 'source': '/tmp/tmp4k9249c2', 'line': 41, 'column': 18, 'length': 126, 'context': 'var toLowerCase = function(code) {\n                  ^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Missing semicolon', 'key': 'JSC_MISSING_SEMICOLON', 'source': '/tmp/tmp4k9249c2', 'line': 43, 'column': 8, 'length': 16, 'context': '        return code + 32    \n        ^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Missing semicolon', 'key': 'JSC_MISSING_SEMICOLON', 'source': '/tmp/tmp4k9249c2', 'line': 46, 'column': 8, 'length': 11, 'context': '        return code\n        ^^^^^^^^^^^'}, {'level': 'info', 'description': '0 error(s), 29 warning(s), 66.2% typed'}]"
36,Power of Three,"Given an integer n, return true if it is a power of three. Otherwise, return false.

An integer n is a power of three, if there exists an integer x such that n == 3^x.","Example 1:

Input: n = 27
Output: true
Explanation: 27 = 3^3
Example 2:

Input: n = 0
Output: false
Explanation: There is no x where 3^x = 0.
Example 3:

Input: n = -1
Output: false
Explanation: There is no x where 3^x = (-1).","var isPowerOfThree = function(n) {
    if (n === 0) return false;
    if (n === 1) return true;
    
    if (!(n%3)) return isPowerOfThree(n/3);
    
    return false;
};",-2^31 <= n <= 2^31 - 1,Easy,https://leetcode.com/problems/power-of-three/description/,"/**
 * @param {number} n
 * @return {boolean}
 */
var isPowerOfThree = function(n) {
    
};","ESLint Output:

[{'ruleId': 'no-var', 'severity': 2, 'message': 'Unexpected var, use let or const instead.', 'line': 1, 'column': 1, 'nodeType': 'VariableDeclaration', 'messageId': 'unexpectedVar', 'endLine': 8, 'endColumn': 3, 'fix': {'range': [0, 3], 'text': 'let'}}, {'ruleId': 'no-unused-vars', 'severity': 2, 'message': ""'isPowerOfThree' is assigned a value but never used."", 'line': 1, 'column': 5, 'nodeType': 'Identifier', 'messageId': 'unusedVar', 'endLine': 1, 'endColumn': 19}, {'ruleId': 'func-names', 'severity': 2, 'message': 'Unexpected unnamed function.', 'line': 1, 'column': 22, 'nodeType': 'FunctionExpression', 'messageId': 'unnamed', 'endLine': 1, 'endColumn': 30}, {'ruleId': 'id-length', 'severity': 2, 'message': ""Identifier name 'n' is too short (< 2)."", 'line': 1, 'column': 31, 'nodeType': 'Identifier', 'messageId': 'tooShort', 'endLine': 1, 'endColumn': 32}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 0.', 'line': 2, 'column': 15, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 2, 'endColumn': 16}, {'ruleId': 'curly', 'severity': 2, 'message': ""Expected { after 'if' condition."", 'line': 2, 'column': 18, 'nodeType': 'IfStatement', 'messageId': 'missingCurlyAfterCondition', 'endLine': 2, 'endColumn': 31, 'fix': {'range': [52, 65], 'text': '{return false;}'}}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 1.', 'line': 3, 'column': 15, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 3, 'endColumn': 16}, {'ruleId': 'curly', 'severity': 2, 'message': ""Expected { after 'if' condition."", 'line': 3, 'column': 18, 'nodeType': 'IfStatement', 'messageId': 'missingCurlyAfterCondition', 'endLine': 3, 'endColumn': 30, 'fix': {'range': [83, 95], 'text': '{return true;}'}}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 3.', 'line': 5, 'column': 13, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 5, 'endColumn': 14}, {'ruleId': 'curly', 'severity': 2, 'message': ""Expected { after 'if' condition."", 'line': 5, 'column': 17, 'nodeType': 'IfStatement', 'messageId': 'missingCurlyAfterCondition', 'endLine': 5, 'endColumn': 44, 'fix': {'range': [117, 144], 'text': '{return isPowerOfThree(n/3);}'}}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 3.', 'line': 5, 'column': 41, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 5, 'endColumn': 42}]


Google Closure Compiler Output:

[{'level': 'warning', 'description': 'Using `var` (prefer `const` or `let`).', 'key': 'JSC_VAR', 'source': '/tmp/tmpedy32dw7', 'line': 1, 'column': 0, 'length': 170, 'context': 'var isPowerOfThree = function(n) {\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Function must have JSDoc.', 'key': 'JSC_MISSING_JSDOC', 'source': '/tmp/tmpedy32dw7', 'line': 1, 'column': 21, 'length': 148, 'context': 'var isPowerOfThree = function(n) {\n                     ^^^^^^^^^^^^^'}, {'level': 'info', 'description': '0 error(s), 2 warning(s), 73.6% typed'}]"
37,Find All Numbers Disappeared in an Array,"Given an array nums of n integers where nums[i] is in the range [1, n], return an array of all the integers in the range [1, n] that do not appear in nums.","Example 1:

Input: nums = [4,3,2,7,8,2,3,1]
Output: [5,6]
Example 2:

Input: nums = [1,1]
Output: [2]","/**
 * @param {number[]} nums
 * @return {number[]}
 */
var findDisappearedNumbers = function(nums) {
    let obj={}
    for(let n of nums){
        obj[n]=1
    }
    let arr=[]
    for(let i=1;i<=nums.length;i++){
        if(!obj[i]) arr.push(i)
    }
    return arr
};","n == nums.length
1 <= n <= 10^5
1 <= nums[i] <= n",Easy,https://leetcode.com/problems/find-all-numbers-disappeared-in-an-array/description/,"/**
 * @param {number[]} nums
 * @return {number[]}
 */
var findDisappearedNumbers = function(nums) {
    
};","ESLint Output:

[{'ruleId': 'no-var', 'severity': 2, 'message': 'Unexpected var, use let or const instead.', 'line': 5, 'column': 1, 'nodeType': 'VariableDeclaration', 'messageId': 'unexpectedVar', 'endLine': 15, 'endColumn': 3, 'fix': {'range': [60, 63], 'text': 'let'}}, {'ruleId': 'no-unused-vars', 'severity': 2, 'message': ""'findDisappearedNumbers' is assigned a value but never used."", 'line': 5, 'column': 5, 'nodeType': 'Identifier', 'messageId': 'unusedVar', 'endLine': 5, 'endColumn': 27}, {'ruleId': 'func-names', 'severity': 2, 'message': 'Unexpected unnamed function.', 'line': 5, 'column': 30, 'nodeType': 'FunctionExpression', 'messageId': 'unnamed', 'endLine': 5, 'endColumn': 38}, {'ruleId': 'prefer-const', 'severity': 2, 'message': ""'obj' is never reassigned. Use 'const' instead."", 'line': 6, 'column': 9, 'nodeType': 'Identifier', 'messageId': 'useConst', 'endLine': 6, 'endColumn': 12, 'fix': {'range': [111, 121], 'text': 'const obj={}'}}, {'ruleId': 'id-length', 'severity': 2, 'message': ""Identifier name 'n' is too short (< 2)."", 'line': 7, 'column': 13, 'nodeType': 'Identifier', 'messageId': 'tooShort', 'endLine': 7, 'endColumn': 14}, {'ruleId': 'prefer-const', 'severity': 2, 'message': ""'n' is never reassigned. Use 'const' instead."", 'line': 7, 'column': 13, 'nodeType': 'Identifier', 'messageId': 'useConst', 'endLine': 7, 'endColumn': 14, 'fix': {'range': [131, 136], 'text': 'const n'}}, {'ruleId': 'one-var', 'severity': 2, 'message': ""Combine this with the previous 'let' statement."", 'line': 10, 'column': 5, 'nodeType': 'VariableDeclaration', 'messageId': 'combine', 'endLine': 10, 'endColumn': 15}, {'ruleId': 'prefer-const', 'severity': 2, 'message': ""'arr' is never reassigned. Use 'const' instead."", 'line': 10, 'column': 9, 'nodeType': 'Identifier', 'messageId': 'useConst', 'endLine': 10, 'endColumn': 12, 'fix': {'range': [177, 187], 'text': 'const arr=[]'}}, {'ruleId': 'id-length', 'severity': 2, 'message': ""Identifier name 'i' is too short (< 2)."", 'line': 11, 'column': 13, 'nodeType': 'Identifier', 'messageId': 'tooShort', 'endLine': 11, 'endColumn': 14}, {'ruleId': 'no-plusplus', 'severity': 2, 'message': ""Unary operator '++' used."", 'line': 11, 'column': 32, 'nodeType': 'UpdateExpression', 'messageId': 'unexpectedUnaryOp', 'endLine': 11, 'endColumn': 35}, {'ruleId': 'curly', 'severity': 2, 'message': ""Expected { after 'if' condition."", 'line': 12, 'column': 21, 'nodeType': 'IfStatement', 'messageId': 'missingCurlyAfterCondition', 'endLine': 12, 'endColumn': 32, 'fix': {'range': [247, 258], 'text': '{arr.push(i)}'}}]


Google Closure Compiler Output:

[{'level': 'warning', 'description': 'Bad type annotation. expected closing } See https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler for more information.', 'key': 'JSC_TYPE_PARSE_ERROR', 'source': '/tmp/tmpl1udy84y', 'line': 2, 'column': 17, 'context': ' * @param {number[]} nums\r\n                 ^'}, {'level': 'warning', 'description': 'Bad type annotation. expecting a variable name in a @param tag. See https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler for more information.', 'key': 'JSC_TYPE_PARSE_ERROR', 'source': '/tmp/tmpl1udy84y', 'line': 2, 'column': 17, 'context': ' * @param {number[]} nums\r\n                 ^'}, {'level': 'warning', 'description': 'Bad type annotation. expected closing } See https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler for more information.', 'key': 'JSC_TYPE_PARSE_ERROR', 'source': '/tmp/tmpl1udy84y', 'line': 3, 'column': 18, 'context': ' * @return {number[]}\r\n                  ^'}, {'level': 'warning', 'description': 'Using `var` (prefer `const` or `let`).', 'key': 'JSC_VAR', 'source': '/tmp/tmpl1udy84y', 'line': 5, 'column': 0, 'length': 225, 'context': 'var findDisappearedNumbers = function(nums) {\r\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Parameter must have JSDoc.', 'key': 'JSC_MISSING_PARAMETER_JSDOC', 'source': '/tmp/tmpl1udy84y', 'line': 5, 'column': 38, 'length': 4, 'context': 'var findDisappearedNumbers = function(nums) {\r\n                                      ^^^^'}, {'level': 'warning', 'description': 'Missing semicolon', 'key': 'JSC_MISSING_SEMICOLON', 'source': '/tmp/tmpl1udy84y', 'line': 6, 'column': 4, 'length': 10, 'context': '    let obj={}\r\n    ^^^^^^^^^^'}, {'level': 'warning', 'description': 'Missing semicolon', 'key': 'JSC_MISSING_SEMICOLON', 'source': '/tmp/tmpl1udy84y', 'line': 8, 'column': 8, 'length': 8, 'context': '        obj[n]=1\r\n        ^^^^^^^^'}, {'level': 'warning', 'description': 'Missing semicolon', 'key': 'JSC_MISSING_SEMICOLON', 'source': '/tmp/tmpl1udy84y', 'line': 10, 'column': 4, 'length': 10, 'context': '    let arr=[]\r\n    ^^^^^^^^^^'}, {'level': 'warning', 'description': 'Missing semicolon', 'key': 'JSC_MISSING_SEMICOLON', 'source': '/tmp/tmpl1udy84y', 'line': 12, 'column': 20, 'length': 11, 'context': '        if(!obj[i]) arr.push(i)\r\n                    ^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Missing semicolon', 'key': 'JSC_MISSING_SEMICOLON', 'source': '/tmp/tmpl1udy84y', 'line': 14, 'column': 4, 'length': 10, 'context': '    return arr\r\n    ^^^^^^^^^^'}, {'level': 'warning', 'description': 'inconsistent return type\nfound   : Array<?>\nrequired: number', 'key': 'JSC_TYPE_MISMATCH', 'source': '/tmp/tmpl1udy84y', 'line': 14, 'column': 11, 'length': 3, 'context': '    return arr\r\n           ^^^'}, {'level': 'info', 'description': '0 error(s), 11 warning(s), 80.9% typed'}]"
38,Min Cost Climbing Stairs,"You are given an integer array cost where cost[i] is the cost of ith step on a staircase. Once you pay the cost, you can either climb one or two steps.

You can either start from the step with index 0, or the step with index 1.

Return the minimum cost to reach the top of the floor.","Example 1:

Input: cost = [10,15,20]
Output: 15
Explanation: You will start at index 1.
- Pay 15 and climb two steps to reach the top.
The total cost is 15.
Example 2:

Input: cost = [1,100,1,1,1,100,1,1,100,1]
Output: 6
Explanation: You will start at index 0.
- Pay 1 and climb two steps to reach index 2.
- Pay 1 and climb two steps to reach index 4.
- Pay 1 and climb two steps to reach index 6.
- Pay 1 and climb one step to reach index 7.
- Pay 1 and climb two steps to reach index 9.
- Pay 1 and climb one step to reach the top.
The total cost is 6.","/**
 * @param {number[]} cost
 * @return {number}
 */
var minCostClimbingStairs = function(cost) {
    cost.push(0);

    for (let i = cost.length - 4; i >= 0; i--) {
        cost[i] += Math.min(cost[i + 1], cost[i + 2]);
    }

    return Math.min(cost[0], cost[1]);    
};","2 <= cost.length <= 1000
0 <= cost[i] <= 999",Easy,https://leetcode.com/problems/min-cost-climbing-stairs/description/,"/**
 * @param {number[]} cost
 * @return {number}
 */
var minCostClimbingStairs = function(cost) {
    
};","ESLint Output:

[{'ruleId': 'no-var', 'severity': 2, 'message': 'Unexpected var, use let or const instead.', 'line': 5, 'column': 1, 'nodeType': 'VariableDeclaration', 'messageId': 'unexpectedVar', 'endLine': 13, 'endColumn': 3, 'fix': {'range': [58, 61], 'text': 'let'}}, {'ruleId': 'no-unused-vars', 'severity': 2, 'message': ""'minCostClimbingStairs' is assigned a value but never used."", 'line': 5, 'column': 5, 'nodeType': 'Identifier', 'messageId': 'unusedVar', 'endLine': 5, 'endColumn': 26}, {'ruleId': 'func-names', 'severity': 2, 'message': 'Unexpected unnamed function.', 'line': 5, 'column': 29, 'nodeType': 'FunctionExpression', 'messageId': 'unnamed', 'endLine': 5, 'endColumn': 37}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 0.', 'line': 6, 'column': 15, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 6, 'endColumn': 16}, {'ruleId': 'id-length', 'severity': 2, 'message': ""Identifier name 'i' is too short (< 2)."", 'line': 8, 'column': 14, 'nodeType': 'Identifier', 'messageId': 'tooShort', 'endLine': 8, 'endColumn': 15}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 4.', 'line': 8, 'column': 32, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 8, 'endColumn': 33}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 0.', 'line': 8, 'column': 40, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 8, 'endColumn': 41}, {'ruleId': 'no-plusplus', 'severity': 2, 'message': ""Unary operator '--' used."", 'line': 8, 'column': 43, 'nodeType': 'UpdateExpression', 'messageId': 'unexpectedUnaryOp', 'endLine': 8, 'endColumn': 46}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 1.', 'line': 9, 'column': 38, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 9, 'endColumn': 39}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 2.', 'line': 9, 'column': 51, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 9, 'endColumn': 52}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 0.', 'line': 12, 'column': 26, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 12, 'endColumn': 27}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 1.', 'line': 12, 'column': 35, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 12, 'endColumn': 36}]


Google Closure Compiler Output:

[{'level': 'warning', 'description': 'Bad type annotation. expected closing } See https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler for more information.', 'key': 'JSC_TYPE_PARSE_ERROR', 'source': '/tmp/tmpzit3ikx6', 'line': 2, 'column': 17, 'context': ' * @param {number[]} cost\r\n                 ^'}, {'level': 'warning', 'description': 'Bad type annotation. expecting a variable name in a @param tag. See https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler for more information.', 'key': 'JSC_TYPE_PARSE_ERROR', 'source': '/tmp/tmpzit3ikx6', 'line': 2, 'column': 17, 'context': ' * @param {number[]} cost\r\n                 ^'}, {'level': 'warning', 'description': 'Using `var` (prefer `const` or `let`).', 'key': 'JSC_VAR', 'source': '/tmp/tmpzit3ikx6', 'line': 5, 'column': 0, 'length': 228, 'context': 'var minCostClimbingStairs = function(cost) {\r\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Parameter must have JSDoc.', 'key': 'JSC_MISSING_PARAMETER_JSDOC', 'source': '/tmp/tmpzit3ikx6', 'line': 5, 'column': 37, 'length': 4, 'context': 'var minCostClimbingStairs = function(cost) {\r\n                                     ^^^^'}, {'level': 'info', 'description': '0 error(s), 4 warning(s), 70.5% typed'}]"
39,Add Binary,"Given two binary strings a and b, return their sum as a binary string.","Example 1:

Input: a = ""11"", b = ""1""
Output: ""100""
Example 2:

Input: a = ""1010"", b = ""1011""
Output: ""10101""","/**
 * @param {string} a
 * @param {string} b
 * @return {string}
 */
var addBinary = function(a, b) {
    let res = """";
    let x=0, y=0, rem=0;
    while(a!="""" || b!="""") {
        if(a!="""") {
            x = parseInt(a.slice(-1));
            a = a.slice(0,-1);
        }
        if(b!="""") {
            y = parseInt(b.slice(-1));
            b = b.slice(0,-1);
        }
        if(x+y+rem == 2) {
            rem=1;
            res = ""0"" + res;
        }
        else if(x+y+rem == 3) {
            rem=1;
            res = ""1"" + res;
        }
        else {
            res = (x+y+rem).toString() + res;
            rem=0;
        }
        x=0;
        y=0;
    }
    if(rem==1) res = ""1"" + res;
    return res;

};","1 <= a.length, b.length <= 10^4
a and b consist only of '0' or '1' characters.
Each string does not contain leading zeros except for the zero itself.",Easy,https://leetcode.com/problems/add-binary/description/,"/**
 * @param {string} a
 * @param {string} b
 * @return {string}
 */
var addBinary = function(a, b) {
    
};","ESLint Output:

[{'ruleId': 'no-var', 'severity': 2, 'message': 'Unexpected var, use let or const instead.', 'line': 6, 'column': 1, 'nodeType': 'VariableDeclaration', 'messageId': 'unexpectedVar', 'endLine': 36, 'endColumn': 3, 'fix': {'range': [70, 73], 'text': 'let'}}, {'ruleId': 'no-unused-vars', 'severity': 2, 'message': ""'addBinary' is assigned a value but never used."", 'line': 6, 'column': 5, 'nodeType': 'Identifier', 'messageId': 'unusedVar', 'endLine': 6, 'endColumn': 14}, {'ruleId': 'func-names', 'severity': 2, 'message': 'Unexpected unnamed function.', 'line': 6, 'column': 17, 'nodeType': 'FunctionExpression', 'messageId': 'unnamed', 'endLine': 6, 'endColumn': 25}, {'ruleId': 'max-statements', 'severity': 2, 'message': 'Function has too many statements (20). Maximum allowed is 10.', 'line': 6, 'column': 17, 'nodeType': 'FunctionExpression', 'messageId': 'exceed', 'endLine': 36, 'endColumn': 2}, {'ruleId': 'id-length', 'severity': 2, 'message': ""Identifier name 'a' is too short (< 2)."", 'line': 6, 'column': 26, 'nodeType': 'Identifier', 'messageId': 'tooShort', 'endLine': 6, 'endColumn': 27}, {'ruleId': 'id-length', 'severity': 2, 'message': ""Identifier name 'b' is too short (< 2)."", 'line': 6, 'column': 29, 'nodeType': 'Identifier', 'messageId': 'tooShort', 'endLine': 6, 'endColumn': 30}, {'ruleId': 'one-var', 'severity': 2, 'message': ""Combine this with the previous 'let' statement."", 'line': 8, 'column': 5, 'nodeType': 'VariableDeclaration', 'messageId': 'combine', 'endLine': 8, 'endColumn': 25, 'fix': {'range': [119, 128], 'text': ',\n    '}}, {'ruleId': 'id-length', 'severity': 2, 'message': ""Identifier name 'x' is too short (< 2)."", 'line': 8, 'column': 9, 'nodeType': 'Identifier', 'messageId': 'tooShort', 'endLine': 8, 'endColumn': 10}, {'ruleId': 'id-length', 'severity': 2, 'message': ""Identifier name 'y' is too short (< 2)."", 'line': 8, 'column': 14, 'nodeType': 'Identifier', 'messageId': 'tooShort', 'endLine': 8, 'endColumn': 15}, {'ruleId': 'sort-vars', 'severity': 2, 'message': 'Variables within the same declaration block should be sorted alphabetically.', 'line': 8, 'column': 19, 'nodeType': 'VariableDeclarator', 'messageId': 'sortVars', 'endLine': 8, 'endColumn': 24, 'fix': {'range': [129, 144], 'text': 'rem=0, x=0, y=0'}}, {'ruleId': 'eqeqeq', 'severity': 2, 'message': ""Expected '!==' and instead saw '!='."", 'line': 9, 'column': 12, 'nodeType': 'BinaryExpression', 'messageId': 'unexpected', 'endLine': 9, 'endColumn': 14}, {'ruleId': 'eqeqeq', 'severity': 2, 'message': ""Expected '!==' and instead saw '!='."", 'line': 9, 'column': 21, 'nodeType': 'BinaryExpression', 'messageId': 'unexpected', 'endLine': 9, 'endColumn': 23}, {'ruleId': 'eqeqeq', 'severity': 2, 'message': ""Expected '!==' and instead saw '!='."", 'line': 10, 'column': 13, 'nodeType': 'BinaryExpression', 'messageId': 'unexpected', 'endLine': 10, 'endColumn': 15}, {'ruleId': 'radix', 'severity': 2, 'message': 'Missing radix parameter.', 'line': 11, 'column': 17, 'nodeType': 'CallExpression', 'messageId': 'missingRadix', 'endLine': 11, 'endColumn': 38, 'suggestions': [{'messageId': 'addRadixParameter10', 'fix': {'range': [230, 230], 'text': ', 10'}, 'desc': 'Add radix parameter `10` for parsing decimal numbers.'}]}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: -1.', 'line': 11, 'column': 34, 'nodeType': 'UnaryExpression', 'messageId': 'noMagic', 'endLine': 11, 'endColumn': 36}, {'ruleId': 'no-param-reassign', 'severity': 2, 'message': ""Assignment to function parameter 'a'."", 'line': 12, 'column': 13, 'nodeType': 'Identifier', 'messageId': 'assignmentToFunctionParam', 'endLine': 12, 'endColumn': 14}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 0.', 'line': 12, 'column': 25, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 12, 'endColumn': 26}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: -1.', 'line': 12, 'column': 27, 'nodeType': 'UnaryExpression', 'messageId': 'noMagic', 'endLine': 12, 'endColumn': 29}, {'ruleId': 'eqeqeq', 'severity': 2, 'message': ""Expected '!==' and instead saw '!='."", 'line': 14, 'column': 13, 'nodeType': 'BinaryExpression', 'messageId': 'unexpected', 'endLine': 14, 'endColumn': 15}, {'ruleId': 'radix', 'severity': 2, 'message': 'Missing radix parameter.', 'line': 15, 'column': 17, 'nodeType': 'CallExpression', 'messageId': 'missingRadix', 'endLine': 15, 'endColumn': 38, 'suggestions': [{'messageId': 'addRadixParameter10', 'fix': {'range': [330, 330], 'text': ', 10'}, 'desc': 'Add radix parameter `10` for parsing decimal numbers.'}]}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: -1.', 'line': 15, 'column': 34, 'nodeType': 'UnaryExpression', 'messageId': 'noMagic', 'endLine': 15, 'endColumn': 36}, {'ruleId': 'no-param-reassign', 'severity': 2, 'message': ""Assignment to function parameter 'b'."", 'line': 16, 'column': 13, 'nodeType': 'Identifier', 'messageId': 'assignmentToFunctionParam', 'endLine': 16, 'endColumn': 14}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 0.', 'line': 16, 'column': 25, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 16, 'endColumn': 26}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: -1.', 'line': 16, 'column': 27, 'nodeType': 'UnaryExpression', 'messageId': 'noMagic', 'endLine': 16, 'endColumn': 29}, {'ruleId': 'eqeqeq', 'severity': 2, 'message': ""Expected '===' and instead saw '=='."", 'line': 18, 'column': 20, 'nodeType': 'BinaryExpression', 'messageId': 'unexpected', 'endLine': 18, 'endColumn': 22}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 2.', 'line': 18, 'column': 23, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 18, 'endColumn': 24}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 1.', 'line': 19, 'column': 17, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 19, 'endColumn': 18}, {'ruleId': 'prefer-template', 'severity': 2, 'message': 'Unexpected string concatenation.', 'line': 20, 'column': 19, 'nodeType': 'BinaryExpression', 'messageId': 'unexpectedStringConcatenation', 'endLine': 20, 'endColumn': 28, 'fix': {'range': [438, 447], 'text': '`0${  res}`'}}, {'ruleId': 'eqeqeq', 'severity': 2, 'message': ""Expected '===' and instead saw '=='."", 'line': 22, 'column': 25, 'nodeType': 'BinaryExpression', 'messageId': 'unexpected', 'endLine': 22, 'endColumn': 27}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 3.', 'line': 22, 'column': 28, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 22, 'endColumn': 29}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 1.', 'line': 23, 'column': 17, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 23, 'endColumn': 18}, {'ruleId': 'prefer-template', 'severity': 2, 'message': 'Unexpected string concatenation.', 'line': 24, 'column': 19, 'nodeType': 'BinaryExpression', 'messageId': 'unexpectedStringConcatenation', 'endLine': 24, 'endColumn': 28, 'fix': {'range': [528, 537], 'text': '`1${  res}`'}}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 0.', 'line': 28, 'column': 17, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 28, 'endColumn': 18}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 0.', 'line': 30, 'column': 11, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 30, 'endColumn': 12}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 0.', 'line': 31, 'column': 11, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 31, 'endColumn': 12}, {'ruleId': 'eqeqeq', 'severity': 2, 'message': ""Expected '===' and instead saw '=='."", 'line': 33, 'column': 11, 'nodeType': 'BinaryExpression', 'messageId': 'unexpected', 'endLine': 33, 'endColumn': 13}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 1.', 'line': 33, 'column': 13, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 33, 'endColumn': 14}, {'ruleId': 'curly', 'severity': 2, 'message': ""Expected { after 'if' condition."", 'line': 33, 'column': 16, 'nodeType': 'IfStatement', 'messageId': 'missingCurlyAfterCondition', 'endLine': 33, 'endColumn': 32, 'fix': {'range': [686, 702], 'text': '{res = ""1"" + res;}'}}, {'ruleId': 'prefer-template', 'severity': 2, 'message': 'Unexpected string concatenation.', 'line': 33, 'column': 22, 'nodeType': 'BinaryExpression', 'messageId': 'unexpectedStringConcatenation', 'endLine': 33, 'endColumn': 31, 'fix': {'range': [692, 701], 'text': '`1${  res}`'}}]


Google Closure Compiler Output:

[{'level': 'warning', 'description': 'Using `var` (prefer `const` or `let`).', 'key': 'JSC_VAR', 'source': '/tmp/tmppjk8ndqf', 'line': 6, 'column': 0, 'length': 652, 'context': 'var addBinary = function(a, b) {\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Function parseInt: called with 1 argument(s). Function requires at least 2 argument(s) and no more than 2 argument(s).', 'key': 'JSC_WRONG_ARGUMENT_COUNT', 'source': '/tmp/tmppjk8ndqf', 'line': 11, 'column': 16, 'length': 21, 'context': '            x = parseInt(a.slice(-1));\n                ^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Function parseInt: called with 1 argument(s). Function requires at least 2 argument(s) and no more than 2 argument(s).', 'key': 'JSC_WRONG_ARGUMENT_COUNT', 'source': '/tmp/tmppjk8ndqf', 'line': 15, 'column': 16, 'length': 21, 'context': '            y = parseInt(b.slice(-1));\n                ^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'info', 'description': '0 error(s), 3 warning(s), 100.0% typed'}]"
40,Happy Number,"Write an algorithm to determine if a number n is happy.

A happy number is a number defined by the following process:

Starting with any positive integer, replace the number by the sum of the squares of its digits.
Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.
Those numbers for which this process ends in 1 are happy.
Return true if n is a happy number, and false if not.","Example 1:

Input: n = 19
Output: true
Explanation:
1^2 + 9^2 = 82
8^2 + 2^2 = 68
6^2 + 8^2 = 100
1^2 + 0^2 + 0^2 = 1
Example 2:

Input: n = 2
Output: false","/**
 * @param {number} n
 * @return {boolean}
 */
var isHappy = function(n) {
    const seen = new Set();
    
    while (n !== 1 && !seen.has(n)) {
        seen.add(n);
        let sum = 0;
        
        let numStr = n.toString();
        for (let i = 0; i < numStr.length; i++) {
            let digit = Number(numStr[i]);
            sum += digit * digit;
        }
        
        n = sum;  
    }
    return n === 1;
};",1 <= n <= 2^31 - 1,Easy,https://leetcode.com/problems/happy-number/description/,"/**
 * @param {number} n
 * @return {boolean}
 */
var isHappy = function(n) {
    
};","ESLint Output:

[{'ruleId': 'no-var', 'severity': 2, 'message': 'Unexpected var, use let or const instead.', 'line': 5, 'column': 1, 'nodeType': 'VariableDeclaration', 'messageId': 'unexpectedVar', 'endLine': 21, 'endColumn': 3, 'fix': {'range': [54, 57], 'text': 'let'}}, {'ruleId': 'no-unused-vars', 'severity': 2, 'message': ""'isHappy' is assigned a value but never used."", 'line': 5, 'column': 5, 'nodeType': 'Identifier', 'messageId': 'unusedVar', 'endLine': 5, 'endColumn': 12}, {'ruleId': 'func-names', 'severity': 2, 'message': 'Unexpected unnamed function.', 'line': 5, 'column': 15, 'nodeType': 'FunctionExpression', 'messageId': 'unnamed', 'endLine': 5, 'endColumn': 23}, {'ruleId': 'id-length', 'severity': 2, 'message': ""Identifier name 'n' is too short (< 2)."", 'line': 5, 'column': 24, 'nodeType': 'Identifier', 'messageId': 'tooShort', 'endLine': 5, 'endColumn': 25}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 1.', 'line': 8, 'column': 18, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 8, 'endColumn': 19}, {'ruleId': 'one-var', 'severity': 2, 'message': ""Combine this with the previous 'let' statement."", 'line': 12, 'column': 9, 'nodeType': 'VariableDeclaration', 'messageId': 'combine', 'endLine': 12, 'endColumn': 35, 'fix': {'range': [198, 222], 'text': ',\r\n        \r\n        '}}, {'ruleId': 'prefer-const', 'severity': 2, 'message': ""'numStr' is never reassigned. Use 'const' instead."", 'line': 12, 'column': 13, 'nodeType': 'Identifier', 'messageId': 'useConst', 'endLine': 12, 'endColumn': 19, 'fix': {'range': [219, 245], 'text': 'const numStr = n.toString();'}}, {'ruleId': 'id-length', 'severity': 2, 'message': ""Identifier name 'i' is too short (< 2)."", 'line': 13, 'column': 18, 'nodeType': 'Identifier', 'messageId': 'tooShort', 'endLine': 13, 'endColumn': 19}, {'ruleId': 'no-plusplus', 'severity': 2, 'message': ""Unary operator '++' used."", 'line': 13, 'column': 44, 'nodeType': 'UpdateExpression', 'messageId': 'unexpectedUnaryOp', 'endLine': 13, 'endColumn': 47}, {'ruleId': 'prefer-const', 'severity': 2, 'message': ""'digit' is never reassigned. Use 'const' instead."", 'line': 14, 'column': 17, 'nodeType': 'Identifier', 'messageId': 'useConst', 'endLine': 14, 'endColumn': 22, 'fix': {'range': [310, 340], 'text': 'const digit = Number(numStr[i]);'}}, {'ruleId': 'no-param-reassign', 'severity': 2, 'message': ""Assignment to function parameter 'n'."", 'line': 18, 'column': 9, 'nodeType': 'Identifier', 'messageId': 'assignmentToFunctionParam', 'endLine': 18, 'endColumn': 10}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 1.', 'line': 20, 'column': 18, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 20, 'endColumn': 19}]


Google Closure Compiler Output:

[{'level': 'warning', 'description': 'Using `var` (prefer `const` or `let`).', 'key': 'JSC_VAR', 'source': '/tmp/tmpresrpqa6', 'line': 5, 'column': 0, 'length': 394, 'context': 'var isHappy = function(n) {\r\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'info', 'description': '0 error(s), 1 warning(s), 100.0% typed'}]"
41,Maximum Depth of Binary Tree,"Given the root of a binary tree, return its maximum depth.

A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.","Example 1:

Input: root = [3,9,20,null,null,15,7]
Output: 3
Example 2:

Input: root = [1,null,2]
Output: 2","/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number}
 */
var maxDepth = function (root) {
    if (!root) return 0
    let leftSubHeight = maxDepth(root.left)
    let rightSubHeight = maxDepth(root.right) 
    return Math.max(leftSubHeight, rightSubHeight) + 1
};","The number of nodes in the tree is in the range [0, 10^4].
-100 <= Node.val <= 100",Easy,https://leetcode.com/problems/maximum-depth-of-binary-tree/description/,"/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number}
 */
var maxDepth = function(root) {
    
};","ESLint Output:

[{'ruleId': 'no-var', 'severity': 2, 'message': 'Unexpected var, use let or const instead.', 'line': 13, 'column': 1, 'nodeType': 'VariableDeclaration', 'messageId': 'unexpectedVar', 'endLine': 18, 'endColumn': 3, 'fix': {'range': [311, 314], 'text': 'let'}}, {'ruleId': 'no-unused-vars', 'severity': 2, 'message': ""'maxDepth' is assigned a value but never used."", 'line': 13, 'column': 5, 'nodeType': 'Identifier', 'messageId': 'unusedVar', 'endLine': 13, 'endColumn': 13}, {'ruleId': 'func-names', 'severity': 2, 'message': 'Unexpected unnamed function.', 'line': 13, 'column': 16, 'nodeType': 'FunctionExpression', 'messageId': 'unnamed', 'endLine': 13, 'endColumn': 25}, {'ruleId': 'curly', 'severity': 2, 'message': ""Expected { after 'if' condition."", 'line': 14, 'column': 16, 'nodeType': 'IfStatement', 'messageId': 'missingCurlyAfterCondition', 'endLine': 14, 'endColumn': 24, 'fix': {'range': [360, 368], 'text': '{return 0}'}}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 0.', 'line': 14, 'column': 23, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 14, 'endColumn': 24}, {'ruleId': 'prefer-const', 'severity': 2, 'message': ""'leftSubHeight' is never reassigned. Use 'const' instead."", 'line': 15, 'column': 9, 'nodeType': 'Identifier', 'messageId': 'useConst', 'endLine': 15, 'endColumn': 22, 'fix': {'range': [374, 413], 'text': 'const leftSubHeight = maxDepth(root.left)'}}, {'ruleId': 'one-var', 'severity': 2, 'message': ""Combine this with the previous 'let' statement."", 'line': 16, 'column': 5, 'nodeType': 'VariableDeclaration', 'messageId': 'combine', 'endLine': 16, 'endColumn': 46, 'fix': {'range': [413, 422], 'text': ',\r\n    '}}, {'ruleId': 'prefer-const', 'severity': 2, 'message': ""'rightSubHeight' is never reassigned. Use 'const' instead."", 'line': 16, 'column': 9, 'nodeType': 'Identifier', 'messageId': 'useConst', 'endLine': 16, 'endColumn': 23, 'fix': {'range': [419, 460], 'text': 'const rightSubHeight = maxDepth(root.right)'}}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 1.', 'line': 17, 'column': 54, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 17, 'endColumn': 55}]


Google Closure Compiler Output:

[{'level': 'warning', 'description': 'Bad type annotation. Unknown type TreeNode', 'key': 'JSC_UNRECOGNIZED_TYPE_ERROR', 'source': '/tmp/tmp48pg730k', 'line': 10, 'column': 11, 'context': ' * @param {TreeNode} root\r\n           ^'}, {'level': 'warning', 'description': 'TreeNode is a reference type with no nullability modifier, which is disallowed by the style guide.\nPlease add a ! to make it explicitly non-nullable, or a ? to make it explicitly nullable.', 'key': 'JSC_MISSING_NULLABILITY_MODIFIER_JSDOC', 'source': '/tmp/tmp48pg730k', 'line': 10, 'column': 11, 'length': 8, 'context': ' * @param {TreeNode} root\r\n           ^^^^^^^^'}, {'level': 'warning', 'description': 'Using `var` (prefer `const` or `let`).', 'key': 'JSC_VAR', 'source': '/tmp/tmp48pg730k', 'line': 13, 'column': 0, 'length': 210, 'context': 'var maxDepth = function (root) {\r\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Missing semicolon', 'key': 'JSC_MISSING_SEMICOLON', 'source': '/tmp/tmp48pg730k', 'line': 14, 'column': 15, 'length': 8, 'context': '    if (!root) return 0\r\n               ^^^^^^^^'}, {'level': 'warning', 'description': 'Missing semicolon', 'key': 'JSC_MISSING_SEMICOLON', 'source': '/tmp/tmp48pg730k', 'line': 15, 'column': 4, 'length': 39, 'context': '    let leftSubHeight = maxDepth(root.left)\r\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Missing semicolon', 'key': 'JSC_MISSING_SEMICOLON', 'source': '/tmp/tmp48pg730k', 'line': 16, 'column': 4, 'length': 41, 'context': '    let rightSubHeight = maxDepth(root.right) \r\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Missing semicolon', 'key': 'JSC_MISSING_SEMICOLON', 'source': '/tmp/tmp48pg730k', 'line': 17, 'column': 4, 'length': 50, 'context': '    return Math.max(leftSubHeight, rightSubHeight) + 1\r\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'info', 'description': '0 error(s), 7 warning(s), 73.6% typed'}]"
42,Intersection of Two Linked Lists,"Given the heads of two singly linked-lists headA and headB, return the node at which the two lists intersect. If the two linked lists have no intersection at all, return null.

For example, the following two linked lists begin to intersect at node c1:


The test cases are generated such that there are no cycles anywhere in the entire linked structure.

Note that the linked lists must retain their original structure after the function returns.

Custom Judge:

The inputs to the judge are given as follows (your program is not given these inputs):

intersectVal - The value of the node where the intersection occurs. This is 0 if there is no intersected node.
listA - The first linked list.
listB - The second linked list.
skipA - The number of nodes to skip ahead in listA (starting from the head) to get to the intersected node.
skipB - The number of nodes to skip ahead in listB (starting from the head) to get to the intersected node.
The judge will then create the linked structure based on these inputs and pass the two heads, headA and headB to your program. If you correctly return the intersected node, then your solution will be accepted.","Example 1:


Input: intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3
Output: Intersected at '8'
Explanation: The intersected node's value is 8 (note that this must not be 0 if the two lists intersect).
From the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,6,1,8,4,5]. There are 2 nodes before the intersected node in A; There are 3 nodes before the intersected node in B.
- Note that the intersected node's value is not 1 because the nodes with value 1 in A and B (2nd node in A and 3rd node in B) are different node references. In other words, they point to two different locations in memory, while the nodes with value 8 in A and B (3rd node in A and 4th node in B) point to the same location in memory.
Example 2:


Input: intersectVal = 2, listA = [1,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1
Output: Intersected at '2'
Explanation: The intersected node's value is 2 (note that this must not be 0 if the two lists intersect).
From the head of A, it reads as [1,9,1,2,4]. From the head of B, it reads as [3,2,4]. There are 3 nodes before the intersected node in A; There are 1 node before the intersected node in B.
Example 3:


Input: intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2
Output: No intersection
Explanation: From the head of A, it reads as [2,6,4]. From the head of B, it reads as [1,5]. Since the two lists do not intersect, intersectVal must be 0, while skipA and skipB can be arbitrary values.
Explanation: The two lists do not intersect, so return null.","/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 */

/**
 * @param {ListNode} headA
 * @param {ListNode} headB
 * @return {ListNode}
 */
var getIntersectionNode = function (headA, headB) {
  
    let nodeA = headA;
    let nodeB = headB;
    
    
    while (nodeA !== nodeB) {
        
        nodeA = !nodeA ? headB : nodeA.next;
        
        nodeB = !nodeB ? headA : nodeB.next;
    }
    
    
    return nodeA;
};","The number of nodes of listA is in the m.
The number of nodes of listB is in the n.
1 <= m, n <= 3 * 10^4
1 <= Node.val <= 10^5
0 <= skipA <= m
0 <= skipB <= n
intersectVal is 0 if listA and listB do not intersect.
intersectVal == listA[skipA] == listB[skipB] if listA and listB intersect.",Easy,https://leetcode.com/problems/intersection-of-two-linked-lists/description/,"/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 */

/**
 * @param {ListNode} headA
 * @param {ListNode} headB
 * @return {ListNode}
 */
var getIntersectionNode = function(headA, headB) {
    
};","ESLint Output:

[{'ruleId': 'no-var', 'severity': 2, 'message': 'Unexpected var, use let or const instead.', 'line': 14, 'column': 1, 'nodeType': 'VariableDeclaration', 'messageId': 'unexpectedVar', 'endLine': 29, 'endColumn': 3, 'fix': {'range': [225, 228], 'text': 'let'}}, {'ruleId': 'no-unused-vars', 'severity': 2, 'message': ""'getIntersectionNode' is assigned a value but never used."", 'line': 14, 'column': 5, 'nodeType': 'Identifier', 'messageId': 'unusedVar', 'endLine': 14, 'endColumn': 24}, {'ruleId': 'func-names', 'severity': 2, 'message': 'Unexpected unnamed function.', 'line': 14, 'column': 27, 'nodeType': 'FunctionExpression', 'messageId': 'unnamed', 'endLine': 14, 'endColumn': 36}, {'ruleId': 'one-var', 'severity': 2, 'message': ""Combine this with the previous 'let' statement."", 'line': 17, 'column': 5, 'nodeType': 'VariableDeclaration', 'messageId': 'combine', 'endLine': 17, 'endColumn': 23, 'fix': {'range': [303, 313], 'text': ',\r\n    '}}, {'ruleId': 'no-negated-condition', 'severity': 2, 'message': 'Unexpected negated condition.', 'line': 22, 'column': 17, 'nodeType': 'ConditionalExpression', 'messageId': 'unexpectedNegated', 'endLine': 22, 'endColumn': 44}, {'ruleId': 'no-ternary', 'severity': 2, 'message': 'Ternary operator used.', 'line': 22, 'column': 17, 'nodeType': 'ConditionalExpression', 'messageId': 'noTernaryOperator', 'endLine': 22, 'endColumn': 44}, {'ruleId': 'no-negated-condition', 'severity': 2, 'message': 'Unexpected negated condition.', 'line': 24, 'column': 17, 'nodeType': 'ConditionalExpression', 'messageId': 'unexpectedNegated', 'endLine': 24, 'endColumn': 44}, {'ruleId': 'no-ternary', 'severity': 2, 'message': 'Ternary operator used.', 'line': 24, 'column': 17, 'nodeType': 'ConditionalExpression', 'messageId': 'noTernaryOperator', 'endLine': 24, 'endColumn': 44}]


Google Closure Compiler Output:

[{'level': 'warning', 'description': 'Bad type annotation. Unknown type ListNode', 'key': 'JSC_UNRECOGNIZED_TYPE_ERROR', 'source': '/tmp/tmpx5frr5wu', 'line': 10, 'column': 11, 'context': ' * @param {ListNode} headA\r\n           ^'}, {'level': 'warning', 'description': 'ListNode is a reference type with no nullability modifier, which is disallowed by the style guide.\nPlease add a ! to make it explicitly non-nullable, or a ? to make it explicitly nullable.', 'key': 'JSC_MISSING_NULLABILITY_MODIFIER_JSDOC', 'source': '/tmp/tmpx5frr5wu', 'line': 10, 'column': 11, 'length': 8, 'context': ' * @param {ListNode} headA\r\n           ^^^^^^^^'}, {'level': 'warning', 'description': 'Bad type annotation. Unknown type ListNode', 'key': 'JSC_UNRECOGNIZED_TYPE_ERROR', 'source': '/tmp/tmpx5frr5wu', 'line': 11, 'column': 11, 'context': ' * @param {ListNode} headB\r\n           ^'}, {'level': 'warning', 'description': 'ListNode is a reference type with no nullability modifier, which is disallowed by the style guide.\nPlease add a ! to make it explicitly non-nullable, or a ? to make it explicitly nullable.', 'key': 'JSC_MISSING_NULLABILITY_MODIFIER_JSDOC', 'source': '/tmp/tmpx5frr5wu', 'line': 11, 'column': 11, 'length': 8, 'context': ' * @param {ListNode} headB\r\n           ^^^^^^^^'}, {'level': 'warning', 'description': 'Bad type annotation. Unknown type ListNode', 'key': 'JSC_UNRECOGNIZED_TYPE_ERROR', 'source': '/tmp/tmpx5frr5wu', 'line': 12, 'column': 12, 'context': ' * @return {ListNode}\r\n            ^'}, {'level': 'warning', 'description': 'ListNode is a reference type with no nullability modifier, which is disallowed by the style guide.\nPlease add a ! to make it explicitly non-nullable, or a ? to make it explicitly nullable.', 'key': 'JSC_MISSING_NULLABILITY_MODIFIER_JSDOC', 'source': '/tmp/tmpx5frr5wu', 'line': 12, 'column': 12, 'length': 8, 'context': ' * @return {ListNode}\r\n            ^^^^^^^^'}, {'level': 'warning', 'description': 'Using `var` (prefer `const` or `let`).', 'key': 'JSC_VAR', 'source': '/tmp/tmpx5frr5wu', 'line': 14, 'column': 0, 'length': 300, 'context': 'var getIntersectionNode = function (headA, headB) {\r\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'info', 'description': '0 error(s), 7 warning(s), 19.0% typed'}]"
43,Edit Distance,"Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.

You have the following three operations permitted on a word:

Insert a character
Delete a character
Replace a character","Example 1:

Input: word1 = ""horse"", word2 = ""ros""
Output: 3
Explanation: 
horse -> rorse (replace 'h' with 'r')
rorse -> rose (remove 'r')
rose -> ros (remove 'e')
Example 2:

Input: word1 = ""intention"", word2 = ""execution""
Output: 5
Explanation: 
intention -> inention (remove 't')
inention -> enention (replace 'i' with 'e')
enention -> exention (replace 'n' with 'x')
exention -> exection (replace 'n' with 'c')
exection -> execution (insert 'u')","var minDistance = function(word1, word2) {
    const cache = {}
    function dp(i, j) {
        if (cache[`${i}->${j}`] !== undefined) {
            return cache[`${i}->${j}`]
        }
        if (i >= word1.length) {
            return word2.length - j;
        } 
        if (j >= word2.length) {
            return word1.length - i;
        }
        if (word1[i] === word2[j]) {
            return dp(i+1, j+1);
        }
        let insert = 1 + dp(i, j+1);
        let del = 1 + dp(i+1, j);
        let repl = 1 + dp(i+1, j+1);
        const res = Math.min(insert, del, repl);
        cache[`${i}->${j}`] = res;
        return res;
    }
    return dp(0, 0)
};","0 <= word1.length, word2.length <= 500
word1 and word2 consist of lowercase English letters.",Medium,https://leetcode.com/problems/edit-distance/description/,"/**
 * @param {string} word1
 * @param {string} word2
 * @return {number}
 */
var minDistance = function(word1, word2) {
    
};","ESLint Output:

[{'ruleId': 'no-var', 'severity': 2, 'message': 'Unexpected var, use let or const instead.', 'line': 1, 'column': 1, 'nodeType': 'VariableDeclaration', 'messageId': 'unexpectedVar', 'endLine': 24, 'endColumn': 3, 'fix': {'range': [0, 3], 'text': 'let'}}, {'ruleId': 'no-unused-vars', 'severity': 2, 'message': ""'minDistance' is assigned a value but never used."", 'line': 1, 'column': 5, 'nodeType': 'Identifier', 'messageId': 'unusedVar', 'endLine': 1, 'endColumn': 16}, {'ruleId': 'func-names', 'severity': 2, 'message': 'Unexpected unnamed function.', 'line': 1, 'column': 19, 'nodeType': 'FunctionExpression', 'messageId': 'unnamed', 'endLine': 1, 'endColumn': 27}, {'ruleId': 'func-style', 'severity': 2, 'message': 'Expected a function expression.', 'line': 3, 'column': 5, 'nodeType': 'FunctionDeclaration', 'messageId': 'expression', 'endLine': 22, 'endColumn': 6}, {'ruleId': 'max-statements', 'severity': 2, 'message': ""Function 'dp' has too many statements (14). Maximum allowed is 10."", 'line': 3, 'column': 5, 'nodeType': 'FunctionDeclaration', 'messageId': 'exceed', 'endLine': 22, 'endColumn': 6}, {'ruleId': 'id-length', 'severity': 2, 'message': ""Identifier name 'i' is too short (< 2)."", 'line': 3, 'column': 17, 'nodeType': 'Identifier', 'messageId': 'tooShort', 'endLine': 3, 'endColumn': 18}, {'ruleId': 'id-length', 'severity': 2, 'message': ""Identifier name 'j' is too short (< 2)."", 'line': 3, 'column': 20, 'nodeType': 'Identifier', 'messageId': 'tooShort', 'endLine': 3, 'endColumn': 21}, {'ruleId': 'no-undefined', 'severity': 2, 'message': 'Unexpected use of undefined.', 'line': 4, 'column': 37, 'nodeType': 'Identifier', 'messageId': 'unexpectedUndefined', 'endLine': 4, 'endColumn': 46}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 1.', 'line': 14, 'column': 25, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 14, 'endColumn': 26}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 1.', 'line': 14, 'column': 30, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 14, 'endColumn': 31}, {'ruleId': 'prefer-const', 'severity': 2, 'message': ""'insert' is never reassigned. Use 'const' instead."", 'line': 16, 'column': 13, 'nodeType': 'Identifier', 'messageId': 'useConst', 'endLine': 16, 'endColumn': 19, 'fix': {'range': [450, 478], 'text': 'const insert = 1 + dp(i, j+1);'}}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 1.', 'line': 16, 'column': 22, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 16, 'endColumn': 23}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 1.', 'line': 16, 'column': 34, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 16, 'endColumn': 35}, {'ruleId': 'one-var', 'severity': 2, 'message': ""Combine this with the previous 'let' statement."", 'line': 17, 'column': 9, 'nodeType': 'VariableDeclaration', 'messageId': 'combine', 'endLine': 17, 'endColumn': 34, 'fix': {'range': [477, 491], 'text': ',\r\n        '}}, {'ruleId': 'prefer-const', 'severity': 2, 'message': ""'del' is never reassigned. Use 'const' instead."", 'line': 17, 'column': 13, 'nodeType': 'Identifier', 'messageId': 'useConst', 'endLine': 17, 'endColumn': 16, 'fix': {'range': [488, 513], 'text': 'const del = 1 + dp(i+1, j);'}}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 1.', 'line': 17, 'column': 19, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 17, 'endColumn': 20}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 1.', 'line': 17, 'column': 28, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 17, 'endColumn': 29}, {'ruleId': 'one-var', 'severity': 2, 'message': ""Combine this with the previous 'let' statement."", 'line': 18, 'column': 9, 'nodeType': 'VariableDeclaration', 'messageId': 'combine', 'endLine': 18, 'endColumn': 37, 'fix': {'range': [512, 526], 'text': ',\r\n        '}}, {'ruleId': 'prefer-const', 'severity': 2, 'message': ""'repl' is never reassigned. Use 'const' instead."", 'line': 18, 'column': 13, 'nodeType': 'Identifier', 'messageId': 'useConst', 'endLine': 18, 'endColumn': 17, 'fix': {'range': [523, 551], 'text': 'const repl = 1 + dp(i+1, j+1);'}}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 1.', 'line': 18, 'column': 20, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 18, 'endColumn': 21}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 1.', 'line': 18, 'column': 29, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 18, 'endColumn': 30}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 1.', 'line': 18, 'column': 34, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 18, 'endColumn': 35}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 0.', 'line': 23, 'column': 15, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 23, 'endColumn': 16}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 0.', 'line': 23, 'column': 18, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 23, 'endColumn': 19}]


Google Closure Compiler Output:

[{'level': 'warning', 'description': 'Using `var` (prefer `const` or `let`).', 'key': 'JSC_VAR', 'source': '/tmp/tmpauedsi8q', 'line': 1, 'column': 0, 'length': 690, 'context': 'var minDistance = function(word1, word2) {\r\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Function must have JSDoc.', 'key': 'JSC_MISSING_JSDOC', 'source': '/tmp/tmpauedsi8q', 'line': 1, 'column': 18, 'length': 671, 'context': 'var minDistance = function(word1, word2) {\r\n                  ^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Missing semicolon', 'key': 'JSC_MISSING_SEMICOLON', 'source': '/tmp/tmpauedsi8q', 'line': 2, 'column': 4, 'length': 16, 'context': '    const cache = {}\r\n    ^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Missing semicolon', 'key': 'JSC_MISSING_SEMICOLON', 'source': '/tmp/tmpauedsi8q', 'line': 5, 'column': 12, 'length': 26, 'context': '            return cache[`${i}->${j}`]\r\n            ^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Missing semicolon', 'key': 'JSC_MISSING_SEMICOLON', 'source': '/tmp/tmpauedsi8q', 'line': 23, 'column': 4, 'length': 15, 'context': '    return dp(0, 0)\r\n    ^^^^^^^^^^^^^^^'}, {'level': 'info', 'description': '0 error(s), 5 warning(s), 49.4% typed'}]"
44,Longest Consecutive Sequence,"Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.

You must write an algorithm that runs in O(n) time.","Example 1:

Input: nums = [100,4,200,1,3,2]
Output: 4
Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.
Example 2:

Input: nums = [0,3,7,2,5,8,4,6,0,1]
Output: 9","/**
 * @param {number[]} nums
 * @return {number}
 */
var longestConsecutive = function(nums) {
    if(!nums.length) return 0;
    
    let count = 1;
    let largestSequence = 0;
    
    nums = new Set(nums);
    nums = Array.from(nums);
    nums.sort((a,b)=> a-b);
   

    for(let i=0 ; i<nums.length ; i++){
        let diff = nums[i+1] - nums[i]; 
        if(diff == 1){
             count++;
        }else{
            if(count > largestSequence){
                largestSequence = count;
            }
            count = 1;
        }

    }
    return largestSequence;;
};","0 <= nums.length <= 10^5
-10^9 <= nums[i] <= 10^9",Medium,https://leetcode.com/problems/longest-consecutive-sequence/description/,"/**
 * @param {number[]} nums
 * @return {number}
 */
var longestConsecutive = function(nums) {
    
};","ESLint Output:

[{'ruleId': 'no-var', 'severity': 2, 'message': 'Unexpected var, use let or const instead.', 'line': 5, 'column': 1, 'nodeType': 'VariableDeclaration', 'messageId': 'unexpectedVar', 'endLine': 29, 'endColumn': 3, 'fix': {'range': [58, 61], 'text': 'let'}}, {'ruleId': 'no-unused-vars', 'severity': 2, 'message': ""'longestConsecutive' is assigned a value but never used."", 'line': 5, 'column': 5, 'nodeType': 'Identifier', 'messageId': 'unusedVar', 'endLine': 5, 'endColumn': 23}, {'ruleId': 'func-names', 'severity': 2, 'message': 'Unexpected unnamed function.', 'line': 5, 'column': 26, 'nodeType': 'FunctionExpression', 'messageId': 'unnamed', 'endLine': 5, 'endColumn': 34}, {'ruleId': 'max-statements', 'severity': 2, 'message': 'Function has too many statements (15). Maximum allowed is 10.', 'line': 5, 'column': 26, 'nodeType': 'FunctionExpression', 'messageId': 'exceed', 'endLine': 29, 'endColumn': 2}, {'ruleId': 'curly', 'severity': 2, 'message': ""Expected { after 'if' condition."", 'line': 6, 'column': 22, 'nodeType': 'IfStatement', 'messageId': 'missingCurlyAfterCondition', 'endLine': 6, 'endColumn': 31, 'fix': {'range': [122, 131], 'text': '{return 0;}'}}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 0.', 'line': 6, 'column': 29, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 6, 'endColumn': 30}, {'ruleId': 'one-var', 'severity': 2, 'message': ""Combine this with the previous 'let' statement."", 'line': 9, 'column': 5, 'nodeType': 'VariableDeclaration', 'messageId': 'combine', 'endLine': 9, 'endColumn': 29, 'fix': {'range': [156, 166], 'text': ',\r\n    '}}, {'ruleId': 'no-param-reassign', 'severity': 2, 'message': ""Assignment to function parameter 'nums'."", 'line': 11, 'column': 5, 'nodeType': 'Identifier', 'messageId': 'assignmentToFunctionParam', 'endLine': 11, 'endColumn': 9}, {'ruleId': 'no-param-reassign', 'severity': 2, 'message': ""Assignment to function parameter 'nums'."", 'line': 12, 'column': 5, 'nodeType': 'Identifier', 'messageId': 'assignmentToFunctionParam', 'endLine': 12, 'endColumn': 9}, {'ruleId': 'id-length', 'severity': 2, 'message': ""Identifier name 'a' is too short (< 2)."", 'line': 13, 'column': 16, 'nodeType': 'Identifier', 'messageId': 'tooShort', 'endLine': 13, 'endColumn': 17}, {'ruleId': 'id-length', 'severity': 2, 'message': ""Identifier name 'b' is too short (< 2)."", 'line': 13, 'column': 18, 'nodeType': 'Identifier', 'messageId': 'tooShort', 'endLine': 13, 'endColumn': 19}, {'ruleId': 'id-length', 'severity': 2, 'message': ""Identifier name 'i' is too short (< 2)."", 'line': 16, 'column': 13, 'nodeType': 'Identifier', 'messageId': 'tooShort', 'endLine': 16, 'endColumn': 14}, {'ruleId': 'no-plusplus', 'severity': 2, 'message': ""Unary operator '++' used."", 'line': 16, 'column': 35, 'nodeType': 'UpdateExpression', 'messageId': 'unexpectedUnaryOp', 'endLine': 16, 'endColumn': 38}, {'ruleId': 'prefer-const', 'severity': 2, 'message': ""'diff' is never reassigned. Use 'const' instead."", 'line': 17, 'column': 13, 'nodeType': 'Identifier', 'messageId': 'useConst', 'endLine': 17, 'endColumn': 17, 'fix': {'range': [337, 368], 'text': 'const diff = nums[i+1] - nums[i];'}}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 1.', 'line': 17, 'column': 27, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 17, 'endColumn': 28}, {'ruleId': 'eqeqeq', 'severity': 2, 'message': ""Expected '===' and instead saw '=='."", 'line': 18, 'column': 17, 'nodeType': 'BinaryExpression', 'messageId': 'unexpected', 'endLine': 18, 'endColumn': 19}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 1.', 'line': 18, 'column': 20, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 18, 'endColumn': 21}, {'ruleId': 'no-plusplus', 'severity': 2, 'message': ""Unary operator '++' used."", 'line': 19, 'column': 14, 'nodeType': 'UpdateExpression', 'messageId': 'unexpectedUnaryOp', 'endLine': 19, 'endColumn': 21}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 1.', 'line': 24, 'column': 21, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 24, 'endColumn': 22}]


Google Closure Compiler Output:

[{'level': 'warning', 'description': 'Bad type annotation. expected closing } See https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler for more information.', 'key': 'JSC_TYPE_PARSE_ERROR', 'source': '/tmp/tmpathy9xdm', 'line': 2, 'column': 17, 'context': ' * @param {number[]} nums\r\n                 ^'}, {'level': 'warning', 'description': 'Bad type annotation. expecting a variable name in a @param tag. See https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler for more information.', 'key': 'JSC_TYPE_PARSE_ERROR', 'source': '/tmp/tmpathy9xdm', 'line': 2, 'column': 17, 'context': ' * @param {number[]} nums\r\n                 ^'}, {'level': 'warning', 'description': 'Using `var` (prefer `const` or `let`).', 'key': 'JSC_VAR', 'source': '/tmp/tmpathy9xdm', 'line': 5, 'column': 0, 'length': 551, 'context': 'var longestConsecutive = function(nums) {\r\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Parameter must have JSDoc.', 'key': 'JSC_MISSING_PARAMETER_JSDOC', 'source': '/tmp/tmpathy9xdm', 'line': 5, 'column': 34, 'length': 4, 'context': 'var longestConsecutive = function(nums) {\r\n                                  ^^^^'}, {'level': 'warning', 'description': 'Useless empty statement. Remove semicolon.', 'key': 'JSC_USELESS_EMPTY_STATEMENT', 'source': '/tmp/tmpathy9xdm', 'line': 28, 'column': 27, 'length': 1, 'context': '    return largestSequence;;\r\n                           ^'}, {'level': 'info', 'description': '0 error(s), 5 warning(s), 87.7% typed'}]"
45,Shortest Palindrome,"You are given a string s. You can convert s to a palindrome by adding characters in front of it.

Return the shortest palindrome you can find by performing this transformation.","Example 1:

Input: s = ""aacecaaa""
Output: ""aaacecaaa""
Example 2:

Input: s = ""abcd""
Output: ""dcbabcd""","var shortestPalindrome = function(s) {
    let count = kmp(s.split('').reverse().join(''), s);
    return s.slice(count).split('').reverse().join('') + s;
};

var kmp = function(txt, patt) {
    let newString = patt + '#' + txt;
    let pi = new Array(newString.length).fill(0);
    let i = 1, k = 0;
    while (i < newString.length) {
        if (newString[i] === newString[k]) {
            k++;
            pi[i] = k;
            i++;
        } else {
            if (k > 0) {
                k = pi[k - 1];
            } else {
                pi[i] = 0;
                i++;
            }
        }
    }
    return pi[newString.length - 1];
};","0 <= s.length <= 5 * 10^4
s consists of lowercase English letters only.",Hard,https://leetcode.com/problems/shortest-palindrome/description/,"/**
 * @param {string} s
 * @return {string}
 */
var shortestPalindrome = function(s) {
    
};","ESLint Output:

[{'ruleId': 'no-var', 'severity': 2, 'message': 'Unexpected var, use let or const instead.', 'line': 1, 'column': 1, 'nodeType': 'VariableDeclaration', 'messageId': 'unexpectedVar', 'endLine': 4, 'endColumn': 3, 'fix': {'range': [0, 3], 'text': 'let'}}, {'ruleId': 'no-unused-vars', 'severity': 2, 'message': ""'shortestPalindrome' is assigned a value but never used."", 'line': 1, 'column': 5, 'nodeType': 'Identifier', 'messageId': 'unusedVar', 'endLine': 1, 'endColumn': 23}, {'ruleId': 'func-names', 'severity': 2, 'message': 'Unexpected unnamed function.', 'line': 1, 'column': 26, 'nodeType': 'FunctionExpression', 'messageId': 'unnamed', 'endLine': 1, 'endColumn': 34}, {'ruleId': 'id-length', 'severity': 2, 'message': ""Identifier name 's' is too short (< 2)."", 'line': 1, 'column': 35, 'nodeType': 'Identifier', 'messageId': 'tooShort', 'endLine': 1, 'endColumn': 36}, {'ruleId': 'prefer-const', 'severity': 2, 'message': ""'count' is never reassigned. Use 'const' instead."", 'line': 2, 'column': 9, 'nodeType': 'Identifier', 'messageId': 'useConst', 'endLine': 2, 'endColumn': 14, 'fix': {'range': [44, 95], 'text': ""const count = kmp(s.split('').reverse().join(''), s);""}}, {'ruleId': 'no-use-before-define', 'severity': 2, 'message': ""'kmp' was used before it was defined."", 'line': 2, 'column': 17, 'nodeType': 'Identifier', 'messageId': 'usedBeforeDefined', 'endLine': 2, 'endColumn': 20}, {'ruleId': 'one-var', 'severity': 2, 'message': ""Combine this with the previous 'var' statement."", 'line': 6, 'column': 1, 'nodeType': 'VariableDeclaration', 'messageId': 'combine', 'endLine': 25, 'endColumn': 3, 'fix': {'range': [159, 167], 'text': ',\r\n\r\n'}}, {'ruleId': 'no-var', 'severity': 2, 'message': 'Unexpected var, use let or const instead.', 'line': 6, 'column': 1, 'nodeType': 'VariableDeclaration', 'messageId': 'unexpectedVar', 'endLine': 25, 'endColumn': 3}, {'ruleId': 'func-names', 'severity': 2, 'message': 'Unexpected unnamed function.', 'line': 6, 'column': 11, 'nodeType': 'FunctionExpression', 'messageId': 'unnamed', 'endLine': 6, 'endColumn': 19}, {'ruleId': 'max-statements', 'severity': 2, 'message': 'Function has too many statements (13). Maximum allowed is 10.', 'line': 6, 'column': 11, 'nodeType': 'FunctionExpression', 'messageId': 'exceed', 'endLine': 25, 'endColumn': 2}, {'ruleId': 'prefer-const', 'severity': 2, 'message': ""'newString' is never reassigned. Use 'const' instead."", 'line': 7, 'column': 9, 'nodeType': 'Identifier', 'messageId': 'useConst', 'endLine': 7, 'endColumn': 18, 'fix': {'range': [201, 234], 'text': ""const newString = patt + '#' + txt;""}}, {'ruleId': 'prefer-template', 'severity': 2, 'message': 'Unexpected string concatenation.', 'line': 7, 'column': 21, 'nodeType': 'BinaryExpression', 'messageId': 'unexpectedStringConcatenation', 'endLine': 7, 'endColumn': 37, 'fix': {'range': [217, 233], 'text': '`${patt  }#${  txt}`'}}, {'ruleId': 'one-var', 'severity': 2, 'message': ""Combine this with the previous 'let' statement."", 'line': 8, 'column': 5, 'nodeType': 'VariableDeclaration', 'messageId': 'combine', 'endLine': 8, 'endColumn': 50, 'fix': {'range': [233, 243], 'text': ',\r\n    '}}, {'ruleId': 'prefer-const', 'severity': 2, 'message': ""'pi' is never reassigned. Use 'const' instead."", 'line': 8, 'column': 9, 'nodeType': 'Identifier', 'messageId': 'useConst', 'endLine': 8, 'endColumn': 11, 'fix': {'range': [240, 285], 'text': 'const pi = new Array(newString.length).fill(0);'}}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 0.', 'line': 8, 'column': 47, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 8, 'endColumn': 48}, {'ruleId': 'one-var', 'severity': 2, 'message': ""Combine this with the previous 'let' statement."", 'line': 9, 'column': 5, 'nodeType': 'VariableDeclaration', 'messageId': 'combine', 'endLine': 9, 'endColumn': 22, 'fix': {'range': [284, 294], 'text': ',\r\n    '}}, {'ruleId': 'id-length', 'severity': 2, 'message': ""Identifier name 'i' is too short (< 2)."", 'line': 9, 'column': 9, 'nodeType': 'Identifier', 'messageId': 'tooShort', 'endLine': 9, 'endColumn': 10}, {'ruleId': 'id-length', 'severity': 2, 'message': ""Identifier name 'k' is too short (< 2)."", 'line': 9, 'column': 16, 'nodeType': 'Identifier', 'messageId': 'tooShort', 'endLine': 9, 'endColumn': 17}, {'ruleId': 'no-plusplus', 'severity': 2, 'message': ""Unary operator '++' used."", 'line': 12, 'column': 13, 'nodeType': 'UpdateExpression', 'messageId': 'unexpectedUnaryOp', 'endLine': 12, 'endColumn': 16}, {'ruleId': 'no-plusplus', 'severity': 2, 'message': ""Unary operator '++' used."", 'line': 14, 'column': 13, 'nodeType': 'UpdateExpression', 'messageId': 'unexpectedUnaryOp', 'endLine': 14, 'endColumn': 16}, {'ruleId': 'no-lonely-if', 'severity': 2, 'message': 'Unexpected if as the only statement in an else block.', 'line': 16, 'column': 13, 'nodeType': 'IfStatement', 'messageId': 'unexpectedLonelyIf', 'endLine': 21, 'endColumn': 14, 'fix': {'range': [467, 624], 'text': 'if (k > 0) {\r\n                k = pi[k - 1];\r\n            } else {\r\n                pi[i] = 0;\r\n                i++;\r\n            }'}}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 0.', 'line': 16, 'column': 21, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 16, 'endColumn': 22}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 1.', 'line': 17, 'column': 28, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 17, 'endColumn': 29}, {'ruleId': 'no-plusplus', 'severity': 2, 'message': ""Unary operator '++' used."", 'line': 20, 'column': 17, 'nodeType': 'UpdateExpression', 'messageId': 'unexpectedUnaryOp', 'endLine': 20, 'endColumn': 20}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 1.', 'line': 24, 'column': 34, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 24, 'endColumn': 35}]


Google Closure Compiler Output:

[{'level': 'warning', 'description': 'Using `var` (prefer `const` or `let`).', 'key': 'JSC_VAR', 'source': '/tmp/tmp9acrnvmf', 'line': 1, 'column': 0, 'length': 160, 'context': 'var shortestPalindrome = function(s) {\r\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Function must have JSDoc.', 'key': 'JSC_MISSING_JSDOC', 'source': '/tmp/tmp9acrnvmf', 'line': 1, 'column': 25, 'length': 134, 'context': 'var shortestPalindrome = function(s) {\r\n                         ^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Using `var` (prefer `const` or `let`).', 'key': 'JSC_VAR', 'source': '/tmp/tmp9acrnvmf', 'line': 6, 'column': 0, 'length': 509, 'context': 'var kmp = function(txt, patt) {\r\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Function must have JSDoc.', 'key': 'JSC_MISSING_JSDOC', 'source': '/tmp/tmp9acrnvmf', 'line': 6, 'column': 10, 'length': 498, 'context': 'var kmp = function(txt, patt) {\r\n          ^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'info', 'description': '0 error(s), 4 warning(s), 61.8% typed'}]"
46,Word Ladder II,"A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that:

Every adjacent pair of words differs by a single letter.
Every s_i for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.
s_k == endWord
Given two words, beginWord and endWord, and a dictionary wordList, return all the shortest transformation sequences from beginWord to endWord, or an empty list if no such sequence exists. Each sequence should be returned as a list of the words [beginWord, s_1, s_2, ..., s_k].","Example 1:

Input: beginWord = ""hit"", endWord = ""cog"", wordList = [""hot"",""dot"",""dog"",""lot"",""log"",""cog""]
Output: [[""hit"",""hot"",""dot"",""dog"",""cog""],[""hit"",""hot"",""lot"",""log"",""cog""]]
Explanation: There are 2 shortest transformation sequences:
""hit"" -> ""hot"" -> ""dot"" -> ""dog"" -> ""cog""
""hit"" -> ""hot"" -> ""lot"" -> ""log"" -> ""cog""
Example 2:

Input: beginWord = ""hit"", endWord = ""cog"", wordList = [""hot"",""dot"",""dog"",""lot"",""log""]
Output: []
Explanation: The endWord ""cog"" is not in wordList, therefore there is no valid transformation sequence.","var findLadders = function(beginWord, endWord, wordList) {
    if (!wordList.includes(endWord)) return [];
    
    const result = [], map = new Map(), steps = new Map();
	
    for (const word of wordList) {
        for (let i = 0; i < word.length; i++) {
            const hash = word.substring(0, i) + '*' + word.substring(i + 1);
			
            if (!map.has(hash)) map.set(hash, []);
			
            map.get(hash).push(word);
            steps.set(hash, wordList.length);
        }
    }
    
    const queue = [[beginWord]];
	
    while (queue.length > 0) {
        const current = queue.shift();
        const set = new Set(current);
        const lastWord = current[current.length - 1];
        if (lastWord === endWord) {
            if (result.length === 0 || current.length === result[0].length)
                result.push(current);
            else break;
        } else {
            for (let i = 0; i < lastWord.length; i++) {
                const hash = lastWord.substring(0, i) + '*' + lastWord.substring(i + 1);
                if (!map.has(hash) || current.length > steps.get(hash))
					continue;
					
                for (const nextWord of map.get(hash))
                    if (!set.has(nextWord))
						queue.push([...current, nextWord]);
						
                steps.set(hash, current.length);
            }
        }
    }
    return result;
};","1 <= beginWord.length <= 5
endWord.length == beginWord.length
1 <= wordList.length <= 500
wordList[i].length == beginWord.length
beginWord, endWord, and wordList[i] consist of lowercase English letters.
beginWord != endWord
All the words in wordList are unique.
The sum of all shortest transformation sequences does not exceed 105.",Hard,https://leetcode.com/problems/word-ladder-ii/description/,"/**
 * @param {string} beginWord
 * @param {string} endWord
 * @param {string[]} wordList
 * @return {string[][]}
 */
var findLadders = function(beginWord, endWord, wordList) {
    
};","ESLint Output:

[{'ruleId': 'no-var', 'severity': 2, 'message': 'Unexpected var, use let or const instead.', 'line': 1, 'column': 1, 'nodeType': 'VariableDeclaration', 'messageId': 'unexpectedVar', 'endLine': 42, 'endColumn': 3, 'fix': {'range': [0, 3], 'text': 'let'}}, {'ruleId': 'no-unused-vars', 'severity': 2, 'message': ""'findLadders' is assigned a value but never used."", 'line': 1, 'column': 5, 'nodeType': 'Identifier', 'messageId': 'unusedVar', 'endLine': 1, 'endColumn': 16}, {'ruleId': 'func-names', 'severity': 2, 'message': 'Unexpected unnamed function.', 'line': 1, 'column': 19, 'nodeType': 'FunctionExpression', 'messageId': 'unnamed', 'endLine': 1, 'endColumn': 27}, {'ruleId': 'max-statements', 'severity': 2, 'message': 'Function has too many statements (21). Maximum allowed is 10.', 'line': 1, 'column': 19, 'nodeType': 'FunctionExpression', 'messageId': 'exceed', 'endLine': 42, 'endColumn': 2}, {'ruleId': 'curly', 'severity': 2, 'message': ""Expected { after 'if' condition."", 'line': 2, 'column': 38, 'nodeType': 'IfStatement', 'messageId': 'missingCurlyAfterCondition', 'endLine': 2, 'endColumn': 48, 'fix': {'range': [97, 107], 'text': '{return [];}'}}, {'ruleId': 'sort-vars', 'severity': 2, 'message': 'Variables within the same declaration block should be sorted alphabetically.', 'line': 4, 'column': 24, 'nodeType': 'VariableDeclarator', 'messageId': 'sortVars', 'endLine': 4, 'endColumn': 39}, {'ruleId': 'id-length', 'severity': 2, 'message': ""Identifier name 'i' is too short (< 2)."", 'line': 7, 'column': 18, 'nodeType': 'Identifier', 'messageId': 'tooShort', 'endLine': 7, 'endColumn': 19}, {'ruleId': 'no-plusplus', 'severity': 2, 'message': ""Unary operator '++' used."", 'line': 7, 'column': 42, 'nodeType': 'UpdateExpression', 'messageId': 'unexpectedUnaryOp', 'endLine': 7, 'endColumn': 45}, {'ruleId': 'prefer-template', 'severity': 2, 'message': 'Unexpected string concatenation.', 'line': 8, 'column': 26, 'nodeType': 'BinaryExpression', 'messageId': 'unexpectedStringConcatenation', 'endLine': 8, 'endColumn': 76, 'fix': {'range': [288, 338], 'text': '`${word.substring(0, i)  }*${  word.substring(i + 1)}`'}}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 0.', 'line': 8, 'column': 41, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 8, 'endColumn': 42}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 1.', 'line': 8, 'column': 74, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 8, 'endColumn': 75}, {'ruleId': 'curly', 'severity': 2, 'message': ""Expected { after 'if' condition."", 'line': 10, 'column': 33, 'nodeType': 'IfStatement', 'messageId': 'missingCurlyAfterCondition', 'endLine': 10, 'endColumn': 51, 'fix': {'range': [378, 396], 'text': '{map.set(hash, []);}'}}, {'ruleId': 'one-var', 'severity': 2, 'message': ""Combine this with the previous 'const' statement."", 'line': 17, 'column': 5, 'nodeType': 'VariableDeclaration', 'messageId': 'combine', 'endLine': 17, 'endColumn': 33}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 0.', 'line': 19, 'column': 27, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 19, 'endColumn': 28}, {'ruleId': 'one-var', 'severity': 2, 'message': ""Combine this with the previous 'const' statement."", 'line': 21, 'column': 9, 'nodeType': 'VariableDeclaration', 'messageId': 'combine', 'endLine': 21, 'endColumn': 38, 'fix': {'range': [619, 635], 'text': ',\r\n        '}}, {'ruleId': 'one-var', 'severity': 2, 'message': ""Combine this with the previous 'const' statement."", 'line': 22, 'column': 9, 'nodeType': 'VariableDeclaration', 'messageId': 'combine', 'endLine': 22, 'endColumn': 54, 'fix': {'range': [658, 674], 'text': ',\r\n        '}}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 1.', 'line': 22, 'column': 51, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 22, 'endColumn': 52}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 0.', 'line': 24, 'column': 35, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 24, 'endColumn': 36}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 0.', 'line': 24, 'column': 66, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 24, 'endColumn': 67}, {'ruleId': 'curly', 'severity': 2, 'message': ""Expected { after 'if' condition."", 'line': 25, 'column': 17, 'nodeType': 'IfStatement', 'messageId': 'missingCurlyAfterCondition', 'endLine': 25, 'endColumn': 38, 'fix': {'range': [846, 867], 'text': '{result.push(current);}'}}, {'ruleId': 'curly', 'severity': 2, 'message': ""Expected { after 'else'."", 'line': 26, 'column': 18, 'nodeType': 'IfStatement', 'messageId': 'missingCurlyAfter', 'endLine': 26, 'endColumn': 24, 'fix': {'range': [886, 892], 'text': '{break;}'}}, {'ruleId': 'id-length', 'severity': 2, 'message': ""Identifier name 'i' is too short (< 2)."", 'line': 28, 'column': 22, 'nodeType': 'Identifier', 'messageId': 'tooShort', 'endLine': 28, 'endColumn': 23}, {'ruleId': 'no-plusplus', 'severity': 2, 'message': ""Unary operator '++' used."", 'line': 28, 'column': 50, 'nodeType': 'UpdateExpression', 'messageId': 'unexpectedUnaryOp', 'endLine': 28, 'endColumn': 53}, {'ruleId': 'prefer-template', 'severity': 2, 'message': 'Unexpected string concatenation.', 'line': 29, 'column': 30, 'nodeType': 'BinaryExpression', 'messageId': 'unexpectedStringConcatenation', 'endLine': 29, 'endColumn': 88, 'fix': {'range': [998, 1056], 'text': '`${lastWord.substring(0, i)  }*${  lastWord.substring(i + 1)}`'}}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 0.', 'line': 29, 'column': 49, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 29, 'endColumn': 50}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 1.', 'line': 29, 'column': 86, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 29, 'endColumn': 87}, {'ruleId': 'curly', 'severity': 2, 'message': ""Expected { after 'if' condition."", 'line': 31, 'column': 6, 'nodeType': 'IfStatement', 'messageId': 'missingCurlyAfterCondition', 'endLine': 31, 'endColumn': 15, 'fix': {'range': [1137, 1146], 'text': '{continue;}'}}, {'ruleId': 'no-continue', 'severity': 2, 'message': 'Unexpected use of continue statement.', 'line': 31, 'column': 6, 'nodeType': 'ContinueStatement', 'messageId': 'unexpected', 'endLine': 31, 'endColumn': 15}, {'ruleId': 'curly', 'severity': 2, 'message': ""Expected { after 'for-of'."", 'line': 34, 'column': 21, 'nodeType': 'ForOfStatement', 'messageId': 'missingCurlyAfter', 'endLine': 35, 'endColumn': 42, 'fix': {'range': [1230, 1296], 'text': '{if (!set.has(nextWord))\r\n\t\t\t\t\t\tqueue.push([...current, nextWord]);}'}}, {'ruleId': 'max-depth', 'severity': 2, 'message': 'Blocks are nested too deeply (5). Maximum allowed is 4.', 'line': 34, 'column': 21, 'nodeType': 'IfStatement', 'messageId': 'tooDeeply', 'endLine': 35, 'endColumn': 42}, {'ruleId': 'curly', 'severity': 2, 'message': ""Expected { after 'if' condition."", 'line': 35, 'column': 7, 'nodeType': 'IfStatement', 'messageId': 'missingCurlyAfterCondition', 'endLine': 35, 'endColumn': 42, 'fix': {'range': [1261, 1296], 'text': '{queue.push([...current, nextWord]);}'}}]


Google Closure Compiler Output:

[{'level': 'warning', 'description': 'Using `var` (prefer `const` or `let`).', 'key': 'JSC_VAR', 'source': '/tmp/tmp8_3cavij', 'line': 1, 'column': 0, 'length': 1411, 'context': 'var findLadders = function(beginWord, endWord, wordList) {\r\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Function must have JSDoc.', 'key': 'JSC_MISSING_JSDOC', 'source': '/tmp/tmp8_3cavij', 'line': 1, 'column': 18, 'length': 1392, 'context': 'var findLadders = function(beginWord, endWord, wordList) {\r\n                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'info', 'description': '0 error(s), 2 warning(s), 67.1% typed'}]"
47,Wildcard Matching,"Given an input string (s) and a pattern (p), implement wildcard pattern matching with support for '?' and '*' where:

'?' Matches any single character.
'*' Matches any sequence of characters (including the empty sequence).
The matching should cover the entire input string (not partial).","Example 1:

Input: s = ""aa"", p = ""a""
Output: false
Explanation: ""a"" does not match the entire string ""aa"".
Example 2:

Input: s = ""aa"", p = ""*""
Output: true
Explanation: '*' matches any sequence.
Example 3:

Input: s = ""cb"", p = ""?a""
Output: false
Explanation: '?' matches 'c', but the second letter is 'a', which does not match 'b'.","const isMatch = function (string, pattern) {
  let s = 0, p = 0;
  let starIdx = -1, pointer = -1;

  while (s < string.length) {
    if ((p < pattern.length && string[s] === pattern[p]) || pattern[p] === ""?"") {
      s++;
      p++;
    } 
	else if (p < pattern.length && pattern[p] === ""*"") {
      starIdx = p;
      pointer = s;
      p++;
    } 
	else if (starIdx === -1) return false;
    else {
      p = starIdx + 1;
      s = pointer + 1;
      pointer = s;
    }
  }
  for (let idx = p; idx < pattern.length; idx++) {
    if (pattern[idx] !== ""*"") return false;
  }
  return true;
};","0 <= s.length, p.length <= 2000
s contains only lowercase English letters.
p contains only lowercase English letters, '?' or '*'.",Hard,https://leetcode.com/problems/wildcard-matching/description/,"/**
 * @param {string} s
 * @param {string} p
 * @return {boolean}
 */
var isMatch = function(s, p) {
    
};","ESLint Output:

[{'ruleId': 'no-unused-vars', 'severity': 2, 'message': ""'isMatch' is assigned a value but never used."", 'line': 1, 'column': 7, 'nodeType': 'Identifier', 'messageId': 'unusedVar', 'endLine': 1, 'endColumn': 14}, {'ruleId': 'func-names', 'severity': 2, 'message': 'Unexpected unnamed function.', 'line': 1, 'column': 17, 'nodeType': 'FunctionExpression', 'messageId': 'unnamed', 'endLine': 1, 'endColumn': 26}, {'ruleId': 'max-statements', 'severity': 2, 'message': 'Function has too many statements (15). Maximum allowed is 10.', 'line': 1, 'column': 17, 'nodeType': 'FunctionExpression', 'messageId': 'exceed', 'endLine': 26, 'endColumn': 2}, {'ruleId': 'id-length', 'severity': 2, 'message': ""Identifier name 's' is too short (< 2)."", 'line': 2, 'column': 7, 'nodeType': 'Identifier', 'messageId': 'tooShort', 'endLine': 2, 'endColumn': 8}, {'ruleId': 'sort-vars', 'severity': 2, 'message': 'Variables within the same declaration block should be sorted alphabetically.', 'line': 2, 'column': 14, 'nodeType': 'VariableDeclarator', 'messageId': 'sortVars', 'endLine': 2, 'endColumn': 19, 'fix': {'range': [52, 64], 'text': 'p = 0, s = 0'}}, {'ruleId': 'id-length', 'severity': 2, 'message': ""Identifier name 'p' is too short (< 2)."", 'line': 2, 'column': 14, 'nodeType': 'Identifier', 'messageId': 'tooShort', 'endLine': 2, 'endColumn': 15}, {'ruleId': 'one-var', 'severity': 2, 'message': ""Combine this with the previous 'let' statement."", 'line': 3, 'column': 3, 'nodeType': 'VariableDeclaration', 'messageId': 'combine', 'endLine': 3, 'endColumn': 34, 'fix': {'range': [64, 72], 'text': ',\r\n  '}}, {'ruleId': 'sort-vars', 'severity': 2, 'message': 'Variables within the same declaration block should be sorted alphabetically.', 'line': 3, 'column': 21, 'nodeType': 'VariableDeclarator', 'messageId': 'sortVars', 'endLine': 3, 'endColumn': 33}, {'ruleId': 'no-plusplus', 'severity': 2, 'message': ""Unary operator '++' used."", 'line': 7, 'column': 7, 'nodeType': 'UpdateExpression', 'messageId': 'unexpectedUnaryOp', 'endLine': 7, 'endColumn': 10}, {'ruleId': 'no-plusplus', 'severity': 2, 'message': ""Unary operator '++' used."", 'line': 8, 'column': 7, 'nodeType': 'UpdateExpression', 'messageId': 'unexpectedUnaryOp', 'endLine': 8, 'endColumn': 10}, {'ruleId': 'no-plusplus', 'severity': 2, 'message': ""Unary operator '++' used."", 'line': 13, 'column': 7, 'nodeType': 'UpdateExpression', 'messageId': 'unexpectedUnaryOp', 'endLine': 13, 'endColumn': 10}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: -1.', 'line': 15, 'column': 23, 'nodeType': 'UnaryExpression', 'messageId': 'noMagic', 'endLine': 15, 'endColumn': 25}, {'ruleId': 'curly', 'severity': 2, 'message': ""Expected { after 'if' condition."", 'line': 15, 'column': 27, 'nodeType': 'IfStatement', 'messageId': 'missingCurlyAfterCondition', 'endLine': 15, 'endColumn': 40, 'fix': {'range': [391, 404], 'text': '{return false;}'}}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 1.', 'line': 17, 'column': 21, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 17, 'endColumn': 22}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 1.', 'line': 18, 'column': 21, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 18, 'endColumn': 22}, {'ruleId': 'no-plusplus', 'severity': 2, 'message': ""Unary operator '++' used."", 'line': 22, 'column': 43, 'nodeType': 'UpdateExpression', 'messageId': 'unexpectedUnaryOp', 'endLine': 22, 'endColumn': 48}, {'ruleId': 'curly', 'severity': 2, 'message': ""Expected { after 'if' condition."", 'line': 23, 'column': 31, 'nodeType': 'IfStatement', 'messageId': 'missingCurlyAfterCondition', 'endLine': 23, 'endColumn': 44, 'fix': {'range': [580, 593], 'text': '{return false;}'}}]


Google Closure Compiler Output:

[{'level': 'warning', 'description': 'Function must have JSDoc.', 'key': 'JSC_MISSING_JSDOC', 'source': '/tmp/tmp4se8k63l', 'line': 1, 'column': 16, 'length': 601, 'context': 'const isMatch = function (string, pattern) {\r\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'info', 'description': '0 error(s), 1 warning(s), 82.1% typed'}]"
48,Regular Expression Matching,"Given an input string s and a pattern p, implement regular expression matching with support for '.' and '*' where:

'.' Matches any single character.​​​​
'*' Matches zero or more of the preceding element.
The matching should cover the entire input string (not partial).

","Example 1:

Input: s = ""aa"", p = ""a""
Output: false
Explanation: ""a"" does not match the entire string ""aa"".
Example 2:

Input: s = ""aa"", p = ""a*""
Output: true
Explanation: '*' means zero or more of the preceding element, 'a'. Therefore, by repeating 'a' once, it becomes ""aa"".
Example 3:

Input: s = ""ab"", p = "".*""
Output: true
Explanation: "".*"" means ""zero or more (*) of any character (.)"".","var isMatch = function(s, p) {
    const m = s.length, n = p.length;
    const dp = new Array(m+1).fill().map(() => new Array(n+1).fill(false));
    dp[0][0] = true; // empty pattern matches empty string

    // initialize first row (empty string)
    for (let j = 1; j <= n; j++) {
        if (p[j-1] === '*')
        dp[0][j] = dp[0][j-2];
    }

    // fill in remaining cells
    for (let i = 1; i <= m; i++) {
        for (let j = 1; j <= n; j++) {
        if (s[i-1] === p[j-1] || p[j-1] === '.') {
            dp[i][j] = dp[i-1][j-1];
        } else if (p[j-1] === '*') {
            dp[i][j] = dp[i][j-2]; // zero occurrences
            if (s[i-1] === p[j-2] || p[j-2] === '.') {
            dp[i][j] = dp[i][j] || dp[i-1][j]; // one or more occurrences
            }
        }
        }
    }
    return dp[m][n];
}","1 <= s.length <= 20
1 <= p.length <= 20
s contains only lowercase English letters.
p contains only lowercase English letters, '.', and '*'.
It is guaranteed for each appearance of the character '*', there will be a previous valid character to match.",Hard,https://leetcode.com/problems/regular-expression-matching/solutions/3489574/c-java-python-javascript-easy-dp-solution-with-detailed-explanation-dynamic-programming/,"/**
 * @param {string} s
 * @param {string} p
 * @return {boolean}
 */
var isMatch = function(s, p) {
    
};","ESLint Output:

[{'ruleId': 'no-var', 'severity': 2, 'message': 'Unexpected var, use let or const instead.', 'line': 1, 'column': 1, 'nodeType': 'VariableDeclaration', 'messageId': 'unexpectedVar', 'endLine': 26, 'endColumn': 2, 'fix': {'range': [0, 3], 'text': 'let'}}, {'ruleId': 'no-unused-vars', 'severity': 2, 'message': ""'isMatch' is assigned a value but never used."", 'line': 1, 'column': 5, 'nodeType': 'Identifier', 'messageId': 'unusedVar', 'endLine': 1, 'endColumn': 12}, {'ruleId': 'func-names', 'severity': 2, 'message': 'Unexpected unnamed function.', 'line': 1, 'column': 15, 'nodeType': 'FunctionExpression', 'messageId': 'unnamed', 'endLine': 1, 'endColumn': 23}, {'ruleId': 'max-statements', 'severity': 2, 'message': 'Function has too many statements (13). Maximum allowed is 10.', 'line': 1, 'column': 15, 'nodeType': 'FunctionExpression', 'messageId': 'exceed', 'endLine': 26, 'endColumn': 2}, {'ruleId': 'id-length', 'severity': 2, 'message': ""Identifier name 's' is too short (< 2)."", 'line': 1, 'column': 24, 'nodeType': 'Identifier', 'messageId': 'tooShort', 'endLine': 1, 'endColumn': 25}, {'ruleId': 'id-length', 'severity': 2, 'message': ""Identifier name 'p' is too short (< 2)."", 'line': 1, 'column': 27, 'nodeType': 'Identifier', 'messageId': 'tooShort', 'endLine': 1, 'endColumn': 28}, {'ruleId': 'id-length', 'severity': 2, 'message': ""Identifier name 'm' is too short (< 2)."", 'line': 2, 'column': 11, 'nodeType': 'Identifier', 'messageId': 'tooShort', 'endLine': 2, 'endColumn': 12}, {'ruleId': 'id-length', 'severity': 2, 'message': ""Identifier name 'n' is too short (< 2)."", 'line': 2, 'column': 25, 'nodeType': 'Identifier', 'messageId': 'tooShort', 'endLine': 2, 'endColumn': 26}, {'ruleId': 'one-var', 'severity': 2, 'message': ""Combine this with the previous 'const' statement."", 'line': 3, 'column': 5, 'nodeType': 'VariableDeclaration', 'messageId': 'combine', 'endLine': 3, 'endColumn': 76, 'fix': {'range': [67, 78], 'text': ',\n    '}}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 1.', 'line': 3, 'column': 28, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 3, 'endColumn': 29}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 1.', 'line': 3, 'column': 60, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 3, 'endColumn': 61}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 0.', 'line': 4, 'column': 8, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 4, 'endColumn': 9}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 0.', 'line': 4, 'column': 11, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 4, 'endColumn': 12}, {'ruleId': 'capitalized-comments', 'severity': 2, 'message': 'Comments should not begin with a lowercase character.', 'line': 4, 'column': 22, 'nodeType': None, 'messageId': 'unexpectedLowercaseComment', 'endLine': 4, 'endColumn': 59, 'fix': {'range': [169, 170], 'text': 'E'}}, {'ruleId': 'no-inline-comments', 'severity': 2, 'message': 'Unexpected comment inline with code.', 'line': 4, 'column': 22, 'nodeType': 'Line', 'messageId': 'unexpectedInlineComment', 'endLine': 4, 'endColumn': 59}, {'ruleId': 'capitalized-comments', 'severity': 2, 'message': 'Comments should not begin with a lowercase character.', 'line': 6, 'column': 5, 'nodeType': None, 'messageId': 'unexpectedLowercaseComment', 'endLine': 6, 'endColumn': 43, 'fix': {'range': [212, 213], 'text': 'I'}}, {'ruleId': 'id-length', 'severity': 2, 'message': ""Identifier name 'j' is too short (< 2)."", 'line': 7, 'column': 14, 'nodeType': 'Identifier', 'messageId': 'tooShort', 'endLine': 7, 'endColumn': 15}, {'ruleId': 'no-plusplus', 'severity': 2, 'message': ""Unary operator '++' used."", 'line': 7, 'column': 29, 'nodeType': 'UpdateExpression', 'messageId': 'unexpectedUnaryOp', 'endLine': 7, 'endColumn': 32}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 1.', 'line': 8, 'column': 17, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 8, 'endColumn': 18}, {'ruleId': 'curly', 'severity': 2, 'message': ""Expected { after 'if' condition."", 'line': 9, 'column': 9, 'nodeType': 'IfStatement', 'messageId': 'missingCurlyAfterCondition', 'endLine': 9, 'endColumn': 31, 'fix': {'range': [319, 341], 'text': '{dp[0][j] = dp[0][j-2];}'}}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 0.', 'line': 9, 'column': 12, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 9, 'endColumn': 13}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 0.', 'line': 9, 'column': 23, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 9, 'endColumn': 24}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 2.', 'line': 9, 'column': 28, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 9, 'endColumn': 29}, {'ruleId': 'capitalized-comments', 'severity': 2, 'message': 'Comments should not begin with a lowercase character.', 'line': 12, 'column': 5, 'nodeType': None, 'messageId': 'unexpectedLowercaseComment', 'endLine': 12, 'endColumn': 31, 'fix': {'range': [356, 357], 'text': 'F'}}, {'ruleId': 'id-length', 'severity': 2, 'message': ""Identifier name 'i' is too short (< 2)."", 'line': 13, 'column': 14, 'nodeType': 'Identifier', 'messageId': 'tooShort', 'endLine': 13, 'endColumn': 15}, {'ruleId': 'no-plusplus', 'severity': 2, 'message': ""Unary operator '++' used."", 'line': 13, 'column': 29, 'nodeType': 'UpdateExpression', 'messageId': 'unexpectedUnaryOp', 'endLine': 13, 'endColumn': 32}, {'ruleId': 'id-length', 'severity': 2, 'message': ""Identifier name 'j' is too short (< 2)."", 'line': 14, 'column': 18, 'nodeType': 'Identifier', 'messageId': 'tooShort', 'endLine': 14, 'endColumn': 19}, {'ruleId': 'no-plusplus', 'severity': 2, 'message': ""Unary operator '++' used."", 'line': 14, 'column': 33, 'nodeType': 'UpdateExpression', 'messageId': 'unexpectedUnaryOp', 'endLine': 14, 'endColumn': 36}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 1.', 'line': 15, 'column': 17, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 15, 'endColumn': 18}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 1.', 'line': 15, 'column': 28, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 15, 'endColumn': 29}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 1.', 'line': 15, 'column': 38, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 15, 'endColumn': 39}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 1.', 'line': 16, 'column': 29, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 16, 'endColumn': 30}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 1.', 'line': 16, 'column': 34, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 16, 'endColumn': 35}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 1.', 'line': 17, 'column': 24, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 17, 'endColumn': 25}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 2.', 'line': 18, 'column': 32, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 18, 'endColumn': 33}, {'ruleId': 'capitalized-comments', 'severity': 2, 'message': 'Comments should not begin with a lowercase character.', 'line': 18, 'column': 36, 'nodeType': None, 'messageId': 'unexpectedLowercaseComment', 'endLine': 18, 'endColumn': 55, 'fix': {'range': [617, 618], 'text': 'Z'}}, {'ruleId': 'no-inline-comments', 'severity': 2, 'message': 'Unexpected comment inline with code.', 'line': 18, 'column': 36, 'nodeType': 'Line', 'messageId': 'unexpectedInlineComment', 'endLine': 18, 'endColumn': 55}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 1.', 'line': 19, 'column': 21, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 19, 'endColumn': 22}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 2.', 'line': 19, 'column': 32, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 19, 'endColumn': 33}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 2.', 'line': 19, 'column': 42, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 19, 'endColumn': 43}, {'ruleId': 'logical-assignment-operators', 'severity': 2, 'message': 'Assignment (=) can be replaced with operator assignment (||=).', 'line': 20, 'column': 13, 'nodeType': 'AssignmentExpression', 'messageId': 'assignment', 'endLine': 20, 'endColumn': 46, 'suggestions': [{'messageId': 'useLogicalOperator', 'data': {'operator': '||='}, 'fix': {'range': [710, 724], 'text': '||= '}, 'desc': 'Convert this assignment to use the operator ||=.'}]}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 1.', 'line': 20, 'column': 41, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 20, 'endColumn': 42}, {'ruleId': 'capitalized-comments', 'severity': 2, 'message': 'Comments should not begin with a lowercase character.', 'line': 20, 'column': 48, 'nodeType': None, 'messageId': 'unexpectedLowercaseComment', 'endLine': 20, 'endColumn': 74, 'fix': {'range': [739, 740], 'text': 'O'}}, {'ruleId': 'no-inline-comments', 'severity': 2, 'message': 'Unexpected comment inline with code.', 'line': 20, 'column': 48, 'nodeType': 'Line', 'messageId': 'unexpectedInlineComment', 'endLine': 20, 'endColumn': 74}]


Google Closure Compiler Output:

[{'level': 'warning', 'description': 'Missing semicolon', 'key': 'JSC_MISSING_SEMICOLON', 'source': '/tmp/tmpknf9j89c', 'line': 1, 'column': 0, 'length': 825, 'context': 'var isMatch = function(s, p) {\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Using `var` (prefer `const` or `let`).', 'key': 'JSC_VAR', 'source': '/tmp/tmpknf9j89c', 'line': 1, 'column': 0, 'length': 825, 'context': 'var isMatch = function(s, p) {\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Function must have JSDoc.', 'key': 'JSC_MISSING_JSDOC', 'source': '/tmp/tmpknf9j89c', 'line': 1, 'column': 14, 'length': 811, 'context': 'var isMatch = function(s, p) {\n              ^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Function Array.prototype.fill: called with 0 argument(s). Function requires at least 1 argument(s) and no more than 3 argument(s).', 'key': 'JSC_WRONG_ARGUMENT_COUNT', 'source': '/tmp/tmpknf9j89c', 'line': 3, 'column': 15, 'length': 21, 'context': '    const dp = new Array(m+1).fill().map(() => new Array(n+1).fill(false));\n               ^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'info', 'description': '0 error(s), 4 warning(s), 83.0% typed'}]"
49,Burst Balloons,"You are given n balloons, indexed from 0 to n - 1. Each balloon is painted with a number on it represented by an array nums. You are asked to burst all the balloons.

If you burst the ith balloon, you will get nums[i - 1] * nums[i] * nums[i + 1] coins. If i - 1 or i + 1 goes out of bounds of the array, then treat it as if there is a balloon with a 1 painted on it.

Return the maximum coins you can collect by bursting the balloons wisely.","Example 1:

Input: nums = [3,1,5,8]
Output: 167
Explanation:
nums = [3,1,5,8] --> [3,5,8] --> [3,8] --> [8] --> []
coins =  3*1*5    +   3*5*8   +  1*3*8  + 1*8*1 = 167
Example 2:

Input: nums = [1,5]
Output: 10
","/**
 * @param {number[]} balloons - The input array representing the balloon values.
 * @return {number} - The maximum coins that can be collected.
 */
var maxCoins = function(balloons) {
    const n = balloons.length;

    // Pad the `balloons` array with 1 on both sides to simplify boundary cases
    balloons.push(1);
    balloons.unshift(1);

    // Create a DP table initialized with 0, with size (n+2) x (n+2)
    const dp = Array.from({ length: n + 2 }, () => Array(n + 2).fill(0));

    // Iterate backwards over all possible subarray starting points
    for (let left = n; left >= 1; left--) {
        // Iterate over all possible subarray ending points
        for (let right = left; right <= n; right++) {
            let maxCoins = -Infinity; // Store the maximum coins for subarray [left, right]

            // Try bursting each balloon `idx` in the range as the last balloon
            for (let lastBurst = left; lastBurst <= right; lastBurst++) {
                // Calculate the coins for bursting balloon `lastBurst` last
                const coins = balloons[left - 1] * balloons[lastBurst] * balloons[right + 1] +
                              dp[left][lastBurst - 1] + dp[lastBurst + 1][right];

                // Update the maximum coins for this subarray
                maxCoins = Math.max(maxCoins, coins);
            }

            // Store the maximum coins obtained for subarray [left, right] in the DP table
            dp[left][right] = maxCoins;
        }
    }

    // Return the maximum coins for bursting all balloons between 1 and n
    return dp[1][n];
};

/**
 * Time Complexity: O(n^3)
 * - We have three nested loops: one for `left`, one for `right`, and one for choosing the last balloon to burst in the range.
 * 
 * Space Complexity: O(n^2)
 * - We use a DP table of size (n+2) x (n+2) to store the results of subproblems.
 */","n == nums.length
1 <= n <= 300
0 <= nums[i] <= 100",Hard,https://leetcode.com/problems/burst-balloons/solutions/5887973/beats-99-of-users-apparently/,"/**
 * @param {number[]} nums
 * @return {number}
 */
var maxCoins = function(nums) {
    
};","ESLint Output:

[{'ruleId': 'no-var', 'severity': 2, 'message': 'Unexpected var, use let or const instead.', 'line': 5, 'column': 1, 'nodeType': 'VariableDeclaration', 'messageId': 'unexpectedVar', 'endLine': 38, 'endColumn': 3, 'fix': {'range': [152, 155], 'text': 'let'}}, {'ruleId': 'no-unused-vars', 'severity': 2, 'message': ""'maxCoins' is assigned a value but never used."", 'line': 5, 'column': 5, 'nodeType': 'Identifier', 'messageId': 'unusedVar', 'endLine': 5, 'endColumn': 13}, {'ruleId': 'func-names', 'severity': 2, 'message': 'Unexpected unnamed function.', 'line': 5, 'column': 16, 'nodeType': 'FunctionExpression', 'messageId': 'unnamed', 'endLine': 5, 'endColumn': 24}, {'ruleId': 'max-statements', 'severity': 2, 'message': 'Function has too many statements (12). Maximum allowed is 10.', 'line': 5, 'column': 16, 'nodeType': 'FunctionExpression', 'messageId': 'exceed', 'endLine': 38, 'endColumn': 2}, {'ruleId': 'id-length', 'severity': 2, 'message': ""Identifier name 'n' is too short (< 2)."", 'line': 6, 'column': 11, 'nodeType': 'Identifier', 'messageId': 'tooShort', 'endLine': 6, 'endColumn': 12}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 1.', 'line': 9, 'column': 19, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 9, 'endColumn': 20}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 1.', 'line': 10, 'column': 22, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 10, 'endColumn': 23}, {'ruleId': 'one-var', 'severity': 2, 'message': ""Combine this with the previous 'const' statement."", 'line': 13, 'column': 5, 'nodeType': 'VariableDeclaration', 'messageId': 'combine', 'endLine': 13, 'endColumn': 74}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 2.', 'line': 13, 'column': 41, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 13, 'endColumn': 42}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 2.', 'line': 13, 'column': 62, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 13, 'endColumn': 63}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 0.', 'line': 13, 'column': 70, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 13, 'endColumn': 71}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 1.', 'line': 16, 'column': 32, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 16, 'endColumn': 33}, {'ruleId': 'no-plusplus', 'severity': 2, 'message': ""Unary operator '--' used."", 'line': 16, 'column': 35, 'nodeType': 'UpdateExpression', 'messageId': 'unexpectedUnaryOp', 'endLine': 16, 'endColumn': 41}, {'ruleId': 'no-plusplus', 'severity': 2, 'message': ""Unary operator '++' used."", 'line': 18, 'column': 44, 'nodeType': 'UpdateExpression', 'messageId': 'unexpectedUnaryOp', 'endLine': 18, 'endColumn': 51}, {'ruleId': 'no-shadow', 'severity': 2, 'message': ""'maxCoins' is already declared in the upper scope on line 5 column 5."", 'line': 19, 'column': 17, 'nodeType': 'Identifier', 'messageId': 'noShadow', 'endLine': 19, 'endColumn': 25}, {'ruleId': 'no-inline-comments', 'severity': 2, 'message': 'Unexpected comment inline with code.', 'line': 19, 'column': 39, 'nodeType': 'Line', 'messageId': 'unexpectedInlineComment', 'endLine': 19, 'endColumn': 92}, {'ruleId': 'no-plusplus', 'severity': 2, 'message': ""Unary operator '++' used."", 'line': 22, 'column': 60, 'nodeType': 'UpdateExpression', 'messageId': 'unexpectedUnaryOp', 'endLine': 22, 'endColumn': 71}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 1.', 'line': 24, 'column': 47, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 24, 'endColumn': 48}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 1.', 'line': 24, 'column': 91, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 24, 'endColumn': 92}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 1.', 'line': 25, 'column': 52, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 25, 'endColumn': 53}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 1.', 'line': 25, 'column': 72, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 25, 'endColumn': 73}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 1.', 'line': 37, 'column': 15, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 37, 'endColumn': 16}]


Google Closure Compiler Output:

[{'level': 'warning', 'description': 'Bad type annotation. expected closing } See https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler for more information.', 'key': 'JSC_TYPE_PARSE_ERROR', 'source': '/tmp/tmp1w3l7bdv', 'line': 2, 'column': 17, 'context': ' * @param {number[]} balloons - The input array representing the balloon values.\n                 ^'}, {'level': 'warning', 'description': 'Bad type annotation. expecting a variable name in a @param tag. See https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler for more information.', 'key': 'JSC_TYPE_PARSE_ERROR', 'source': '/tmp/tmp1w3l7bdv', 'line': 2, 'column': 17, 'context': ' * @param {number[]} balloons - The input array representing the balloon values.\n                 ^'}, {'level': 'warning', 'description': 'Using `var` (prefer `const` or `let`).', 'key': 'JSC_VAR', 'source': '/tmp/tmp1w3l7bdv', 'line': 5, 'column': 0, 'length': 1444, 'context': 'var maxCoins = function(balloons) {\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Parameter must have JSDoc.', 'key': 'JSC_MISSING_PARAMETER_JSDOC', 'source': '/tmp/tmp1w3l7bdv', 'line': 5, 'column': 24, 'length': 8, 'context': 'var maxCoins = function(balloons) {\n                        ^^^^^^^^'}, {'level': 'info', 'description': '0 error(s), 4 warning(s), 52.4% typed'}]"
50,Sudoku Solver,"Write a program to solve a Sudoku puzzle by filling the empty cells.

A sudoku solution must satisfy all of the following rules:

Each of the digits 1-9 must occur exactly once in each row.
Each of the digits 1-9 must occur exactly once in each column.
Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.
The '.' character indicates empty cells.","Example 1:Input: board = [[""5"",""3"",""."",""."",""7"",""."",""."",""."","".""],[""6"",""."",""."",""1"",""9"",""5"",""."",""."","".""],[""."",""9"",""8"",""."",""."",""."",""."",""6"","".""],[""8"",""."",""."",""."",""6"",""."",""."",""."",""3""],[""4"",""."",""."",""8"",""."",""3"",""."",""."",""1""],[""7"",""."",""."",""."",""2"",""."",""."",""."",""6""],[""."",""6"",""."",""."",""."",""."",""2"",""8"","".""],[""."",""."",""."",""4"",""1"",""9"",""."",""."",""5""],[""."",""."",""."",""."",""8"",""."",""."",""7"",""9""]]
Output: [[""5"",""3"",""4"",""6"",""7"",""8"",""9"",""1"",""2""],[""6"",""7"",""2"",""1"",""9"",""5"",""3"",""4"",""8""],[""1"",""9"",""8"",""3"",""4"",""2"",""5"",""6"",""7""],[""8"",""5"",""9"",""7"",""6"",""1"",""4"",""2"",""3""],[""4"",""2"",""6"",""8"",""5"",""3"",""7"",""9"",""1""],[""7"",""1"",""3"",""9"",""2"",""4"",""8"",""5"",""6""],[""9"",""6"",""1"",""5"",""3"",""7"",""2"",""8"",""4""],[""2"",""8"",""7"",""4"",""1"",""9"",""6"",""3"",""5""],[""3"",""4"",""5"",""2"",""8"",""6"",""1"",""7"",""9""]]
Explanation: The input board is shown above and the only valid solution is shown below:","var solveSudoku = function(board) {
    const solve = () => {
        for (let row = 0; row < 9; row++) {
            for (let col = 0; col < 9; col++) {
                if (board[row][col] === '.') {
                    for (let num = '1'; num <= '9'; num++) {
                        if (isValid(board, row, col, num)) {
                            board[row][col] = num;
                            if (solve()) return true;
                            board[row][col] = '.';
                        }
                    }
                    return false;
                }
            }
        }
        return true;
    };
    
    const isValid = (board, row, col, num) => {
        for (let i = 0; i < 9; i++) {
            if (board[row][i] === num || board[i][col] === num) return false;
        }
        let startRow = Math.floor(row / 3) * 3;
        let startCol = Math.floor(col / 3) * 3;
        for (let i = startRow; i < startRow + 3; i++) {
            for (let j = startCol; j < startCol + 3; j++) {
                if (board[i][j] === num) return false;
            }
        }
        return true;
    };
    
    solve();
};","board.length == 9
board[i].length == 9
board[i][j] is a digit or '.'.
It is guaranteed that the input board has only one solution.",Hard,https://leetcode.com/problems/sudoku-solver/description/,"/**
 * @param {character[][]} board
 * @return {void} Do not return anything, modify board in-place instead.
 */
var solveSudoku = function(board) {
    
};","ESLint Output:

[{'ruleId': 'no-var', 'severity': 2, 'message': 'Unexpected var, use let or const instead.', 'line': 1, 'column': 1, 'nodeType': 'VariableDeclaration', 'messageId': 'unexpectedVar', 'endLine': 35, 'endColumn': 3, 'fix': {'range': [0, 3], 'text': 'let'}}, {'ruleId': 'no-unused-vars', 'severity': 2, 'message': ""'solveSudoku' is assigned a value but never used."", 'line': 1, 'column': 5, 'nodeType': 'Identifier', 'messageId': 'unusedVar', 'endLine': 1, 'endColumn': 16}, {'ruleId': 'func-names', 'severity': 2, 'message': 'Unexpected unnamed function.', 'line': 1, 'column': 19, 'nodeType': 'FunctionExpression', 'messageId': 'unnamed', 'endLine': 1, 'endColumn': 27}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 9.', 'line': 3, 'column': 33, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 3, 'endColumn': 34}, {'ruleId': 'no-plusplus', 'severity': 2, 'message': ""Unary operator '++' used."", 'line': 3, 'column': 36, 'nodeType': 'UpdateExpression', 'messageId': 'unexpectedUnaryOp', 'endLine': 3, 'endColumn': 41}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 9.', 'line': 4, 'column': 37, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 4, 'endColumn': 38}, {'ruleId': 'no-plusplus', 'severity': 2, 'message': ""Unary operator '++' used."", 'line': 4, 'column': 40, 'nodeType': 'UpdateExpression', 'messageId': 'unexpectedUnaryOp', 'endLine': 4, 'endColumn': 45}, {'ruleId': 'no-plusplus', 'severity': 2, 'message': ""Unary operator '++' used."", 'line': 6, 'column': 53, 'nodeType': 'UpdateExpression', 'messageId': 'unexpectedUnaryOp', 'endLine': 6, 'endColumn': 58}, {'ruleId': 'max-depth', 'severity': 2, 'message': 'Blocks are nested too deeply (5). Maximum allowed is 4.', 'line': 7, 'column': 25, 'nodeType': 'IfStatement', 'messageId': 'tooDeeply', 'endLine': 11, 'endColumn': 26}, {'ruleId': 'no-use-before-define', 'severity': 2, 'message': ""'isValid' was used before it was defined."", 'line': 7, 'column': 29, 'nodeType': 'Identifier', 'messageId': 'usedBeforeDefined', 'endLine': 7, 'endColumn': 36}, {'ruleId': 'max-depth', 'severity': 2, 'message': 'Blocks are nested too deeply (6). Maximum allowed is 4.', 'line': 9, 'column': 29, 'nodeType': 'IfStatement', 'messageId': 'tooDeeply', 'endLine': 9, 'endColumn': 54}, {'ruleId': 'curly', 'severity': 2, 'message': ""Expected { after 'if' condition."", 'line': 9, 'column': 42, 'nodeType': 'IfStatement', 'messageId': 'missingCurlyAfterCondition', 'endLine': 9, 'endColumn': 54, 'fix': {'range': [415, 427], 'text': '{return true;}'}}, {'ruleId': 'one-var', 'severity': 2, 'message': ""Combine this with the previous 'const' statement."", 'line': 20, 'column': 5, 'nodeType': 'VariableDeclaration', 'messageId': 'combine', 'endLine': 32, 'endColumn': 7, 'fix': {'range': [629, 645], 'text': ',\n    \n    '}}, {'ruleId': 'no-shadow', 'severity': 2, 'message': ""'board' is already declared in the upper scope on line 1 column 28."", 'line': 20, 'column': 22, 'nodeType': 'Identifier', 'messageId': 'noShadow', 'endLine': 20, 'endColumn': 27}, {'ruleId': 'max-params', 'severity': 2, 'message': 'Arrow function has too many parameters (4). Maximum allowed is 3.', 'line': 20, 'column': 44, 'nodeType': 'ArrowFunctionExpression', 'messageId': 'exceed', 'endLine': 20, 'endColumn': 46}, {'ruleId': 'id-length', 'severity': 2, 'message': ""Identifier name 'i' is too short (< 2)."", 'line': 21, 'column': 18, 'nodeType': 'Identifier', 'messageId': 'tooShort', 'endLine': 21, 'endColumn': 19}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 9.', 'line': 21, 'column': 29, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 21, 'endColumn': 30}, {'ruleId': 'no-plusplus', 'severity': 2, 'message': ""Unary operator '++' used."", 'line': 21, 'column': 32, 'nodeType': 'UpdateExpression', 'messageId': 'unexpectedUnaryOp', 'endLine': 21, 'endColumn': 35}, {'ruleId': 'curly', 'severity': 2, 'message': ""Expected { after 'if' condition."", 'line': 22, 'column': 65, 'nodeType': 'IfStatement', 'messageId': 'missingCurlyAfterCondition', 'endLine': 22, 'endColumn': 78, 'fix': {'range': [786, 799], 'text': '{return false;}'}}, {'ruleId': 'prefer-const', 'severity': 2, 'message': ""'startRow' is never reassigned. Use 'const' instead."", 'line': 24, 'column': 13, 'nodeType': 'Identifier', 'messageId': 'useConst', 'endLine': 24, 'endColumn': 21, 'fix': {'range': [818, 857], 'text': 'const startRow = Math.floor(row / 3) * 3;'}}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 3.', 'line': 24, 'column': 41, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 24, 'endColumn': 42}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 3.', 'line': 24, 'column': 46, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 24, 'endColumn': 47}, {'ruleId': 'one-var', 'severity': 2, 'message': ""Combine this with the previous 'let' statement."", 'line': 25, 'column': 9, 'nodeType': 'VariableDeclaration', 'messageId': 'combine', 'endLine': 25, 'endColumn': 48, 'fix': {'range': [856, 869], 'text': ',\n        '}}, {'ruleId': 'prefer-const', 'severity': 2, 'message': ""'startCol' is never reassigned. Use 'const' instead."", 'line': 25, 'column': 13, 'nodeType': 'Identifier', 'messageId': 'useConst', 'endLine': 25, 'endColumn': 21, 'fix': {'range': [866, 905], 'text': 'const startCol = Math.floor(col / 3) * 3;'}}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 3.', 'line': 25, 'column': 41, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 25, 'endColumn': 42}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 3.', 'line': 25, 'column': 46, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 25, 'endColumn': 47}, {'ruleId': 'id-length', 'severity': 2, 'message': ""Identifier name 'i' is too short (< 2)."", 'line': 26, 'column': 18, 'nodeType': 'Identifier', 'messageId': 'tooShort', 'endLine': 26, 'endColumn': 19}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 3.', 'line': 26, 'column': 47, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 26, 'endColumn': 48}, {'ruleId': 'no-plusplus', 'severity': 2, 'message': ""Unary operator '++' used."", 'line': 26, 'column': 50, 'nodeType': 'UpdateExpression', 'messageId': 'unexpectedUnaryOp', 'endLine': 26, 'endColumn': 53}, {'ruleId': 'id-length', 'severity': 2, 'message': ""Identifier name 'j' is too short (< 2)."", 'line': 27, 'column': 22, 'nodeType': 'Identifier', 'messageId': 'tooShort', 'endLine': 27, 'endColumn': 23}, {'ruleId': 'no-magic-numbers', 'severity': 2, 'message': 'No magic number: 3.', 'line': 27, 'column': 51, 'nodeType': 'Literal', 'messageId': 'noMagic', 'endLine': 27, 'endColumn': 52}, {'ruleId': 'no-plusplus', 'severity': 2, 'message': ""Unary operator '++' used."", 'line': 27, 'column': 54, 'nodeType': 'UpdateExpression', 'messageId': 'unexpectedUnaryOp', 'endLine': 27, 'endColumn': 57}, {'ruleId': 'curly', 'severity': 2, 'message': ""Expected { after 'if' condition."", 'line': 28, 'column': 42, 'nodeType': 'IfStatement', 'messageId': 'missingCurlyAfterCondition', 'endLine': 28, 'endColumn': 55, 'fix': {'range': [1063, 1076], 'text': '{return false;}'}}]


Google Closure Compiler Output:

[{'level': 'warning', 'description': 'Using `var` (prefer `const` or `let`).', 'key': 'JSC_VAR', 'source': '/tmp/tmpacroxpd_', 'line': 1, 'column': 0, 'length': 1149, 'context': 'var solveSudoku = function(board) {\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'Function must have JSDoc.', 'key': 'JSC_MISSING_JSDOC', 'source': '/tmp/tmpacroxpd_', 'line': 1, 'column': 18, 'length': 1130, 'context': 'var solveSudoku = function(board) {\n                  ^^^^^^^^^^^^^^^^^'}, {'level': 'warning', 'description': 'increment/decrement\nfound   : string\nrequired: number', 'key': 'JSC_INVALID_OPERAND_TYPE', 'source': '/tmp/tmpacroxpd_', 'line': 6, 'column': 52, 'length': 3, 'context': ""                    for (let num = '1'; num <= '9'; num++) {\n                                                    ^^^""}, {'level': 'info', 'description': '0 error(s), 3 warning(s), 84.4% typed'}]"
